{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMglyphMixin = void 0;\n\nfunction CommonMglyphMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spreadArray([], __read(args))) || this;\n\n      _this.getParameters();\n\n      return _this;\n    }\n\n    class_1.prototype.getParameters = function () {\n      var _a = this.node.attributes.getList('width', 'height', 'valign'),\n          width = _a.width,\n          height = _a.height,\n          valign = _a.valign;\n\n      this.width = width === 'auto' ? 1 : this.length2em(width);\n      this.height = height === 'auto' ? 1 : this.length2em(height);\n      this.valign = this.length2em(valign || '0');\n    };\n\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n\n      bbox.w = this.width;\n      bbox.h = this.height + this.valign;\n      bbox.d = -this.valign;\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMglyphMixin = CommonMglyphMixin;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/common/Wrappers/mglyph.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,SAAgB,iBAAhB,CAAgE,IAAhE,EAAuE;AAErE,SAAA,UAAA,MAAA,EAAA;AAAqB,IAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAmBnB,aAAA,OAAA,GAAA;AAAY,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAAZ,UAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CACW,IADX,CAAA,CAAA,KACe,IADf;;AAEE,MAAA,KAAI,CAAC,aAAL;;;AACD;;AASM,IAAA,OAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACQ,UAAA,EAAA,GAA0B,KAAK,IAAL,CAAU,UAAV,CAAqB,OAArB,CAA6B,OAA7B,EAAsC,QAAtC,EAAgD,QAAhD,CAA1B;AAAA,UAAC,KAAK,GAAA,EAAA,CAAA,KAAN;AAAA,UAAQ,MAAM,GAAA,EAAA,CAAA,MAAd;AAAA,UAAgB,MAAM,GAAA,EAAA,CAAA,MAAtB;;AACN,WAAK,KAAL,GAAc,KAAK,KAAK,MAAV,GAAmB,CAAnB,GAAuB,KAAK,SAAL,CAAe,KAAf,CAArC;AACA,WAAK,MAAL,GAAe,MAAM,KAAK,MAAX,GAAoB,CAApB,GAAwB,KAAK,SAAL,CAAe,MAAf,CAAvC;AACA,WAAK,MAAL,GAAc,KAAK,SAAL,CAAe,MAAM,IAAI,GAAzB,CAAd;AACD,KALM;;AAUA,IAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAA+B,UAA/B,EAA0D;AAA3B,UAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,UAAA,GAAA,KAAA;AAA2B;;AACxD,MAAA,IAAI,CAAC,CAAL,GAAS,KAAK,KAAd;AACA,MAAA,IAAI,CAAC,CAAL,GAAS,KAAK,MAAL,GAAc,KAAK,MAA5B;AACA,MAAA,IAAI,CAAC,CAAL,GAAS,CAAC,KAAK,MAAf;AACD,KAJM;;AAMT,WAAA,OAAA;AAAC,GA/CD,CAAqB,IAArB,CAAA;AAiDD;;AAnDD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMglyph wrapper mixin for the MmlMglyph object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {BBox} from '../../../util/BBox.js';\n\n/*****************************************************************/\n/**\n * The CommonMglyph interface\n */\nexport interface CommonMglyph extends AnyWrapper {\n  /**\n   * The image's width, height, and valign values converted to em's\n   */\n  width: number;\n  height: number;\n  valign: number;\n\n  /**\n   * Obtain the width, height, and valign.\n   */\n  getParameters(): void;\n}\n\n/**\n * Shorthand for the CommonMglyph constructor\n */\nexport type MglyphConstructor = Constructor<CommonMglyph>;\n\n/*****************************************************************/\n/**\n * The CommonMglyph wrapper mixin for the MmlMglyph object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMglyphMixin<T extends WrapperConstructor>(Base: T): MglyphConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * The image's width converted to em's\n     */\n    public width: number;\n    /**\n     * The image's height converted to em's\n     */\n    public height: number;\n    /**\n     * The image's valign values converted to em's\n     */\n    public valign: number;\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.getParameters();\n    }\n\n    /**\n     * Obtain the width, height, and valign.\n     * Note:  Currently, the width and height must be specified explicitly, or they default to 1em\n     *   Since loading the image may be asynchronous, it would require a restart.\n     *   A future extension could implement this either by subclassing this object, or\n     *   perhaps as a post-filter on the MathML input jax that adds the needed dimensions\n     */\n    public getParameters() {\n      const {width, height, valign} = this.node.attributes.getList('width', 'height', 'valign');\n      this.width = (width === 'auto' ? 1 : this.length2em(width));\n      this.height = (height === 'auto' ? 1 : this.length2em(height));\n      this.valign = this.length2em(valign || '0');\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      bbox.w = this.width;\n      bbox.h = this.height + this.valign;\n      bbox.d = -this.valign;\n    }\n\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}