{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathMLVisitor = void 0;\n\nvar MmlVisitor_js_1 = require(\"./MmlVisitor.js\");\n\nvar MathMLVisitor = function (_super) {\n  __extends(MathMLVisitor, _super);\n\n  function MathMLVisitor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.document = null;\n    return _this;\n  }\n\n  MathMLVisitor.prototype.visitTree = function (node, document) {\n    this.document = document;\n    var root = document.createElement('top');\n    this.visitNode(node, root);\n    this.document = null;\n    return root.firstChild;\n  };\n\n  MathMLVisitor.prototype.visitTextNode = function (node, parent) {\n    parent.appendChild(this.document.createTextNode(node.getText()));\n  };\n\n  MathMLVisitor.prototype.visitXMLNode = function (node, parent) {\n    parent.appendChild(node.getXML().cloneNode(true));\n  };\n\n  MathMLVisitor.prototype.visitInferredMrowNode = function (node, parent) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(node.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        this.visitNode(child, parent);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  MathMLVisitor.prototype.visitDefault = function (node, parent) {\n    var e_2, _a;\n\n    var mml = this.document.createElement(node.kind);\n    this.addAttributes(node, mml);\n\n    try {\n      for (var _b = __values(node.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        this.visitNode(child, mml);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    parent.appendChild(mml);\n  };\n\n  MathMLVisitor.prototype.addAttributes = function (node, mml) {\n    var e_3, _a;\n\n    var attributes = node.attributes;\n    var names = attributes.getExplicitNames();\n\n    try {\n      for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n        var name_1 = names_1_1.value;\n        mml.setAttribute(name_1, attributes.getExplicit(name_1).toString());\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n\n  return MathMLVisitor;\n}(MmlVisitor_js_1.MmlVisitor);\n\nexports.MathMLVisitor = MathMLVisitor;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/core/MmlTree/MathMLVisitor.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  A visitor that produces MathML DOM nodes from the iternal nodes\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MmlVisitor} from './MmlVisitor.js';\nimport {MmlNode, TextNode, XMLNode} from './MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MathMLVisitor (subclass of MmlVisitor)\n */\n\nexport class MathMLVisitor extends MmlVisitor {\n  /**\n   * The document in which the nodes are being made\n   */\n  protected document: Document = null;\n\n  /**\n   * Convert the tree rooted at a particular node into DOM nodes.\n   *\n   * @param {MmlNode} node  The node to use as the root of the tree to traverse\n   * @param {Document} document  The document in which the nodes are created\n   * @return {Node}  The MathML DOM nodes representing the internal tree\n   */\n  public visitTree(node: MmlNode, document: Document): Node {\n    this.document = document;\n    let root = document.createElement('top');\n    this.visitNode(node, root);\n    this.document = null;\n    return root.firstChild;\n  }\n\n  /**\n   * @param {TextNode} node  The text node to visit\n   * @param {Element} parent  The DOM parent to which this node should be added\n   */\n  public visitTextNode(node: TextNode, parent: Element) {\n    parent.appendChild(this.document.createTextNode(node.getText()));\n  }\n\n  /**\n   * @param {XMLNode} node  The XML node to visit\n   * @param {Element} parent  The DOM parent to which this node should be added\n   */\n  public visitXMLNode(node: XMLNode, parent: Element) {\n    parent.appendChild((node.getXML() as Element).cloneNode(true));\n  }\n\n  /**\n   * Visit an inferred mrow, but don't add the inferred row itself (since\n   * it is supposed to be inferred).\n   *\n   * @param {MmlNode} node  The inferred mrow to visit\n   * @param {Element} parent  The DOM parent to which this node's children should be added\n   */\n  public visitInferredMrowNode(node: MmlNode, parent: Element) {\n    for (const child of node.childNodes) {\n      this.visitNode(child, parent);\n    }\n  }\n\n  /**\n   * The generic visiting function:\n   *   Create a DOM node of the correct type.\n   *   Add its explicit attributes.\n   *   Append its children nodes.\n   *   Append the new node to the DOM parent.\n   *\n   * @param {MmlNode} node  The node to visit\n   * @param {Element} parent  The DOM parent to which this node should be added\n   */\n  public visitDefault(node: MmlNode, parent: Element) {\n    let mml = this.document.createElement(node.kind);\n    this.addAttributes(node, mml);\n    for (const child of node.childNodes) {\n      this.visitNode(child, mml);\n    }\n    parent.appendChild(mml);\n  }\n  /**\n   * @param {MmlNode} node  The node who attributes are to be copied\n   * @param {Element} mml  The MathML DOM node to which attributes are being added\n   */\n  public addAttributes(node: MmlNode, mml: Element) {\n    let attributes = node.attributes;\n    let names = attributes.getExplicitNames();\n    for (const name of names) {\n      mml.setAttribute(name, attributes.getExplicit(name).toString());\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}