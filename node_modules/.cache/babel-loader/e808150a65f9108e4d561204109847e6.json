{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathChoice = void 0;\n\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\n\nvar MathChoice = function (_super) {\n  __extends(MathChoice, _super);\n\n  function MathChoice() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(MathChoice.prototype, \"kind\", {\n    get: function () {\n      return 'MathChoice';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MathChoice.prototype, \"arity\", {\n    get: function () {\n      return 4;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MathChoice.prototype, \"notParent\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MathChoice.prototype.setInheritedAttributes = function (attributes, display, level, prime) {\n    var selection = display ? 0 : Math.max(0, Math.min(level, 2)) + 1;\n    var child = this.childNodes[selection] || this.factory.create('mrow');\n    this.parent.replaceChild(child, this);\n    child.setInheritedAttributes(attributes, display, level, prime);\n  };\n\n  MathChoice.defaults = __assign({}, MmlNode_js_1.AbstractMmlBaseNode.defaults);\n  return MathChoice;\n}(MmlNode_js_1.AbstractMmlBaseNode);\n\nexports.MathChoice = MathChoice;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mathchoice.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAUA,IAAA,UAAA,GAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAhC,WAAA,UAAA,GAAA;;AA6CC;;AAjCC,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,YAAA;AACE,aAAO,YAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;SAAhB,YAAA;AACE,aAAO,CAAP;AACD,KAFe;qBAAA;;AAAA,GAAhB;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,WAAX,EAAoB;SAApB,YAAA;AACE,aAAO,IAAP;AACD,KAFmB;qBAAA;;AAAA,GAApB;;AAUO,EAAA,UAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,UAA8B,UAA9B,EAAyD,OAAzD,EAA2E,KAA3E,EAA0F,KAA1F,EAAwG;AACtG,QAAM,SAAS,GAAI,OAAO,GAAG,CAAH,GAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAZ,IAAkC,CAAnE;AACA,QAAM,KAAK,GAAG,KAAK,UAAL,CAAgB,SAAhB,KAA8B,KAAK,OAAL,CAAa,MAAb,CAAoB,MAApB,CAA5C;AACA,SAAK,MAAL,CAAY,YAAZ,CAAyB,KAAzB,EAAgC,IAAhC;AACA,IAAA,KAAK,CAAC,sBAAN,CAA6B,UAA7B,EAAyC,OAAzC,EAAkD,KAAlD,EAAyD,KAAzD;AACD,GALM;;AAjCO,EAAA,UAAA,CAAA,QAAA,GAAQ,QAAA,CAAA,EAAA,EACjB,YAAA,CAAA,mBAAA,CAAoB,QADH,CAAR;AAwChB,SAAA,UAAA;AAAC,CA7CD,CAAgC,YAAA,CAAA,mBAAhC,CAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MathChoice node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlBaseNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MathChoice node class (subclass of AbstractMmlBaseNode)\n *\n *  This is used by TeX's \\mathchoice macro, but removes itself\n *  during the setInheritedAttributes process\n */\n\nexport class MathChoice extends AbstractMmlBaseNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlBaseNode.defaults\n  };\n\n  /**\n   *  @override\n   */\n  public get kind() {\n    return 'MathChoice';\n  }\n\n  /**\n   * 4 children (display, text, script, and scriptscript styles)\n   * @override\n   */\n  public get arity() {\n    return 4;\n  }\n\n  /**\n   * This element is not considered a MathML container\n   * @override\n   */\n  public get notParent() {\n    return true;\n  }\n\n  /**\n   * Replace the MathChoice node with the selected on based on the displaystyle and scriptlevel settings\n   * (so the MathChoice never ends up in a finished MmlNode tree)\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    const selection = (display ? 0 : Math.max(0, Math.min(level, 2)) + 1);\n    const child = this.childNodes[selection] || this.factory.create('mrow');\n    this.parent.replaceChild(child, this);\n    child.setInheritedAttributes(attributes, display, level, prime);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}