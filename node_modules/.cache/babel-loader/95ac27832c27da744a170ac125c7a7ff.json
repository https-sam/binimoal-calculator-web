{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FontData = exports.NOSTRETCH = exports.H = exports.V = void 0;\n\nvar Options_js_1 = require(\"../../util/Options.js\");\n\nexports.V = 1;\nexports.H = 2;\nexports.NOSTRETCH = {\n  dir: 0\n};\n\nvar FontData = function () {\n  function FontData(options) {\n    var e_1, _a, e_2, _b;\n\n    if (options === void 0) {\n      options = null;\n    }\n\n    this.variant = {};\n    this.delimiters = {};\n    this.cssFontMap = {};\n    this.remapChars = {};\n    this.skewIcFactor = .75;\n    var CLASS = this.constructor;\n    this.options = Options_js_1.userOptions(Options_js_1.defaultOptions({}, CLASS.OPTIONS), options);\n    this.params = __assign({}, CLASS.defaultParams);\n    this.sizeVariants = __spreadArray([], __read(CLASS.defaultSizeVariants));\n    this.stretchVariants = __spreadArray([], __read(CLASS.defaultStretchVariants));\n    this.cssFontMap = __assign({}, CLASS.defaultCssFonts);\n\n    try {\n      for (var _c = __values(Object.keys(this.cssFontMap)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var name_1 = _d.value;\n\n        if (this.cssFontMap[name_1][0] === 'unknown') {\n          this.cssFontMap[name_1][0] = this.options.unknownFamily;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.cssFamilyPrefix = CLASS.defaultCssFamilyPrefix;\n    this.createVariants(CLASS.defaultVariants);\n    this.defineDelimiters(CLASS.defaultDelimiters);\n\n    try {\n      for (var _e = __values(Object.keys(CLASS.defaultChars)), _f = _e.next(); !_f.done; _f = _e.next()) {\n        var name_2 = _f.value;\n        this.defineChars(name_2, CLASS.defaultChars[name_2]);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    this.defineRemap('accent', CLASS.defaultAccentMap);\n    this.defineRemap('mo', CLASS.defaultMoMap);\n    this.defineRemap('mn', CLASS.defaultMnMap);\n  }\n\n  FontData.charOptions = function (font, n) {\n    var char = font[n];\n\n    if (char.length === 3) {\n      char[3] = {};\n    }\n\n    return char[3];\n  };\n\n  Object.defineProperty(FontData.prototype, \"styles\", {\n    get: function () {\n      return this._styles;\n    },\n    set: function (style) {\n      this._styles = style;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FontData.prototype.createVariant = function (name, inherit, link) {\n    if (inherit === void 0) {\n      inherit = null;\n    }\n\n    if (link === void 0) {\n      link = null;\n    }\n\n    var variant = {\n      linked: [],\n      chars: inherit ? Object.create(this.variant[inherit].chars) : {}\n    };\n\n    if (link && this.variant[link]) {\n      Object.assign(variant.chars, this.variant[link].chars);\n      this.variant[link].linked.push(variant.chars);\n      variant.chars = Object.create(variant.chars);\n    }\n\n    this.remapSmpChars(variant.chars, name);\n    this.variant[name] = variant;\n  };\n\n  FontData.prototype.remapSmpChars = function (chars, name) {\n    var e_3, _a, e_4, _b;\n\n    var CLASS = this.constructor;\n\n    if (CLASS.VariantSmp[name]) {\n      var SmpRemap = CLASS.SmpRemap;\n      var SmpGreek = [null, null, CLASS.SmpRemapGreekU, CLASS.SmpRemapGreekL];\n\n      try {\n        for (var _c = __values(CLASS.SmpRanges), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var _e = __read(_d.value, 3),\n              i = _e[0],\n              lo = _e[1],\n              hi = _e[2];\n\n          var base = CLASS.VariantSmp[name][i];\n          if (!base) continue;\n\n          for (var n = lo; n <= hi; n++) {\n            if (n === 0x3A2) continue;\n            var smp = base + n - lo;\n            chars[n] = this.smpChar(SmpRemap[smp] || smp);\n          }\n\n          if (SmpGreek[i]) {\n            try {\n              for (var _f = (e_4 = void 0, __values(Object.keys(SmpGreek[i]).map(function (x) {\n                return parseInt(x);\n              }))), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var n = _g.value;\n                chars[n] = this.smpChar(base + SmpGreek[i][n]);\n              }\n            } catch (e_4_1) {\n              e_4 = {\n                error: e_4_1\n              };\n            } finally {\n              try {\n                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n              } finally {\n                if (e_4) throw e_4.error;\n              }\n            }\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n\n    if (name === 'bold') {\n      chars[0x3DC] = this.smpChar(0x1D7CA);\n      chars[0x3DD] = this.smpChar(0x1D7CB);\n    }\n  };\n\n  FontData.prototype.smpChar = function (n) {\n    return [,,, {\n      smp: n\n    }];\n  };\n\n  FontData.prototype.createVariants = function (variants) {\n    var e_5, _a;\n\n    try {\n      for (var variants_1 = __values(variants), variants_1_1 = variants_1.next(); !variants_1_1.done; variants_1_1 = variants_1.next()) {\n        var variant = variants_1_1.value;\n        this.createVariant(variant[0], variant[1], variant[2]);\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (variants_1_1 && !variants_1_1.done && (_a = variants_1.return)) _a.call(variants_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n  };\n\n  FontData.prototype.defineChars = function (name, chars) {\n    var e_6, _a;\n\n    var variant = this.variant[name];\n    Object.assign(variant.chars, chars);\n\n    try {\n      for (var _b = __values(variant.linked), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var link = _c.value;\n        Object.assign(link, chars);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  };\n\n  FontData.prototype.defineDelimiters = function (delims) {\n    Object.assign(this.delimiters, delims);\n  };\n\n  FontData.prototype.defineRemap = function (name, remap) {\n    if (!this.remapChars.hasOwnProperty(name)) {\n      this.remapChars[name] = {};\n    }\n\n    Object.assign(this.remapChars[name], remap);\n  };\n\n  FontData.prototype.getDelimiter = function (n) {\n    return this.delimiters[n];\n  };\n\n  FontData.prototype.getSizeVariant = function (n, i) {\n    if (this.delimiters[n].variants) {\n      i = this.delimiters[n].variants[i];\n    }\n\n    return this.sizeVariants[i];\n  };\n\n  FontData.prototype.getStretchVariant = function (n, i) {\n    return this.stretchVariants[this.delimiters[n].stretchv ? this.delimiters[n].stretchv[i] : 0];\n  };\n\n  FontData.prototype.getChar = function (name, n) {\n    return this.variant[name].chars[n];\n  };\n\n  FontData.prototype.getVariant = function (name) {\n    return this.variant[name];\n  };\n\n  FontData.prototype.getCssFont = function (variant) {\n    return this.cssFontMap[variant] || ['serif', false, false];\n  };\n\n  FontData.prototype.getFamily = function (family) {\n    return this.cssFamilyPrefix ? this.cssFamilyPrefix + ', ' + family : family;\n  };\n\n  FontData.prototype.getRemappedChar = function (name, c) {\n    var map = this.remapChars[name] || {};\n    return map[c];\n  };\n\n  FontData.OPTIONS = {\n    unknownFamily: 'serif'\n  };\n  FontData.defaultVariants = [['normal'], ['bold', 'normal'], ['italic', 'normal'], ['bold-italic', 'italic', 'bold'], ['double-struck', 'bold'], ['fraktur', 'normal'], ['bold-fraktur', 'bold', 'fraktur'], ['script', 'italic'], ['bold-script', 'bold-italic', 'script'], ['sans-serif', 'normal'], ['bold-sans-serif', 'bold', 'sans-serif'], ['sans-serif-italic', 'italic', 'sans-serif'], ['sans-serif-bold-italic', 'bold-italic', 'bold-sans-serif'], ['monospace', 'normal']];\n  FontData.defaultCssFonts = {\n    normal: ['unknown', false, false],\n    bold: ['unknown', false, true],\n    italic: ['unknown', true, false],\n    'bold-italic': ['unknown', true, true],\n    'double-struck': ['unknown', false, true],\n    fraktur: ['unknown', false, false],\n    'bold-fraktur': ['unknown', false, true],\n    script: ['cursive', false, false],\n    'bold-script': ['cursive', false, true],\n    'sans-serif': ['sans-serif', false, false],\n    'bold-sans-serif': ['sans-serif', false, true],\n    'sans-serif-italic': ['sans-serif', true, false],\n    'sans-serif-bold-italic': ['sans-serif', true, true],\n    monospace: ['monospace', false, false]\n  };\n  FontData.defaultCssFamilyPrefix = '';\n  FontData.VariantSmp = {\n    bold: [0x1D400, 0x1D41A, 0x1D6A8, 0x1D6C2, 0x1D7CE],\n    italic: [0x1D434, 0x1D44E, 0x1D6E2, 0x1D6FC],\n    'bold-italic': [0x1D468, 0x1D482, 0x1D71C, 0x1D736],\n    script: [0x1D49C, 0x1D4B6],\n    'bold-script': [0x1D4D0, 0x1D4EA],\n    fraktur: [0x1D504, 0x1D51E],\n    'double-struck': [0x1D538, 0x1D552,,, 0x1D7D8],\n    'bold-fraktur': [0x1D56C, 0x1D586],\n    'sans-serif': [0x1D5A0, 0x1D5BA,,, 0x1D7E2],\n    'bold-sans-serif': [0x1D5D4, 0x1D5EE, 0x1D756, 0x1D770, 0x1D7EC],\n    'sans-serif-italic': [0x1D608, 0x1D622],\n    'sans-serif-bold-italic': [0x1D63C, 0x1D656, 0x1D790, 0x1D7AA],\n    'monospace': [0x1D670, 0x1D68A,,, 0x1D7F6]\n  };\n  FontData.SmpRanges = [[0, 0x41, 0x5A], [1, 0x61, 0x7A], [2, 0x391, 0x3A9], [3, 0x3B1, 0x3C9], [4, 0x30, 0x39]];\n  FontData.SmpRemap = {\n    0x1D455: 0x210E,\n    0x1D49D: 0x212C,\n    0x1D4A0: 0x2130,\n    0x1D4A1: 0x2131,\n    0x1D4A3: 0x210B,\n    0x1D4A4: 0x2110,\n    0x1D4A7: 0x2112,\n    0x1D4A8: 0x2133,\n    0x1D4AD: 0x211B,\n    0x1D4BA: 0x212F,\n    0x1D4BC: 0x210A,\n    0x1D4C4: 0x2134,\n    0x1D506: 0x212D,\n    0x1D50B: 0x210C,\n    0x1D50C: 0x2111,\n    0x1D515: 0x211C,\n    0x1D51D: 0x2128,\n    0x1D53A: 0x2102,\n    0x1D53F: 0x210D,\n    0x1D545: 0x2115,\n    0x1D547: 0x2119,\n    0x1D548: 0x211A,\n    0x1D549: 0x211D,\n    0x1D551: 0x2124\n  };\n  FontData.SmpRemapGreekU = {\n    0x2207: 0x19,\n    0x03F4: 0x11\n  };\n  FontData.SmpRemapGreekL = {\n    0x3D1: 0x1B,\n    0x3D5: 0x1D,\n    0x3D6: 0x1F,\n    0x3F0: 0x1C,\n    0x3F1: 0x1E,\n    0x3F5: 0x1A,\n    0x2202: 0x19\n  };\n  FontData.defaultAccentMap = {\n    0x0300: '\\u02CB',\n    0x0301: '\\u02CA',\n    0x0302: '\\u02C6',\n    0x0303: '\\u02DC',\n    0x0304: '\\u02C9',\n    0x0306: '\\u02D8',\n    0x0307: '\\u02D9',\n    0x0308: '\\u00A8',\n    0x030A: '\\u02DA',\n    0x030C: '\\u02C7',\n    0x2192: '\\u20D7',\n    0x2032: '\\'',\n    0x2033: '\\'\\'',\n    0x2034: '\\'\\'\\'',\n    0x2035: '`',\n    0x2036: '``',\n    0x2037: '```',\n    0x2057: '\\'\\'\\'\\'',\n    0x20D0: '\\u21BC',\n    0x20D1: '\\u21C0',\n    0x20D6: '\\u2190',\n    0x20E1: '\\u2194',\n    0x20F0: '*',\n    0x20DB: '...',\n    0x20DC: '....',\n    0x20EC: '\\u21C1',\n    0x20ED: '\\u21BD',\n    0x20EE: '\\u2190',\n    0x20EF: '\\u2192'\n  };\n  FontData.defaultMoMap = {\n    0x002D: '\\u2212'\n  };\n  FontData.defaultMnMap = {\n    0x002D: '\\u2212'\n  };\n  FontData.defaultParams = {\n    x_height: .442,\n    quad: 1,\n    num1: .676,\n    num2: .394,\n    num3: .444,\n    denom1: .686,\n    denom2: .345,\n    sup1: .413,\n    sup2: .363,\n    sup3: .289,\n    sub1: .15,\n    sub2: .247,\n    sup_drop: .386,\n    sub_drop: .05,\n    delim1: 2.39,\n    delim2: 1.0,\n    axis_height: .25,\n    rule_thickness: .06,\n    big_op_spacing1: .111,\n    big_op_spacing2: .167,\n    big_op_spacing3: .2,\n    big_op_spacing4: .6,\n    big_op_spacing5: .1,\n    surd_height: .075,\n    scriptspace: .05,\n    nulldelimiterspace: .12,\n    delimiterfactor: 901,\n    delimitershortfall: .3,\n    min_rule_thickness: 1.25,\n    separation_factor: 1.75,\n    extra_ic: .033\n  };\n  FontData.defaultDelimiters = {};\n  FontData.defaultChars = {};\n  FontData.defaultSizeVariants = [];\n  FontData.defaultStretchVariants = [];\n  return FontData;\n}();\n\nexports.FontData = FontData;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/output/common/FontData.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the FontData class for character bbox data\n *                and stretchy delimiters.\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList, defaultOptions, userOptions} from '../../util/Options.js';\nimport {StyleList} from '../../util/StyleList.js';\n\n/****************************************************************************/\n\n/**\n * The extra options allowed in a CharData array\n */\nexport interface CharOptions {\n  ic?: number;                  // italic correction value\n  sk?: number;                  // skew value\n  dx?: number;                  // offset for combining characters\n  unknown?: boolean;            // true if not found in the given variant\n  smp?: number;                 // Math Alphanumeric codepoint this char is mapped to\n}\n\n/****************************************************************************/\n\n/**\n * Data about a character\n *   [height, depth, width, {italic-correction, skew, options}]\n *\n * @template C  The CharOptions type\n */\nexport type CharData<C extends CharOptions> =\n  [number, number, number] |\n  [number, number, number, C];\n\n/**\n * An object making character positions to character data\n *\n * @template C  The CharOptions type\n */\nexport type CharMap<C extends CharOptions> = {\n  [n: number]: CharData<C>;\n};\n\n/**\n * An object making variants to character maps\n *\n * @template C  The CharOptions type\n */\nexport type CharMapMap<C extends CharOptions> = {\n  [name: string]: CharMap<C>;\n};\n\n/****************************************************************************/\n\n/**\n * Data for a variant\n *\n * @template C  The CharOptions type\n */\nexport interface VariantData<C extends CharOptions> {\n  /**\n   * A list of CharMaps that must be updated when characters are\n   * added to this variant\n   */\n  linked: CharMap<C>[];\n  /**\n   * The character data for this variant\n   */\n  chars: CharMap<C>;\n}\n\n/**\n * An object making variants names to variant data\n *\n * @template C  The CharOptions type\n * @template V  The VariantData type\n */\nexport type VariantMap<C extends CharOptions, V extends VariantData<C>> = {\n  [name: string]: V;\n};\n\n\n/**\n * Data to use to map unknown characters in a variant to a\n * generic CSS font:\n *\n *    [fontname, italic, bold]\n */\nexport type CssFontData = [string, boolean, boolean];\n\n/**\n * An object mapping a variant name to the CSS data needed for it\n */\nexport type CssFontMap = {\n  [name: string]: CssFontData;\n};\n\n/****************************************************************************/\n\n/**\n * Stretchy delimiter data\n */\nexport const enum DIRECTION {None, Vertical, Horizontal}\nexport const V = DIRECTION.Vertical;\nexport const H = DIRECTION.Horizontal;\n\n/****************************************************************************/\n\n/**\n * Data needed for stretchy vertical and horizontal characters\n */\nexport type DelimiterData = {\n  dir: DIRECTION;       // vertical or horizontal direction\n  sizes?: number[];     // Array of fixed sizes for this character\n  variants?: number[];  // The variants in which the different sizes can be found (if not the default)\n  schar?: number[];     // The character number to use for each size (if different from the default)\n  stretch?: number[];   // The unicode code points for the parts of multi-character versions [beg, ext, end, mid?]\n  stretchv?: number[];  // the variants to use for the stretchy characters (index into variant name array)\n  HDW?: number[];       // [h, d, w] (for vertical, h and d are the normal size, w is the multi-character width,\n                        //            for horizontal, h and d are the multi-character ones, w is for the normal size).\n  min?: number;         // The minimum size a multi-character version can be\n  c?: number;           // The character number (for aliased delimiters)\n  fullExt?: [number, number]  // When present, extenders must be full sized, and the first number is\n                              //   the size of the extender, while the second is the total size of the ends\n};\n\n/**\n * An object mapping character numbers to delimiter data\n *\n * @template D  The DelimiterData type\n */\nexport type DelimiterMap<D extends DelimiterData> = {\n  [n: number]: D;\n};\n\n/**\n * Delimiter data for a non-stretchy character\n */\nexport const NOSTRETCH: DelimiterData = {dir: DIRECTION.None};\n\n/****************************************************************************/\n\n/**\n * Data for remapping characters\n */\nexport type RemapData = string;\nexport type RemapMap = {\n  [key: number]: RemapData;\n};\nexport type RemapMapMap = {\n  [key: string]: RemapMap;\n};\n\n/**\n * Character remapping data for Math Alphanumerics\n */\nexport type SmpMap = {\n  [c: number]: number;\n};\n\n/**\n * Data for Math Alphanumeric conversion:  starting positions for\n *  [Alpha, alpha, Greek, greek, Numbers]\n */\nexport type SmpData = [number, number, number?, number?, number?];\n\n\n/****************************************************************************/\n\n/**\n * Font parameters (for TeX typesetting rules)\n */\nexport type FontParameters = {\n  x_height: number,\n  quad: number,\n  num1: number,\n  num2: number,\n  num3: number,\n  denom1: number,\n  denom2: number,\n  sup1: number,\n  sup2: number,\n  sup3: number,\n  sub1: number,\n  sub2: number,\n  sup_drop: number,\n  sub_drop: number,\n  delim1: number,\n  delim2: number,\n  axis_height: number,\n  rule_thickness: number,\n  big_op_spacing1: number,\n  big_op_spacing2: number,\n  big_op_spacing3: number,\n  big_op_spacing4: number,\n  big_op_spacing5: number,\n\n  surd_height: number,\n\n  scriptspace: number,\n  nulldelimiterspace: number,\n  delimiterfactor: number,\n  delimitershortfall: number,\n\n  min_rule_thickness: number,\n  separation_factor: number,\n  extra_ic: number\n};\n\n/****************************************************************************/\n/**\n *  The FontData class (for storing character bounding box data by variant,\n *                      and the stretchy delimiter data).\n *\n * @template C  The CharOptions type\n * @template V  The VariantData type\n * @template D  The DelimiterData type\n */\nexport class FontData<C extends CharOptions, V extends VariantData<C>, D extends DelimiterData> {\n\n  /**\n   * Options for the font\n   */\n  public static OPTIONS: OptionList = {\n    unknownFamily: 'serif'     // Should use 'monospace' with LiteAdaptor\n  };\n\n  /**\n   *  The standard variants to define\n   */\n  public static defaultVariants = [\n    ['normal'],\n    ['bold', 'normal'],\n    ['italic', 'normal'],\n    ['bold-italic', 'italic', 'bold'],\n    ['double-struck', 'bold'],\n    ['fraktur', 'normal'],\n    ['bold-fraktur', 'bold', 'fraktur'],\n    ['script', 'italic'],\n    ['bold-script', 'bold-italic', 'script'],\n    ['sans-serif', 'normal'],\n    ['bold-sans-serif', 'bold', 'sans-serif'],\n    ['sans-serif-italic', 'italic', 'sans-serif'],\n    ['sans-serif-bold-italic', 'bold-italic', 'bold-sans-serif'],\n    ['monospace', 'normal']\n  ];\n\n  /**\n   * The family, style, and weight to use for each variant (for unknown characters)\n   * The 'unknown' family is replaced by options.unknownFamily\n   */\n  public static defaultCssFonts: CssFontMap = {\n    normal: ['unknown', false, false],\n    bold: ['unknown', false, true],\n    italic: ['unknown', true, false],\n    'bold-italic': ['unknown', true, true],\n    'double-struck': ['unknown', false, true],\n    fraktur: ['unknown', false, false],\n    'bold-fraktur': ['unknown', false, true],\n    script: ['cursive', false, false],\n    'bold-script': ['cursive', false, true],\n    'sans-serif': ['sans-serif', false, false],\n    'bold-sans-serif': ['sans-serif', false, true],\n    'sans-serif-italic': ['sans-serif', true, false],\n    'sans-serif-bold-italic': ['sans-serif', true, true],\n    monospace: ['monospace', false, false]\n  };\n\n  /**\n   * The default prefix for explicit font-family settings\n   */\n  protected static defaultCssFamilyPrefix = '';\n\n  /**\n   * Variant locations in the Math Alphabnumerics block:\n   *  [upper-alpha, lower-alpha, upper-Greek, lower-Greek, numbers]\n   */\n  public static VariantSmp: {[name: string]: SmpData} = {\n    bold: [0x1D400, 0x1D41A, 0x1D6A8, 0x1D6C2, 0x1D7CE],\n    italic: [0x1D434, 0x1D44E, 0x1D6E2, 0x1D6FC],\n    'bold-italic': [0x1D468, 0x1D482, 0x1D71C, 0x1D736],\n    script: [0x1D49C, 0x1D4B6],\n    'bold-script': [0x1D4D0, 0x1D4EA],\n    fraktur: [0x1D504, 0x1D51E],\n    'double-struck': [0x1D538, 0x1D552, , , 0x1D7D8],\n    'bold-fraktur': [0x1D56C, 0x1D586],\n    'sans-serif': [0x1D5A0, 0x1D5BA, , , 0x1D7E2],\n    'bold-sans-serif': [0x1D5D4, 0x1D5EE, 0x1D756, 0x1D770, 0x1D7EC],\n    'sans-serif-italic': [0x1D608, 0x1D622],\n    'sans-serif-bold-italic': [0x1D63C, 0x1D656, 0x1D790, 0x1D7AA],\n    'monospace': [0x1D670, 0x1D68A, , , 0x1D7F6]\n  };\n\n  /**\n   * Character ranges to remap into Math Alphanumerics\n   */\n  public static SmpRanges = [\n    [0, 0x41, 0x5A],   // Upper-case alpha\n    [1, 0x61, 0x7A],   // Lower-case alpha\n    [2, 0x391, 0x3A9], // Upper-case Greek\n    [3, 0x3B1, 0x3C9], // Lower-case Greek\n    [4, 0x30, 0x39]    // Numbers\n  ];\n\n  /**\n   * Characters to map back top other Unicode positions\n   * (holes in the Math Alphanumeric ranges)\n   */\n  public static SmpRemap: SmpMap = {\n    0x1D455: 0x210E,   // PLANCK CONSTANT\n    0x1D49D: 0x212C,   // SCRIPT CAPITAL B\n    0x1D4A0: 0x2130,   // SCRIPT CAPITAL E\n    0x1D4A1: 0x2131,   // SCRIPT CAPITAL F\n    0x1D4A3: 0x210B,   // SCRIPT CAPITAL H\n    0x1D4A4: 0x2110,   // SCRIPT CAPITAL I\n    0x1D4A7: 0x2112,   // SCRIPT CAPITAL L\n    0x1D4A8: 0x2133,   // SCRIPT CAPITAL M\n    0x1D4AD: 0x211B,   // SCRIPT CAPITAL R\n    0x1D4BA: 0x212F,   // SCRIPT SMALL E\n    0x1D4BC: 0x210A,   // SCRIPT SMALL G\n    0x1D4C4: 0x2134,   // SCRIPT SMALL O\n    0x1D506: 0x212D,   // BLACK-LETTER CAPITAL C\n    0x1D50B: 0x210C,   // BLACK-LETTER CAPITAL H\n    0x1D50C: 0x2111,   // BLACK-LETTER CAPITAL I\n    0x1D515: 0x211C,   // BLACK-LETTER CAPITAL R\n    0x1D51D: 0x2128,   // BLACK-LETTER CAPITAL Z\n    0x1D53A: 0x2102,   // DOUBLE-STRUCK CAPITAL C\n    0x1D53F: 0x210D,   // DOUBLE-STRUCK CAPITAL H\n    0x1D545: 0x2115,   // DOUBLE-STRUCK CAPITAL N\n    0x1D547: 0x2119,   // DOUBLE-STRUCK CAPITAL P\n    0x1D548: 0x211A,   // DOUBLE-STRUCK CAPITAL Q\n    0x1D549: 0x211D,   // DOUBLE-STRUCK CAPITAL R\n    0x1D551: 0x2124,   // DOUBLE-STRUCK CAPITAL Z\n  };\n\n  /**\n   * Greek upper-case variants\n   */\n  public static SmpRemapGreekU: SmpMap = {\n    0x2207: 0x19,  // nabla\n    0x03F4: 0x11   // theta symbol\n  };\n\n  /**\n   * Greek lower-case variants\n   */\n  public static SmpRemapGreekL: SmpMap = {\n    0x3D1: 0x1B,  // theta symbol\n    0x3D5: 0x1D,  // phi symbol\n    0x3D6: 0x1F,  // omega symbol\n    0x3F0: 0x1C,  // kappa symbol\n    0x3F1: 0x1E,  // rho symbol\n    0x3F5: 0x1A,  // lunate epsilon symbol\n    0x2202: 0x19  // partial differential\n  };\n\n  /**\n   *  The default remappings\n   */\n  protected static defaultAccentMap: RemapMap = {\n    0x0300: '\\u02CB',  // grave accent\n    0x0301: '\\u02CA',  // acute accent\n    0x0302: '\\u02C6',  // curcumflex\n    0x0303: '\\u02DC',  // tilde accent\n    0x0304: '\\u02C9',  // macron\n    0x0306: '\\u02D8',  // breve\n    0x0307: '\\u02D9',  // dot\n    0x0308: '\\u00A8',  // diaresis\n    0x030A: '\\u02DA',  // ring above\n    0x030C: '\\u02C7',  // caron\n    0x2192: '\\u20D7',\n    0x2032: '\\'',\n    0x2033: '\\'\\'',\n    0x2034: '\\'\\'\\'',\n    0x2035: '`',\n    0x2036: '``',\n    0x2037: '```',\n    0x2057: '\\'\\'\\'\\'',\n    0x20D0: '\\u21BC', // combining left harpoon\n    0x20D1: '\\u21C0', // combining right harpoon\n    0x20D6: '\\u2190', // combining left arrow\n    0x20E1: '\\u2194', // combining left-right arrow\n    0x20F0: '*',      // combining asterisk\n    0x20DB: '...',    // combining three dots above\n    0x20DC: '....',   // combining four dots above\n    0x20EC: '\\u21C1', // combining low left harpoon\n    0x20ED: '\\u21BD', // combining low right harpoon\n    0x20EE: '\\u2190', // combining low left arrows\n    0x20EF: '\\u2192'  // combining low right arrows\n  };\n\n  /**\n   * Default map for characters inside <mo>\n   */\n  protected static defaultMoMap: RemapMap = {\n    0x002D: '\\u2212' // hyphen\n  };\n\n  /**\n   * Default map for characters inside <mn>\n   */\n  protected static defaultMnMap: RemapMap = {\n    0x002D: '\\u2212' // hyphen\n  };\n\n  /**\n   *  The default font parameters for the font\n   */\n  public static defaultParams: FontParameters = {\n    x_height:         .442,\n    quad:             1,\n    num1:             .676,\n    num2:             .394,\n    num3:             .444,\n    denom1:           .686,\n    denom2:           .345,\n    sup1:             .413,\n    sup2:             .363,\n    sup3:             .289,\n    sub1:             .15,\n    sub2:             .247,\n    sup_drop:         .386,\n    sub_drop:         .05,\n    delim1:          2.39,\n    delim2:          1.0,\n    axis_height:      .25,\n    rule_thickness:   .06,\n    big_op_spacing1:  .111,\n    big_op_spacing2:  .167,\n    big_op_spacing3:  .2,\n    big_op_spacing4:  .6,\n    big_op_spacing5:  .1,\n\n    surd_height:      .075,\n\n    scriptspace:         .05,\n    nulldelimiterspace:  .12,\n    delimiterfactor:     901,\n    delimitershortfall:   .3,\n\n    min_rule_thickness:  1.25,     // in pixels\n    separation_factor:   1.75,     // expansion factor for spacing e.g. between accents and base\n    extra_ic:            .033      // extra spacing for scripts (compensate for not having actual ic values)\n  };\n\n  /**\n   * The default delimiter data\n   */\n  protected static defaultDelimiters: DelimiterMap<any> = {};\n\n  /**\n   * The default character data\n   */\n  protected static defaultChars: CharMapMap<any> = {};\n\n  /**\n   * The default variants for the fixed size stretchy delimiters\n   */\n  protected static defaultSizeVariants: string[] = [];\n\n  /**\n   * The default variants for the assembly parts for stretchy delimiters\n   */\n  protected static defaultStretchVariants: string[] = [];\n\n  /**\n   * The font options\n   */\n  protected options: OptionList;\n\n  /**\n   * The actual variant information for this font\n   */\n  protected variant: VariantMap<C, V> = {};\n\n  /**\n   * The actual delimiter information for this font\n   */\n  protected delimiters: DelimiterMap<D> = {};\n\n  /**\n   * The actual size variants to use for this font\n   */\n  protected sizeVariants: string[];\n\n  /**\n   * The actual stretchy variants to use for this font\n   */\n  protected stretchVariants: string[];\n\n  /**\n   * The data to use to make variants to default fonts and css for unknown characters\n   */\n  protected cssFontMap: CssFontMap = {};\n\n  /**\n   * A prefix to use for explicit font-family CSS settings\n   */\n  public cssFamilyPrefix: string;\n\n  /**\n   * The character maps\n   */\n  protected remapChars: RemapMapMap = {};\n\n  /**\n   * The actual font parameters for this font\n   */\n  public params: FontParameters;\n\n  /**\n   * Factor by which to multiply italic correction for computation of delta in munderover\n   */\n  public skewIcFactor: number = .75;\n\n  /**\n   * Any styles needed for the font\n   */\n  protected _styles: StyleList;\n\n  /**\n   * @param {CharMap} font   The font to check\n   * @param {number} n       The character to get options for\n   * @return {CharOptions}   The options for the character\n   */\n  public static charOptions(font: CharMap<CharOptions>, n: number): CharOptions {\n    const char = font[n];\n    if (char.length === 3) {\n      (char as any)[3] = {};\n    }\n    return char[3];\n  }\n\n  /**\n   * Copies the data from the defaults to the instance\n   *\n   * @param {OptionList} options   The options for this font\n   *\n   * @constructor\n   */\n  constructor(options: OptionList = null) {\n    let CLASS = (this.constructor as typeof FontData);\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.params = {...CLASS.defaultParams};\n    this.sizeVariants = [...CLASS.defaultSizeVariants];\n    this.stretchVariants = [...CLASS.defaultStretchVariants];\n    this.cssFontMap = {...CLASS.defaultCssFonts};\n    for (const name of Object.keys(this.cssFontMap)) {\n      if (this.cssFontMap[name][0] === 'unknown') {\n        this.cssFontMap[name][0] = this.options.unknownFamily;\n      }\n    }\n    this.cssFamilyPrefix = CLASS.defaultCssFamilyPrefix;\n    this.createVariants(CLASS.defaultVariants);\n    this.defineDelimiters(CLASS.defaultDelimiters);\n    for (const name of Object.keys(CLASS.defaultChars)) {\n      this.defineChars(name, CLASS.defaultChars[name]);\n    }\n    this.defineRemap('accent', CLASS.defaultAccentMap);\n    this.defineRemap('mo', CLASS.defaultMoMap);\n    this.defineRemap('mn', CLASS.defaultMnMap);\n  }\n\n  /**\n   * Returns list of styles needed for the font\n   */\n  get styles(): StyleList {\n    return this._styles;\n  }\n\n  /**\n   * Sets styles needed for that font.\n   */\n  set styles(style: StyleList) {\n    this._styles = style;\n  }\n\n  /**\n   * Creates the data structure for a variant -- an object with\n   *   prototype chain that includes a copy of the linked variant,\n   *   and then the inherited variant chain.\n   *\n   *   The reason for this extra link is that for a mathvariant like\n   *   bold-italic, you want to inherit from both the bold and\n   *   italic variants, but the prototype chain can only inherit\n   *   from one. So for bold-italic, we make an object that has a\n   *   prototype consisting of a copy of the bold data, and add the\n   *   italic data as the prototype chain. (Since this is a copy, we\n   *   keep a record of this link so that if bold is changed later,\n   *   we can update this copy. That is not needed for the prototype\n   *   chain, since the prototypes are the actual objects, not\n   *   copies.) We then use this bold-plus-italic object as the\n   *   prototype chain for the bold-italic object\n   *\n   *   That means that bold-italic will first look in its own object\n   *   for specifically bold-italic glyphs that are defined there,\n   *   then in the copy of the bold glyphs (only its top level is\n   *   copied, not its prototype chain), and then the specifically\n   *   italic glyphs, and then the prototype chain for italics,\n   *   which is the normal glyphs. Effectively, this means\n   *   bold-italic looks for bold-italic, then bold, then italic,\n   *   then normal glyphs in order to find the given character.\n   *\n   * @param {string} name     The new variant to create\n   * @param {string} inherit  The variant to use if a character is not in this one\n   * @param {string} link     A variant to search before the inherit one (but only\n   *                           its top-level object).\n   */\n  public createVariant(name: string, inherit: string = null, link: string = null) {\n    let variant = {\n      linked: [] as CharMap<C>[],\n      chars: (inherit ? Object.create(this.variant[inherit].chars) : {}) as CharMap<C>\n    } as V;\n    if (link && this.variant[link]) {\n      Object.assign(variant.chars, this.variant[link].chars);\n      this.variant[link].linked.push(variant.chars);\n      variant.chars = Object.create(variant.chars);\n    }\n    this.remapSmpChars(variant.chars, name);\n    this.variant[name] = variant;\n  }\n\n  /**\n   * Create the mapping from Basic Latin and Greek blocks to\n   * the Math Alphanumeric block for a given variant.\n   */\n  protected remapSmpChars(chars: CharMap<C>, name: string) {\n    const CLASS = (this.constructor as typeof FontData);\n    if (CLASS.VariantSmp[name]) {\n      const SmpRemap = CLASS.SmpRemap;\n      const SmpGreek = [null, null, CLASS.SmpRemapGreekU, CLASS.SmpRemapGreekL];\n      for (const [i, lo, hi] of CLASS.SmpRanges) {\n        const base = CLASS.VariantSmp[name][i];\n        if (!base) continue;\n        for (let n = lo; n <= hi; n++) {\n          if (n === 0x3A2) continue;\n          const smp = base + n - lo;\n          chars[n] = this.smpChar(SmpRemap[smp] || smp);\n        }\n        if (SmpGreek[i]) {\n          for (const n of Object.keys(SmpGreek[i]).map((x) => parseInt(x))) {\n            chars[n] = this.smpChar(base + SmpGreek[i][n]);\n          }\n        }\n      }\n    }\n    if (name === 'bold') {\n      chars[0x3DC] = this.smpChar(0x1D7CA);\n      chars[0x3DD] = this.smpChar(0x1D7CB);\n    }\n  }\n\n  /**\n   * @param {number} n      Math Alphanumerics position for this remapping\n   * @return {CharData<C>}  The character data for the remapping\n   */\n  protected smpChar(n: number): CharData<C> {\n    return [ , , , {smp: n} as C];\n  }\n\n  /**\n   * Create a collection of variants\n   *\n   * @param {string[][]} variants  Array of [name, inherit?, link?] values for\n   *                              the variants to define\n   */\n  public createVariants(variants: string[][]) {\n    for (const variant of variants) {\n      this.createVariant(variant[0], variant[1], variant[2]);\n    }\n  }\n\n  /**\n   * Defines new character data in a given variant\n   *  (We use Object.assign() here rather than the spread operator since\n   *  the character maps are objeccts with prototypes, and we don't\n   *  want to loose those by doing {...chars} or something similar.)\n   *\n   * @param {string} name    The variant for these characters\n   * @param {CharMap} chars  The characters to define\n   */\n  public defineChars(name: string, chars: CharMap<C>) {\n    let variant = this.variant[name];\n    Object.assign(variant.chars, chars);\n    for (const link of variant.linked) {\n      Object.assign(link, chars);\n    }\n  }\n\n  /**\n   * Defines stretchy delimiters\n   *\n   * @param {DelimiterMap} delims  The delimiters to define\n   */\n  public defineDelimiters(delims: DelimiterMap<D>) {\n    Object.assign(this.delimiters, delims);\n  }\n\n  /**\n   * Defines a character remapping map\n   *\n   * @param {string} name     The name of the map to define or augment\n   * @param {RemapMap} remap  The characters to remap\n   */\n  public defineRemap(name: string, remap: RemapMap) {\n    if (!this.remapChars.hasOwnProperty(name)) {\n      this.remapChars[name] = {};\n    }\n    Object.assign(this.remapChars[name], remap);\n  }\n\n  /**\n   * @param {number} n  The delimiter character number whose data is desired\n   * @return {DelimiterData}  The data for that delimiter (or undefined)\n   */\n  public getDelimiter(n: number): DelimiterData {\n    return this.delimiters[n];\n  }\n\n  /**\n   * @param {number} n  The delimiter character number whose variant is needed\n   * @param {number} i  The index in the size array of the size whose variant is needed\n   * @return {string}   The variant of the i-th size for delimiter n\n   */\n  public getSizeVariant(n: number, i: number): string {\n    if (this.delimiters[n].variants) {\n      i = this.delimiters[n].variants[i];\n    }\n    return this.sizeVariants[i];\n  }\n\n  /**\n   * @param {number} n  The delimiter character number whose variant is needed\n   * @param {number} i  The index in the stretch array of the part whose variant is needed\n   * @return {string}   The variant of the i-th part for delimiter n\n   */\n  public getStretchVariant(n: number, i: number): string {\n    return this.stretchVariants[this.delimiters[n].stretchv ? this.delimiters[n].stretchv[i] : 0];\n  }\n\n  /**\n   * @param {string} name  The variant whose character data is being querried\n   * @param {number} n     The unicode number for the character to be found\n   * @return {CharData}    The data for the given character (or undefined)\n   */\n  public getChar(name: string, n: number): CharData<C> {\n    return this.variant[name].chars[n];\n  }\n\n  /**\n   * @param {string} name   The name of the variant whose data is to be obtained\n   * @return {V}            The data for the requested variant (or undefined)\n   */\n  public getVariant(name: string): V {\n    return this.variant[name];\n  }\n\n  /**\n   * @param {string} variant   The name of the variant whose data is to be obtained\n   * @return {CssFontData}     The CSS data for the requested variant\n   */\n  public getCssFont(variant: string): CssFontData {\n    return this.cssFontMap[variant] || ['serif', false, false];\n  }\n\n  /**\n   * @param {string} family   The font camily to use\n   * @return {string}         The family with the css prefix\n   */\n  public getFamily(family: string): string {\n    return (this.cssFamilyPrefix ? this.cssFamilyPrefix + ', ' + family : family);\n  }\n\n  /**\n   * @param {string} name   The name of the map to query\n   * @param {number} c      The character to remap\n   * @return {string}       The remapped character (or the original)\n   */\n  public getRemappedChar(name: string, c: number): string {\n    const map = this.remapChars[name] || {} as RemapMap;\n    return map[c];\n  }\n\n}\n\n/**\n * The class interface for the FontData class\n *\n * @template C  The CharOptions type\n * @template V  The VariantData type\n * @template D  The DelimiterData type\n */\nexport interface FontDataClass<C extends CharOptions, V extends VariantData<C>, D extends DelimiterData> {\n  OPTIONS: OptionList;\n  defaultCssFonts: CssFontMap;\n  defaultVariants: string[][];\n  defaultParams: FontParameters;\n  /* tslint:disable-next-line:jsdoc-require */\n  charOptions(font: CharMap<C>, n: number): C;\n  new(...args: any[]): FontData<C, V, D>;\n}\n"]},"metadata":{},"sourceType":"script"}