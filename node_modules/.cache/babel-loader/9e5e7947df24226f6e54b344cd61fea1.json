{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiteComment = exports.LiteText = void 0;\n\nvar LiteText = function () {\n  function LiteText(text) {\n    if (text === void 0) {\n      text = '';\n    }\n\n    this.value = text;\n  }\n\n  Object.defineProperty(LiteText.prototype, \"kind\", {\n    get: function () {\n      return '#text';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return LiteText;\n}();\n\nexports.LiteText = LiteText;\n\nvar LiteComment = function (_super) {\n  __extends(LiteComment, _super);\n\n  function LiteComment() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(LiteComment.prototype, \"kind\", {\n    get: function () {\n      return '#comment';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return LiteComment;\n}(LiteText);\n\nexports.LiteComment = LiteComment;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/adaptors/lite/Text.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAA,QAAA,GAAA,YAAA;AAsBE,WAAA,QAAA,CAAY,IAAZ,EAA6B;AAAjB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,EAAA;AAAiB;;AAC3B,SAAK,KAAL,GAAa,IAAb;AACD;;AAVD,EAAA,MAAA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,YAAA;AACE,aAAO,OAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAWF,SAAA,QAAA;AAAC,CAzBD,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA;;AA+Bb,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAAjC,WAAA,WAAA,GAAA;;AAIC;;AAHC,EAAA,MAAA,CAAA,cAAA,CAAW,WAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,YAAA;AACE,aAAO,UAAP;AACD,KAFc;qBAAA;;AAAA,GAAf;AAGF,SAAA,WAAA;AAAC,CAJD,CAAiC,QAAjC,CAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a lightweight Text element replacement\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {LiteElement} from './Element.js';\n\n/************************************************************/\n/**\n * Implements a lightweight Text node replacement\n */\nexport class LiteText {\n  /**\n   * The text stored in the node\n   */\n  public value: string;\n\n  /**\n   * The parent holding this text\n   */\n  public parent: LiteElement;\n\n  /**\n   * The kind of node is #text\n   */\n  public get kind() {\n    return '#text';\n  }\n\n  /**\n   * @param {string} text  The text for the node\n   * @constructor\n   */\n  constructor(text: string = '') {\n    this.value = text;\n  }\n}\n\n/************************************************************/\n/**\n * Implements a lightweight Comment node replacement\n */\nexport class LiteComment extends LiteText {\n  public get kind() {\n    return '#comment';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}