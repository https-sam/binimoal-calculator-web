{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindTeX = void 0;\n\nvar FindMath_js_1 = require(\"../../core/FindMath.js\");\n\nvar string_js_1 = require(\"../../util/string.js\");\n\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\n\nvar FindTeX = function (_super) {\n  __extends(FindTeX, _super);\n\n  function FindTeX(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.getPatterns();\n\n    return _this;\n  }\n\n  FindTeX.prototype.getPatterns = function () {\n    var _this = this;\n\n    var options = this.options;\n    var starts = [],\n        parts = [],\n        subparts = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    var i = 1;\n    options['inlineMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, false);\n    });\n    options['displayMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, true);\n    });\n\n    if (starts.length) {\n      parts.push(starts.sort(string_js_1.sortLength).join('|'));\n    }\n\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = parts.length > 0;\n  };\n\n  FindTeX.prototype.addPattern = function (starts, delims, display) {\n    var _a = __read(delims, 2),\n        open = _a[0],\n        close = _a[1];\n\n    starts.push(string_js_1.quotePattern(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  };\n\n  FindTeX.prototype.endPattern = function (end, endp) {\n    return new RegExp((endp || string_js_1.quotePattern(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  };\n\n  FindTeX.prototype.findEnd = function (text, n, start, end) {\n    var _a = __read(end, 3),\n        close = _a[0],\n        display = _a[1],\n        pattern = _a[2];\n\n    var i = pattern.lastIndex = start.index + start[0].length;\n    var match,\n        braces = 0;\n\n    while (match = pattern.exec(text)) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return MathItem_js_1.protoItem(start[0], text.substr(i, match.index - i), match[0], n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n\n    return null;\n  };\n\n  FindTeX.prototype.findMathInString = function (math, n, text) {\n    var start, match;\n    this.start.lastIndex = 0;\n\n    while (start = this.start.exec(text)) {\n      if (start[this.env] !== undefined && this.env) {\n        var end = '\\\\\\\\end\\\\s*(\\\\{' + string_js_1.quotePattern(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        var math_1 = start[this.sub];\n        var end = start.index + start[this.sub].length;\n\n        if (math_1.length === 2) {\n          match = MathItem_js_1.protoItem('', math_1.substr(1), '', n, start.index, end);\n        } else {\n          match = MathItem_js_1.protoItem('', math_1, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  };\n\n  FindTeX.prototype.findMath = function (strings) {\n    var math = [];\n\n    if (this.hasPatterns) {\n      for (var i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n\n    return math;\n  };\n\n  FindTeX.OPTIONS = {\n    inlineMath: [['\\\\(', '\\\\)']],\n    displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n    processEscapes: true,\n    processEnvironments: true,\n    processRefs: true\n  };\n  return FindTeX;\n}(FindMath_js_1.AbstractFindMath);\n\nexports.FindTeX = FindTeX;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/input/tex/FindTeX.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the TeX version of the FindMath object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractFindMath} from '../../core/FindMath.js';\nimport {OptionList} from '../../util/Options.js';\nimport {sortLength, quotePattern} from '../../util/string.js';\nimport {ProtoItem, protoItem} from '../../core/MathItem.js';\n\n/**\n * Shorthand types for data about end delimiters and delimiter pairs\n */\nexport type EndItem = [string, boolean, RegExp];\nexport type Delims = [string, string];\n\n/*****************************************************************/\n/*\n *  Implements the FindTeX class (extends AbstractFindMath)\n *\n *  Locates TeX expressions within strings\n */\n\n/*\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class FindTeX<N, T, D> extends AbstractFindMath<N, T, D> {\n\n  /**\n   * @type {OptionList}\n   */\n  public static OPTIONS: OptionList = {\n    inlineMath: [              // The start/end delimiter pairs for in-line math\n      //  ['$', '$'],              //  (comment out any you don't want, or add your own, but\n      ['\\\\(', '\\\\)']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    displayMath: [             // The start/end delimiter pairs for display math\n      ['$$', '$$'],            //  (comment out any you don't want, or add your own, but\n      ['\\\\[', '\\\\]']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    processEscapes: true,      // set to true to allow \\$ to produce a dollar without\n    //   starting in-line math mode\n    processEnvironments: true, // set to true to process \\begin{xxx}...\\end{xxx} outside\n    //   of math mode, false to prevent that\n    processRefs: true,         // set to true to process \\ref{...} outside of math mode\n  };\n\n  /**\n   * The regular expression for any starting delimiter\n   */\n  protected start: RegExp;\n\n  /**\n   * The end-delimiter data keyed to the opening delimiter string\n   */\n  protected end: {[name: string]: EndItem};\n\n  /**\n   * False if the configuration has no delimiters (so search can be skipped), true otherwise\n   */\n  protected hasPatterns: boolean;\n\n  /**\n   * The index of the \\begin...\\end pattern in the regex match array\n   */\n  protected env: number;\n\n  /**\n   * The index of the \\ref and escaped character patters in the regex match array\n   */\n  protected sub: number;\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList) {\n    super(options);\n    this.getPatterns();\n  }\n\n  /**\n   * Create the patterns needed for searching the strings for TeX\n   *   based on the configuration options\n   */\n  protected getPatterns() {\n    let options = this.options;\n    let starts: string[] = [], parts: string[] = [], subparts: string[] = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    let i = 1;\n    options['inlineMath'].forEach((delims: Delims) => this.addPattern(starts, delims, false));\n    options['displayMath'].forEach((delims: Delims) => this.addPattern(starts, delims, true));\n    if (starts.length) {\n      parts.push(starts.sort(sortLength).join('|'));\n    }\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = (parts.length > 0);\n  }\n\n  /**\n   * Add the needed patterns for a pair of delimiters\n   *\n   * @param {string[]} starts  Array of starting delimiter strings\n   * @param {Delims} delims    Array of delimiter strings, as [start, end]\n   * @param {boolean} display  True if the delimiters are for display mode\n   */\n  protected addPattern(starts: string[], delims: Delims, display: boolean) {\n    let [open, close] = delims;\n    starts.push(quotePattern(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  }\n\n  /**\n   * Create the pattern for a close delimiter\n   *\n   * @param {string} end   The end delimiter text\n   * @param {string} endp  The end delimiter pattern (overrides the literal end pattern)\n   * @return {RegExp}      The regular expression for the end delimiter\n   */\n  protected endPattern(end: string, endp?: string): RegExp {\n    return new RegExp((endp || quotePattern(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  }\n\n  /**\n   * Search for the end delimiter given the start delimiter,\n   *   skipping braced groups, and control sequences that aren't\n   *   the close delimiter.\n   *\n   * @param {string} text            The string being searched for the end delimiter\n   * @param {number} n               The index of the string being searched\n   * @param {RegExpExecArray} start  The result array from the start-delimiter search\n   * @param {EndItem} end            The end-delimiter data corresponding to the start delimiter\n   * @return {ProtoItem<N,T>}        The proto math item for the math, if found\n   */\n  protected findEnd(text: string, n: number, start: RegExpExecArray, end: EndItem): ProtoItem<N, T> {\n    let [close, display, pattern] = end;\n    let i = pattern.lastIndex = start.index + start[0].length;\n    let match: RegExpExecArray, braces: number = 0;\n    while ((match = pattern.exec(text))) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return protoItem<N, T>(start[0], text.substr(i, match.index - i), match[0],\n                               n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Search a string for math delimited by one of the delimiter pairs,\n   *   or by \\begin{env}...\\end{env}, or \\eqref{...}, \\ref{...}, \\\\, or \\$.\n   *\n   * @param {ProtoItem[]} math  The array of proto math items located so far\n   * @param {number} n          The index of the string being searched\n   * @param {string} text       The string being searched\n   */\n  protected findMathInString(math: ProtoItem<N, T>[], n: number, text: string) {\n    let start, match;\n    this.start.lastIndex = 0;\n    while ((start = this.start.exec(text))) {\n      if (start[this.env] !== undefined && this.env) {\n        let end = '\\\\\\\\end\\\\s*(\\\\{' + quotePattern(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        let math = start[this.sub];\n        let end = start.index + start[this.sub].length;\n        if (math.length === 2) {\n          match = protoItem<N, T>('', math.substr(1), '', n, start.index, end);\n        } else {\n          match = protoItem<N, T>('', math, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  }\n\n  /**\n   * Search for math in an array of strings and return an array of matches.\n   *\n   * @override\n   */\n  public findMath(strings: string[]) {\n    let math: ProtoItem<N, T>[] = [];\n    if (this.hasPatterns) {\n      for (let i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n    return math;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}