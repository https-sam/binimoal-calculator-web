{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVG = exports.XLINKNS = exports.SVGNS = void 0;\n\nvar OutputJax_js_1 = require(\"./common/OutputJax.js\");\n\nvar WrapperFactory_js_1 = require(\"./svg/WrapperFactory.js\");\n\nvar tex_js_1 = require(\"./svg/fonts/tex.js\");\n\nvar FontCache_js_1 = require(\"./svg/FontCache.js\");\n\nvar string_js_1 = require(\"../util/string.js\");\n\nvar lengths_js_1 = require(\"../util/lengths.js\");\n\nexports.SVGNS = 'http://www.w3.org/2000/svg';\nexports.XLINKNS = 'http://www.w3.org/1999/xlink';\n\nvar SVG = function (_super) {\n  __extends(SVG, _super);\n\n  function SVG(options) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    var _this = _super.call(this, options, WrapperFactory_js_1.SVGWrapperFactory, tex_js_1.TeXFont) || this;\n\n    _this.minwidth = 0;\n    _this.shift = 0;\n    _this.container = null;\n    _this.svgStyles = null;\n    _this.fontCache = new FontCache_js_1.FontCache(_this);\n    return _this;\n  }\n\n  SVG.prototype.initialize = function () {\n    if (this.options.fontCache === 'global') {\n      this.fontCache.clearCache();\n    }\n  };\n\n  SVG.prototype.clearFontCache = function () {\n    this.fontCache.clearCache();\n  };\n\n  SVG.prototype.reset = function () {\n    this.clearFontCache();\n  };\n\n  SVG.prototype.setScale = function (node) {\n    if (this.options.scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', lengths_js_1.percent(this.options.scale));\n    }\n  };\n\n  SVG.prototype.escaped = function (math, html) {\n    this.setDocument(html);\n    return this.html('span', {}, [this.text(math.math)]);\n  };\n\n  SVG.prototype.styleSheet = function (html) {\n    if (this.svgStyles) {\n      return this.svgStyles;\n    }\n\n    var sheet = this.svgStyles = _super.prototype.styleSheet.call(this, html);\n\n    this.adaptor.setAttribute(sheet, 'id', SVG.STYLESHEETID);\n    return sheet;\n  };\n\n  SVG.prototype.pageElements = function (html) {\n    if (this.options.fontCache === 'global' && !this.findCache(html)) {\n      return this.svg('svg', {\n        id: SVG.FONTCACHEID,\n        style: {\n          display: 'none'\n        }\n      }, [this.fontCache.getCache()]);\n    }\n\n    return null;\n  };\n\n  SVG.prototype.findCache = function (html) {\n    var adaptor = this.adaptor;\n    var svgs = adaptor.tags(adaptor.body(html.document), 'svg');\n\n    for (var i = svgs.length - 1; i >= 0; i--) {\n      if (this.adaptor.getAttribute(svgs[i], 'id') === SVG.FONTCACHEID) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SVG.prototype.processMath = function (math, parent) {\n    var container = this.container;\n    this.container = parent;\n    var wrapper = this.factory.wrap(math);\n\n    var _a = __read(this.createRoot(wrapper), 2),\n        svg = _a[0],\n        g = _a[1];\n\n    this.typesetSVG(wrapper, svg, g);\n    this.container = container;\n  };\n\n  SVG.prototype.createRoot = function (wrapper) {\n    var _a = wrapper.getBBox(),\n        w = _a.w,\n        h = _a.h,\n        d = _a.d,\n        pwidth = _a.pwidth;\n\n    var px = wrapper.metrics.em / 1000;\n    var W = Math.max(w, px);\n    var H = Math.max(h + d, px);\n    var g = this.svg('g', {\n      stroke: 'currentColor',\n      fill: 'currentColor',\n      'stroke-width': 0,\n      transform: 'scale(1,-1)'\n    });\n    var adaptor = this.adaptor;\n    var svg = adaptor.append(this.container, this.svg('svg', {\n      xmlns: exports.SVGNS,\n      width: this.ex(W),\n      height: this.ex(H),\n      role: 'img',\n      focusable: false,\n      style: {\n        'vertical-align': this.ex(-d)\n      },\n      viewBox: [0, this.fixed(-h * 1000, 1), this.fixed(W * 1000, 1), this.fixed(H * 1000, 1)].join(' ')\n    }, [g]));\n\n    if (W === .001) {\n      adaptor.setAttribute(svg, 'preserveAspectRatio', 'xMidYMid slice');\n\n      if (w < 0) {\n        adaptor.setStyle(this.container, 'margin-right', this.ex(w));\n      }\n    }\n\n    if (pwidth) {\n      adaptor.setStyle(svg, 'min-width', this.ex(W));\n      adaptor.setAttribute(svg, 'width', pwidth);\n      adaptor.removeAttribute(svg, 'viewBox');\n      var scale = this.fixed(wrapper.metrics.ex / (this.font.params.x_height * 1000), 6);\n      adaptor.setAttribute(g, 'transform', \"scale(\" + scale + \",-\" + scale + \") translate(0, \" + this.fixed(-h * 1000, 1) + \")\");\n    }\n\n    if (this.options.fontCache !== 'none') {\n      adaptor.setAttribute(svg, 'xmlns:xlink', exports.XLINKNS);\n    }\n\n    return [svg, g];\n  };\n\n  SVG.prototype.typesetSVG = function (wrapper, svg, g) {\n    var adaptor = this.adaptor;\n    this.minwidth = this.shift = 0;\n\n    if (this.options.fontCache === 'local') {\n      this.fontCache.clearCache();\n      this.fontCache.useLocalID(this.options.localID);\n      adaptor.insert(this.fontCache.getCache(), g);\n    }\n\n    wrapper.toSVG(g);\n    this.fontCache.clearLocalID();\n\n    if (this.minwidth) {\n      adaptor.setStyle(svg, 'minWidth', this.ex(this.minwidth));\n      adaptor.setStyle(this.container, 'minWidth', this.ex(this.minwidth));\n    } else if (this.shift) {\n      var align = adaptor.getAttribute(this.container, 'justify') || 'center';\n      this.setIndent(svg, align, this.shift);\n    }\n  };\n\n  SVG.prototype.setIndent = function (svg, align, shift) {\n    if (align === 'center' || align === 'left') {\n      this.adaptor.setStyle(svg, 'margin-left', this.ex(shift));\n    }\n\n    if (align === 'center' || align === 'right') {\n      this.adaptor.setStyle(svg, 'margin-right', this.ex(-shift));\n    }\n  };\n\n  SVG.prototype.ex = function (m) {\n    m /= this.font.params.x_height;\n    return Math.abs(m) < .001 ? '0' : m.toFixed(3).replace(/\\.?0+$/, '') + 'ex';\n  };\n\n  SVG.prototype.svg = function (kind, properties, children) {\n    if (properties === void 0) {\n      properties = {};\n    }\n\n    if (children === void 0) {\n      children = [];\n    }\n\n    return this.html(kind, properties, children, exports.SVGNS);\n  };\n\n  SVG.prototype.unknownText = function (text, variant) {\n    var metrics = this.math.metrics;\n    var scale = this.font.params.x_height / metrics.ex * metrics.em * 1000;\n    var svg = this.svg('text', {\n      'data-variant': variant,\n      transform: 'scale(1,-1)',\n      'font-size': this.fixed(scale, 1) + 'px'\n    }, [this.text(text)]);\n    var adaptor = this.adaptor;\n\n    if (variant !== '-explicitFont') {\n      var c = string_js_1.unicodeChars(text);\n\n      if (c.length !== 1 || c[0] < 0x1D400 || c[0] > 0x1D7FF) {\n        var _a = __read(this.font.getCssFont(variant), 3),\n            family = _a[0],\n            italic = _a[1],\n            bold = _a[2];\n\n        adaptor.setAttribute(svg, 'font-family', family);\n\n        if (italic) {\n          adaptor.setAttribute(svg, 'font-style', 'italic');\n        }\n\n        if (bold) {\n          adaptor.setAttribute(svg, 'font-weight', 'bold');\n        }\n      }\n    }\n\n    return svg;\n  };\n\n  SVG.prototype.measureTextNode = function (text) {\n    var adaptor = this.adaptor;\n    text = adaptor.clone(text);\n    adaptor.removeAttribute(text, 'transform');\n    var ex = this.fixed(this.font.params.x_height * 1000, 1);\n    var svg = this.svg('svg', {\n      position: 'absolute',\n      visibility: 'hidden',\n      width: '1ex',\n      height: '1ex',\n      viewBox: [0, 0, ex, ex].join(' ')\n    }, [text]);\n    adaptor.append(adaptor.body(adaptor.document), svg);\n    var w = adaptor.nodeSize(text, 1000, true)[0];\n    adaptor.remove(svg);\n    return {\n      w: w,\n      h: .75,\n      d: .2\n    };\n  };\n\n  SVG.NAME = 'SVG';\n  SVG.OPTIONS = __assign(__assign({}, OutputJax_js_1.CommonOutputJax.OPTIONS), {\n    internalSpeechTitles: true,\n    titleID: 0,\n    fontCache: 'local',\n    localID: null\n  });\n  SVG.commonStyles = {\n    'mjx-container[jax=\"SVG\"]': {\n      direction: 'ltr'\n    },\n    'mjx-container[jax=\"SVG\"] > svg': {\n      overflow: 'visible',\n      'min-height': '1px',\n      'min-width': '1px'\n    },\n    'mjx-container[jax=\"SVG\"] > svg a': {\n      fill: 'blue',\n      stroke: 'blue'\n    }\n  };\n  SVG.FONTCACHEID = 'MJX-SVG-global-cache';\n  SVG.STYLESHEETID = 'MJX-SVG-styles';\n  return SVG;\n}(OutputJax_js_1.CommonOutputJax);\n\nexports.SVG = SVG;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/svg.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVG OutputJax object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {CommonOutputJax, UnknownBBox} from './common/OutputJax.js';\nimport {OptionList} from '../util/Options.js';\nimport {MathDocument} from '../core/MathDocument.js';\nimport {MathItem} from '../core/MathItem.js';\nimport {MmlNode} from '../core/MmlTree/MmlNode.js';\nimport {SVGWrapper} from './svg/Wrapper.js';\nimport {SVGWrapperFactory} from './svg/WrapperFactory.js';\nimport {SVGFontData} from './svg/FontData.js';\nimport {TeXFont} from './svg/fonts/tex.js';\nimport {StyleList as CssStyleList} from '../util/StyleList.js';\nimport {FontCache} from './svg/FontCache.js';\nimport {unicodeChars} from '../util/string.js';\nimport {percent} from '../util/lengths.js';\n\nexport const SVGNS = 'http://www.w3.org/2000/svg';\nexport const XLINKNS = 'http://www.w3.org/1999/xlink';\n\n/*****************************************************************/\n/**\n *  Implements the CHTML class (extends AbstractOutputJax)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class SVG<N, T, D> extends\nCommonOutputJax<N, T, D, SVGWrapper<N, T, D>, SVGWrapperFactory<N, T, D>, SVGFontData, typeof SVGFontData> {\n\n  /**\n   * The name of the output jax\n   */\n  public static NAME: string = 'SVG';\n\n  /**\n   * @override\n   */\n  public static OPTIONS: OptionList = {\n    ...CommonOutputJax.OPTIONS,\n    internalSpeechTitles: true,     // insert <title> tags with speech content\n    titleID: 0,                     // initial id number to use for aria-labeledby titles\n    fontCache: 'local',             // or 'global' or 'none'\n    localID: null,                  // ID to use for local font cache (for single equation processing)\n  };\n\n  /**\n   *  The default styles for SVG\n   */\n  public static commonStyles: CssStyleList = {\n    'mjx-container[jax=\"SVG\"]': {\n      direction: 'ltr'\n    },\n    'mjx-container[jax=\"SVG\"] > svg': {\n      overflow: 'visible',\n      'min-height': '1px',\n      'min-width': '1px'\n    },\n    'mjx-container[jax=\"SVG\"] > svg a': {\n      fill: 'blue', stroke: 'blue'\n    }\n  };\n\n  /**\n   * The ID for the SVG element that stores the cached font paths\n   */\n  public static FONTCACHEID = 'MJX-SVG-global-cache';\n\n  /**\n   * The ID for the stylesheet element for the styles for the SVG output\n   */\n  public static STYLESHEETID = 'MJX-SVG-styles';\n\n  /**\n   * Stores the CHTMLWrapper factory\n   */\n  public factory: SVGWrapperFactory<N, T, D>;\n\n  /**\n   * Stores the information about the cached character glyphs\n   */\n  public fontCache: FontCache<N, T, D>;\n\n  /**\n   * Minimum width for tables with labels,\n   */\n  public minwidth: number = 0;\n  /**\n   * The shift for the main equation\n   */\n  public shift: number = 0;\n\n  /**\n   * The container element for the math\n   */\n  public container: N = null;\n\n  /**\n   * The SVG stylesheet, once it is constructed\n   */\n  public svgStyles: N = null;\n\n  /**\n   * @override\n   * @constructor\n   */\n  constructor(options: OptionList = null) {\n    super(options, SVGWrapperFactory as any, TeXFont);\n    this.fontCache = new FontCache(this);\n  }\n\n  /**\n   * @override\n   */\n  public initialize() {\n    if (this.options.fontCache === 'global') {\n      this.fontCache.clearCache();\n    }\n  }\n\n  /**\n   * Clear the font cache (use for resetting the global font cache)\n   */\n  public clearFontCache() {\n    this.fontCache.clearCache();\n  }\n\n  /**\n   * @override\n   */\n  public reset() {\n    this.clearFontCache();\n  }\n\n  /**\n   * @override\n   */\n  protected setScale(node: N) {\n    if (this.options.scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', percent(this.options.scale));\n    }\n  }\n\n  /**\n   * @override\n   */\n  public escaped(math: MathItem<N, T, D>, html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    return this.html('span', {}, [this.text(math.math)]);\n  }\n\n  /**\n   * @override\n   */\n  public styleSheet(html: MathDocument<N, T, D>) {\n    if (this.svgStyles) {\n      return this.svgStyles;  // stylesheet is already added to the document\n    }\n    const sheet = this.svgStyles = super.styleSheet(html);\n    this.adaptor.setAttribute(sheet, 'id', SVG.STYLESHEETID);\n    return sheet;\n  }\n\n  /**\n   * @override\n   */\n  public pageElements(html: MathDocument<N, T, D>) {\n    if (this.options.fontCache === 'global' && !this.findCache(html)) {\n      return this.svg('svg', {id: SVG.FONTCACHEID, style: {display: 'none'}}, [this.fontCache.getCache()]);\n    }\n    return null as N;\n  }\n\n  /**\n   * Checks if there is already a font-cache element in the page\n   *\n   * @param {MathDocument} html   The document to search\n   * @return {boolean}            True if a font cache already exists in the page\n   */\n  protected findCache(html: MathDocument<N, T, D>): boolean {\n    const adaptor = this.adaptor;\n    const svgs = adaptor.tags(adaptor.body(html.document), 'svg');\n    for (let i = svgs.length - 1; i >= 0; i--) {\n      if (this.adaptor.getAttribute(svgs[i], 'id') === SVG.FONTCACHEID) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {MmlNode} math  The MML node whose SVG is to be produced\n   * @param {N} parent      The HTML node to contain the SVG\n   */\n  protected processMath(math: MmlNode, parent: N) {\n    //\n    // Cache the container (tooltips process into separate containers)\n    //\n    const container = this.container;\n    this.container = parent;\n    //\n    //  Get the wrapped math element and the SVG container\n    //  Then typeset the math into the SVG\n    //\n    const wrapper = this.factory.wrap(math);\n    const [svg, g] = this.createRoot(wrapper);\n    this.typesetSVG(wrapper, svg, g);\n    //\n    //  Put back the original container\n    //\n    this.container = container;\n  }\n\n  /**\n   * @param {SVGWrapper} wrapper   The wrapped math to process\n   * @return {[N, N]}              The svg and g nodes for the math\n   */\n  protected createRoot(wrapper: SVGWrapper<N, T, D>): [N, N] {\n    const {w, h, d, pwidth} = wrapper.getBBox();\n    const px = wrapper.metrics.em / 1000;\n    const W = Math.max(w, px); // make sure we are at least one unitpx wide (needed for e.g. \\llap)\n    const H = Math.max(h + d, px); // make sure we are at least one px tall (needed for e.g., \\smash)\n    //\n    //  The container that flips the y-axis and sets the colors to inherit from the surroundings\n    //\n    const g = this.svg('g', {\n      stroke: 'currentColor', fill: 'currentColor',\n      'stroke-width': 0, transform: 'scale(1,-1)'\n    }) as N;\n    //\n    //  The svg element with its viewBox, size and alignment\n    //\n    const adaptor = this.adaptor;\n    const svg = adaptor.append(this.container, this.svg('svg', {\n      xmlns: SVGNS,\n      width: this.ex(W), height: this.ex(H),\n      role: 'img', focusable: false,\n      style: {'vertical-align': this.ex(-d)},\n      viewBox: [0, this.fixed(-h * 1000, 1), this.fixed(W * 1000, 1), this.fixed(H * 1000, 1)].join(' ')\n    }, [g])) as N;\n    if (W === .001) {\n      adaptor.setAttribute(svg, 'preserveAspectRatio', 'xMidYMid slice');\n      if (w < 0) {\n        adaptor.setStyle(this.container, 'margin-right', this.ex(w));\n      }\n    }\n    if (pwidth) {\n      //\n      // Use width 100% with no viewbox, and instead scale and translate to achieve the same result\n      //\n      adaptor.setStyle(svg, 'min-width', this.ex(W));\n      adaptor.setAttribute(svg, 'width', pwidth);\n      adaptor.removeAttribute(svg, 'viewBox');\n      const scale = this.fixed(wrapper.metrics.ex / (this.font.params.x_height * 1000), 6);\n      adaptor.setAttribute(g, 'transform', `scale(${scale},-${scale}) translate(0, ${this.fixed(-h * 1000, 1)})`);\n    }\n    if (this.options.fontCache !== 'none') {\n      adaptor.setAttribute(svg, 'xmlns:xlink', XLINKNS);\n    }\n    return [svg, g];\n  }\n\n  /**\n   * Typeset the math and add minwidth (from mtables), or set the alignment and indentation\n   * of the finalized expression.\n   *\n   * @param {SVGWrapper} wrapper   The wrapped math to typeset\n   * @param {N} svg                The main svg element for the typeet math\n   * @param {N} g                  The group in which the math is typeset\n   */\n  protected typesetSVG(wrapper: SVGWrapper<N, T, D>, svg: N, g: N) {\n    const adaptor = this.adaptor;\n    //\n    //  Typeset the math and add minWidth (from mtables), or set the alignment and indentation\n    //    of the finalized expression\n    //\n    this.minwidth = this.shift = 0;\n    if (this.options.fontCache === 'local') {\n      this.fontCache.clearCache();\n      this.fontCache.useLocalID(this.options.localID);\n      adaptor.insert(this.fontCache.getCache(), g);\n    }\n    wrapper.toSVG(g);\n    this.fontCache.clearLocalID();\n    if (this.minwidth) {\n      adaptor.setStyle(svg, 'minWidth', this.ex(this.minwidth));\n      adaptor.setStyle(this.container, 'minWidth', this.ex(this.minwidth));\n    } else if (this.shift) {\n      const align = adaptor.getAttribute(this.container, 'justify') || 'center';\n      this.setIndent(svg, align, this.shift);\n    }\n  }\n\n  /**\n   * @param {N} svg         The svg node whose indentation is to be adjusted\n   * @param {string} align  The alignment for the node\n   * @param {number} shift  The indent (positive or negative) for the node\n   */\n  protected setIndent(svg: N, align: string, shift: number) {\n    if (align === 'center' || align === 'left') {\n      this.adaptor.setStyle(svg, 'margin-left', this.ex(shift));\n    }\n    if (align === 'center' || align === 'right') {\n      this.adaptor.setStyle(svg, 'margin-right', this.ex(-shift));\n    }\n  }\n\n  /**\n   * @param {number} m  A number to be shown in ex\n   * @return {string}   The number with units of ex\n   */\n  public ex(m: number): string {\n    m /= this.font.params.x_height;\n    return (Math.abs(m) < .001 ? '0' : m.toFixed(3).replace(/\\.?0+$/, '') + 'ex');\n  }\n\n  /**\n   * @param {string} kind             The kind of node to create\n   * @param {OptionList} properties   The properties to set for the element\n   * @param {(N|T)[]} children            The child nodes for this node\n   * @return {N}                      The newly created node in the SVG namespace\n   */\n  public svg(kind: string, properties: OptionList = {}, children: (N | T)[] = []): N {\n    return this.html(kind, properties, children, SVGNS);\n  }\n\n  /**\n   * @param {string} text      The text to be displayed\n   * @param {string} variant   The name of the variant for the text\n   * @return {N}               The text element containing the text\n   */\n  public unknownText(text: string, variant: string): N {\n    const metrics = this.math.metrics;\n    const scale = this.font.params.x_height / metrics.ex * metrics.em * 1000;\n    const svg = this.svg('text', {\n      'data-variant': variant,\n      transform: 'scale(1,-1)', 'font-size': this.fixed(scale, 1) + 'px'\n    }, [this.text(text)]);\n    const adaptor = this.adaptor;\n    if (variant !== '-explicitFont') {\n      const c = unicodeChars(text);\n      if (c.length !== 1 || c[0] < 0x1D400 || c[0] > 0x1D7FF) {\n        const [family, italic, bold] = this.font.getCssFont(variant);\n        adaptor.setAttribute(svg, 'font-family', family);\n        if (italic) {\n          adaptor.setAttribute(svg, 'font-style', 'italic');\n        }\n        if (bold) {\n          adaptor.setAttribute(svg, 'font-weight', 'bold');\n        }\n      }\n    }\n    return svg;\n  }\n\n  /**\n   * Measure the width of a text element by placing it in the page\n   *  and looking up its size (fake the height and depth, since we can't measure that)\n   *\n   * @param {N} text         The text element to measure\n   * @return {Object}        The width, height and depth for the text\n   */\n  public measureTextNode(text: N): UnknownBBox {\n    const adaptor = this.adaptor;\n    text = adaptor.clone(text);\n    adaptor.removeAttribute(text, 'transform');\n    const ex = this.fixed(this.font.params.x_height * 1000, 1);\n    const svg = this.svg('svg', {\n      position: 'absolute', visibility: 'hidden',\n      width: '1ex', height: '1ex',\n      viewBox: [0, 0, ex, ex].join(' ')\n    }, [text]);\n    adaptor.append(adaptor.body(adaptor.document), svg);\n    let w = adaptor.nodeSize(text, 1000, true)[0];\n    adaptor.remove(svg);\n    return {w: w, h: .75, d: .2};\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}