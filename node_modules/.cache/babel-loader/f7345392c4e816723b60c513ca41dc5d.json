{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractFindMath = void 0;\n\nvar Options_js_1 = require(\"../util/Options.js\");\n\nvar AbstractFindMath = function () {\n  function AbstractFindMath(options) {\n    var CLASS = this.constructor;\n    this.options = Options_js_1.userOptions(Options_js_1.defaultOptions({}, CLASS.OPTIONS), options);\n  }\n\n  AbstractFindMath.OPTIONS = {};\n  return AbstractFindMath;\n}();\n\nexports.AbstractFindMath = AbstractFindMath;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/core/FindMath.ts"],"names":[],"mappings":";;;;;;;AAuBA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAsCA,IAAA,gBAAA,GAAA,YAAA;AAeE,WAAA,gBAAA,CAAY,OAAZ,EAA+B;AAC7B,QAAI,KAAK,GAAG,KAAK,WAAjB;AACA,SAAK,OAAL,GAAe,YAAA,CAAA,WAAA,CAAY,YAAA,CAAA,cAAA,CAAe,EAAf,EAAmB,KAAK,CAAC,OAAzB,CAAZ,EAA+C,OAA/C,CAAf;AACD;;AAba,EAAA,gBAAA,CAAA,OAAA,GAAsB,EAAtB;AAuBhB,SAAA,gBAAA;AAAC,CA5BD,EAAA;;AAAsB,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Interfaces and abstract classes for FindMath objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList} from '../util/Options.js';\nimport {ProtoItem} from './MathItem.js';\n\n/*****************************************************************/\n/**\n *  The FindMath interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template _D  The Document class\n */\nexport interface FindMath<N, T, _D> {\n  /**\n   * One of two possibilities:  Look through a DOM element,\n   *   or look through an array of strings for delimited math.\n   *\n   * @param {N} node   The node to search for math\n   * @return {ProtoItem<N, T>[]}\n   */\n  findMath(node: N): ProtoItem<N, T>[];\n  /**\n   *\n   * @param {string[]} strings    The strings to search for math\n   * @return {ProtoItem<N, T>[]}\n   */\n  findMath(strings: string[]): ProtoItem<N, T>[];\n}\n\n/*****************************************************************/\n/**\n *  The FindMath abstract class\n */\n\n/**\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractFindMath<N, T, D> implements FindMath<N, T, D> {\n\n  /**\n   * The default options for FindMath\n   */\n  public static OPTIONS: OptionList = {};\n\n  /**\n   * The actual options for this instance\n   */\n  protected options: OptionList;\n\n  /**\n   * @param {OptionList} options  The user options for this instance\n   */\n  constructor(options: OptionList) {\n    let CLASS = this.constructor as typeof AbstractFindMath;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n  }\n\n  /**\n   * Locate math in an Element or a string array;\n   *\n   * @param {Element | string[]} where  The node or string array to search for math\n   * @return {ProtoItem[]}              The array of proto math items found\n   */\n  public abstract findMath(where: N | string[]): ProtoItem<N, T>[];\n\n}\n"]},"metadata":{},"sourceType":"script"}