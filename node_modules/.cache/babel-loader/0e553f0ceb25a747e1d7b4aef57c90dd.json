{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLAdaptor = void 0;\n\nvar DOMAdaptor_js_1 = require(\"../core/DOMAdaptor.js\");\n\nvar HTMLAdaptor = function (_super) {\n  __extends(HTMLAdaptor, _super);\n\n  function HTMLAdaptor(window) {\n    var _this = _super.call(this, window.document) || this;\n\n    _this.window = window;\n    _this.parser = new window.DOMParser();\n    return _this;\n  }\n\n  HTMLAdaptor.prototype.parse = function (text, format) {\n    if (format === void 0) {\n      format = 'text/html';\n    }\n\n    return this.parser.parseFromString(text, format);\n  };\n\n  HTMLAdaptor.prototype.create = function (kind, ns) {\n    return ns ? this.document.createElementNS(ns, kind) : this.document.createElement(kind);\n  };\n\n  HTMLAdaptor.prototype.text = function (text) {\n    return this.document.createTextNode(text);\n  };\n\n  HTMLAdaptor.prototype.head = function (doc) {\n    return doc.head;\n  };\n\n  HTMLAdaptor.prototype.body = function (doc) {\n    return doc.body;\n  };\n\n  HTMLAdaptor.prototype.root = function (doc) {\n    return doc.documentElement;\n  };\n\n  HTMLAdaptor.prototype.doctype = function (doc) {\n    return doc.doctype ? \"<!DOCTYPE \" + doc.doctype.name + \">\" : '';\n  };\n\n  HTMLAdaptor.prototype.tags = function (node, name, ns) {\n    if (ns === void 0) {\n      ns = null;\n    }\n\n    var nodes = ns ? node.getElementsByTagNameNS(ns, name) : node.getElementsByTagName(name);\n    return Array.from(nodes);\n  };\n\n  HTMLAdaptor.prototype.getElements = function (nodes, _document) {\n    var e_1, _a;\n\n    var containers = [];\n\n    try {\n      for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {\n        var node = nodes_1_1.value;\n\n        if (typeof node === 'string') {\n          containers = containers.concat(Array.from(this.document.querySelectorAll(node)));\n        } else if (Array.isArray(node)) {\n          containers = containers.concat(Array.from(node));\n        } else if (node instanceof this.window.NodeList || node instanceof this.window.HTMLCollection) {\n          containers = containers.concat(Array.from(node));\n        } else {\n          containers.push(node);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return containers;\n  };\n\n  HTMLAdaptor.prototype.contains = function (container, node) {\n    return container.contains(node);\n  };\n\n  HTMLAdaptor.prototype.parent = function (node) {\n    return node.parentNode;\n  };\n\n  HTMLAdaptor.prototype.append = function (node, child) {\n    return node.appendChild(child);\n  };\n\n  HTMLAdaptor.prototype.insert = function (nchild, ochild) {\n    return this.parent(ochild).insertBefore(nchild, ochild);\n  };\n\n  HTMLAdaptor.prototype.remove = function (child) {\n    return this.parent(child).removeChild(child);\n  };\n\n  HTMLAdaptor.prototype.replace = function (nnode, onode) {\n    return this.parent(onode).replaceChild(nnode, onode);\n  };\n\n  HTMLAdaptor.prototype.clone = function (node) {\n    return node.cloneNode(true);\n  };\n\n  HTMLAdaptor.prototype.split = function (node, n) {\n    return node.splitText(n);\n  };\n\n  HTMLAdaptor.prototype.next = function (node) {\n    return node.nextSibling;\n  };\n\n  HTMLAdaptor.prototype.previous = function (node) {\n    return node.previousSibling;\n  };\n\n  HTMLAdaptor.prototype.firstChild = function (node) {\n    return node.firstChild;\n  };\n\n  HTMLAdaptor.prototype.lastChild = function (node) {\n    return node.lastChild;\n  };\n\n  HTMLAdaptor.prototype.childNodes = function (node) {\n    return Array.from(node.childNodes);\n  };\n\n  HTMLAdaptor.prototype.childNode = function (node, i) {\n    return node.childNodes[i];\n  };\n\n  HTMLAdaptor.prototype.kind = function (node) {\n    var n = node.nodeType;\n    return n === 1 || n === 3 || n === 8 ? node.nodeName.toLowerCase() : '';\n  };\n\n  HTMLAdaptor.prototype.value = function (node) {\n    return node.nodeValue || '';\n  };\n\n  HTMLAdaptor.prototype.textContent = function (node) {\n    return node.textContent;\n  };\n\n  HTMLAdaptor.prototype.innerHTML = function (node) {\n    return node.innerHTML;\n  };\n\n  HTMLAdaptor.prototype.outerHTML = function (node) {\n    return node.outerHTML;\n  };\n\n  HTMLAdaptor.prototype.serializeXML = function (node) {\n    var serializer = new this.window.XMLSerializer();\n    return serializer.serializeToString(node);\n  };\n\n  HTMLAdaptor.prototype.setAttribute = function (node, name, value, ns) {\n    if (ns === void 0) {\n      ns = null;\n    }\n\n    if (!ns) {\n      return node.setAttribute(name, value);\n    }\n\n    name = ns.replace(/.*\\//, '') + ':' + name.replace(/^.*:/, '');\n    return node.setAttributeNS(ns, name, value);\n  };\n\n  HTMLAdaptor.prototype.getAttribute = function (node, name) {\n    return node.getAttribute(name);\n  };\n\n  HTMLAdaptor.prototype.removeAttribute = function (node, name) {\n    return node.removeAttribute(name);\n  };\n\n  HTMLAdaptor.prototype.hasAttribute = function (node, name) {\n    return node.hasAttribute(name);\n  };\n\n  HTMLAdaptor.prototype.allAttributes = function (node) {\n    return Array.from(node.attributes).map(function (x) {\n      return {\n        name: x.name,\n        value: x.value\n      };\n    });\n  };\n\n  HTMLAdaptor.prototype.addClass = function (node, name) {\n    if (node.classList) {\n      node.classList.add(name);\n    } else {\n      node.className = (node.className + ' ' + name).trim();\n    }\n  };\n\n  HTMLAdaptor.prototype.removeClass = function (node, name) {\n    if (node.classList) {\n      node.classList.remove(name);\n    } else {\n      node.className = node.className.split(/ /).filter(function (c) {\n        return c !== name;\n      }).join(' ');\n    }\n  };\n\n  HTMLAdaptor.prototype.hasClass = function (node, name) {\n    if (node.classList) {\n      return node.classList.contains(name);\n    }\n\n    return node.className.split(/ /).indexOf(name) >= 0;\n  };\n\n  HTMLAdaptor.prototype.setStyle = function (node, name, value) {\n    node.style[name] = value;\n  };\n\n  HTMLAdaptor.prototype.getStyle = function (node, name) {\n    return node.style[name];\n  };\n\n  HTMLAdaptor.prototype.allStyles = function (node) {\n    return node.style.cssText;\n  };\n\n  HTMLAdaptor.prototype.insertRules = function (node, rules) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(rules.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var rule = _c.value;\n\n        try {\n          node.sheet.insertRule(rule, 0);\n        } catch (e) {\n          console.warn(\"MathJax: can't insert css rule '\" + rule + \"': \" + e.message);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  HTMLAdaptor.prototype.fontSize = function (node) {\n    var style = this.window.getComputedStyle(node);\n    return parseFloat(style.fontSize);\n  };\n\n  HTMLAdaptor.prototype.fontFamily = function (node) {\n    var style = this.window.getComputedStyle(node);\n    return style.fontFamily || '';\n  };\n\n  HTMLAdaptor.prototype.nodeSize = function (node, em, local) {\n    if (em === void 0) {\n      em = 1;\n    }\n\n    if (local === void 0) {\n      local = false;\n    }\n\n    if (local && node.getBBox) {\n      var _a = node.getBBox(),\n          width = _a.width,\n          height = _a.height;\n\n      return [width / em, height / em];\n    }\n\n    return [node.offsetWidth / em, node.offsetHeight / em];\n  };\n\n  HTMLAdaptor.prototype.nodeBBox = function (node) {\n    var _a = node.getBoundingClientRect(),\n        left = _a.left,\n        right = _a.right,\n        top = _a.top,\n        bottom = _a.bottom;\n\n    return {\n      left: left,\n      right: right,\n      top: top,\n      bottom: bottom\n    };\n  };\n\n  return HTMLAdaptor;\n}(DOMAdaptor_js_1.AbstractDOMAdaptor);\n\nexports.HTMLAdaptor = HTMLAdaptor;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/adaptors/HTMLAdaptor.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTML DOM adaptor\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList} from '../util/Options.js';\nimport {AttributeData, AbstractDOMAdaptor, DOMAdaptor, PageBBox} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Document\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinDocument<N, T> {\n  documentElement: N;\n  head: N;\n  body: N;\n  title: string;\n  doctype: {name: string};\n  /* tslint:disable:jsdoc-require */\n  createElement(kind: string): N;\n  createElementNS(ns: string, kind: string): N;\n  createTextNode(text: string): T;\n  querySelectorAll(selector: string): ArrayLike<N>;\n  /* tslint:enable */\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for an HTML Element\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinHTMLElement<N, T> {\n  nodeType: number;\n  nodeName: string;\n  nodeValue: string;\n  textContent: string;\n  innerHTML: string;\n  outerHTML: string;\n  parentNode: N | Node;\n  nextSibling: N | T | Node;\n  previousSibling: N | T | Node;\n  offsetWidth: number;\n  offsetHeight: number;\n\n  attributes: AttributeData[] | NamedNodeMap;\n  className: string;\n  classList: DOMTokenList;\n  style: OptionList;\n  sheet?: {insertRule: (rule: string, index?: number) => void};\n\n  childNodes: (N | T)[] | NodeList;\n  firstChild: N | T | Node;\n  lastChild: N | T | Node;\n  /* tslint:disable:jsdoc-require */\n  getElementsByTagName(name: string): N[] | HTMLCollectionOf<Element>;\n  getElementsByTagNameNS(ns: string, name: string): N[] | HTMLCollectionOf<Element>;\n  contains(child: N | T): boolean;\n  appendChild(child: N | T): N | T | Node;\n  removeChild(child: N | T): N | T  | Node;\n  replaceChild(nnode: N | T, onode: N | T): N | T  | Node;\n  insertBefore(nchild: N | T, ochild: N | T): void;\n  cloneNode(deep: boolean): N | Node;\n  setAttribute(name: string, value: string): void;\n  setAttributeNS(ns: string, name: string, value: string): void;\n  getAttribute(name: string): string;\n  removeAttribute(name: string): void;\n  hasAttribute(name: string): boolean;\n  getBoundingClientRect(): Object;\n  getBBox?(): {x: number, y: number, width: number, height: number};\n  /* tslint:endable */\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Text element\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinText<N, T> {\n  nodeType: number;\n  nodeName: string;\n  nodeValue: string;\n  parentNode: N | Node;\n  nextSibling: N | T | Node;\n  previousSibling: N | T | Node;\n  splitText(n: number): T;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a DOMParser\n *\n * @template D  The Document class\n */\nexport interface MinDOMParser<D> {\n  parseFromString(text: string, format?: string): D;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a DOMParser\n *\n * @template N  The HTMLElement node class\n */\nexport interface MinXMLSerializer<N> {\n  serializeToString(node: N): string;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Window\n *\n * @template N  The HTMLElement node class\n * @template D  The Document class\n */\nexport interface MinWindow<N, D> {\n  document: D;\n  DOMParser: {\n    new(): MinDOMParser<D>\n  };\n  XMLSerializer: {\n    new(): MinXMLSerializer<N>;\n  };\n  NodeList: any;\n  HTMLCollection: any;\n  HTMLElement: any;\n  DocumentFragment: any;\n  Document: any;\n  getComputedStyle(node: N): any;\n}\n\n/*****************************************************************/\n/**\n * The minimum needed for an HTML Adaptor\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MinHTMLAdaptor<N, T, D> extends DOMAdaptor<N, T, D> {\n  window: MinWindow<N, D>;\n}\n\n/*****************************************************************/\n/**\n *  Abstract HTMLAdaptor class for manipulating HTML elements\n *  (subclass of AbstractDOMAdaptor)\n *\n *  N = HTMLElement node class\n *  T = Text node class\n *  D = Document class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLAdaptor<N extends MinHTMLElement<N, T>, T extends MinText<N, T>, D extends MinDocument<N, T>> extends\nAbstractDOMAdaptor<N, T, D> implements MinHTMLAdaptor<N, T, D> {\n  /**\n   * The window object for this adaptor\n   */\n  public window: MinWindow<N, D>;\n\n  /**\n   * The DOMParser used to parse a string into a DOM tree\n   */\n  public parser: MinDOMParser<D>;\n\n  /**\n   * @override\n   * @constructor\n   */\n  constructor(window: MinWindow<N, D>) {\n    super(window.document);\n    this.window = window;\n    this.parser = new (window.DOMParser as any)();\n  }\n\n  /**\n   * @override\n   */\n  public parse(text: string, format: string = 'text/html') {\n    return this.parser.parseFromString(text, format);\n  }\n\n  /**\n   * @override\n   */\n  protected create(kind: string, ns?: string) {\n    return (ns ?\n            this.document.createElementNS(ns, kind) :\n            this.document.createElement(kind));\n  }\n\n  /**\n   * @override\n   */\n  public text(text: string) {\n    return this.document.createTextNode(text);\n  }\n\n  /**\n   * @override\n   */\n  public head(doc: D) {\n    return doc.head;\n  }\n\n  /**\n   * @override\n   */\n  public body(doc: D) {\n    return doc.body;\n  }\n\n  /**\n   * @override\n   */\n  public root(doc: D) {\n    return doc.documentElement;\n  }\n\n  /**\n   * @override\n   */\n  public doctype(doc: D) {\n    return (doc.doctype ? `<!DOCTYPE ${doc.doctype.name}>` : '');\n  }\n\n  /**\n   * @override\n   */\n  public tags(node: N, name: string, ns: string = null) {\n    let nodes = (ns ? node.getElementsByTagNameNS(ns, name) : node.getElementsByTagName(name));\n    return Array.from(nodes as N[]) as N[];\n  }\n\n  /**\n   * @override\n   */\n  public getElements(nodes: (string | N | N[])[], _document: D) {\n    let containers: N[] = [];\n    for (const node of nodes) {\n      if (typeof(node) === 'string') {\n        containers = containers.concat(Array.from(this.document.querySelectorAll(node)));\n      } else if (Array.isArray(node)) {\n        containers = containers.concat(Array.from(node) as N[]);\n      } else if (node instanceof this.window.NodeList || node instanceof this.window.HTMLCollection) {\n        containers = containers.concat(Array.from(node as any as N[]));\n      } else {\n        containers.push(node);\n      }\n    }\n    return containers;\n  }\n\n  /**\n   * @override\n   */\n  public contains(container: N, node: N | T) {\n    return container.contains(node);\n  }\n\n  /**\n   * @override\n   */\n  public parent(node: N | T) {\n    return node.parentNode as N;\n  }\n\n  /**\n   * @override\n   */\n  public append(node: N, child: N | T) {\n    return node.appendChild(child) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public insert(nchild: N | T, ochild: N | T) {\n    return this.parent(ochild).insertBefore(nchild, ochild);\n  }\n\n  /**\n   * @override\n   */\n  public remove(child: N | T) {\n    return this.parent(child).removeChild(child) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public replace(nnode: N | T, onode: N | T) {\n    return this.parent(onode).replaceChild(nnode, onode) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public clone(node: N) {\n    return node.cloneNode(true) as N;\n  }\n\n  /**\n   * @override\n   */\n  public split(node: T, n: number) {\n    return node.splitText(n);\n  }\n\n  /**\n   * @override\n   */\n  public next(node: N | T) {\n    return node.nextSibling as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public previous(node: N | T) {\n    return node.previousSibling as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public firstChild(node: N) {\n    return node.firstChild as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public lastChild(node: N) {\n    return node.lastChild as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public childNodes(node: N) {\n    return Array.from(node.childNodes as (N | T)[]);\n  }\n\n  /**\n   * @override\n   */\n  public childNode(node: N, i: number) {\n    return node.childNodes[i] as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public kind(node: N | T) {\n    const n = node.nodeType;\n    return (n === 1 || n === 3 || n === 8 ? node.nodeName.toLowerCase() : '');\n  }\n\n  /**\n   * @override\n   */\n  public value(node: N | T) {\n    return node.nodeValue || '';\n  }\n\n  /**\n   * @override\n   */\n  public textContent(node: N) {\n    return node.textContent;\n  }\n\n  /**\n   * @override\n   */\n  public innerHTML(node: N) {\n    return node.innerHTML;\n  }\n\n  /**\n   * @override\n   */\n  public outerHTML(node: N) {\n    return node.outerHTML;\n  }\n\n  public serializeXML(node: N) {\n    const serializer = new this.window.XMLSerializer();\n    return serializer.serializeToString(node) as string;\n  }\n\n  /**\n   * @override\n   */\n  public setAttribute(node: N, name: string, value: string, ns: string = null) {\n    if (!ns) {\n      return node.setAttribute(name, value);\n    }\n    name = ns.replace(/.*\\//, '') + ':' + name.replace(/^.*:/, '');\n    return node.setAttributeNS(ns, name, value);\n  }\n\n  /**\n   * @override\n   */\n  public getAttribute(node: N, name: string) {\n    return node.getAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public removeAttribute(node: N, name: string) {\n    return node.removeAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public hasAttribute(node: N, name: string) {\n    return node.hasAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public allAttributes(node: N) {\n    return Array.from(node.attributes).map(\n      (x: AttributeData) => {\n        return {name: x.name, value: x.value} as AttributeData;\n      }\n    );\n  }\n\n  /**\n   * @override\n   */\n  public addClass(node: N, name: string) {\n    if (node.classList) {\n      node.classList.add(name);\n    } else {\n      node.className = (node.className + ' ' + name).trim();\n    }\n  }\n\n  /**\n   * @override\n   */\n  public removeClass(node: N, name: string) {\n    if (node.classList) {\n      node.classList.remove(name);\n    } else {\n      node.className = node.className.split(/ /).filter((c) => c !== name).join(' ');\n    }\n  }\n\n  /**\n   * @override\n   */\n  public hasClass(node: N, name: string) {\n    if (node.classList) {\n      return node.classList.contains(name);\n    }\n    return node.className.split(/ /).indexOf(name) >= 0;\n  }\n\n  /**\n   * @override\n   */\n  public setStyle(node: N, name: string, value: string) {\n    (node.style as OptionList)[name] = value;\n  }\n\n  /**\n   * @override\n   */\n  public getStyle(node: N, name: string) {\n    return (node.style as OptionList)[name];\n  }\n\n  /**\n   * @override\n   */\n  public allStyles(node: N) {\n    return node.style.cssText;\n  }\n\n  /**\n   * @override\n   */\n  public insertRules(node: N, rules: string[]) {\n    for (const rule of rules.reverse()) {\n      try {\n        node.sheet.insertRule(rule, 0);\n      } catch (e) {\n        console.warn(`MathJax: can't insert css rule '${rule}': ${e.message}`);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  public fontSize(node: N) {\n    const style = this.window.getComputedStyle(node);\n    return parseFloat(style.fontSize);\n  }\n\n  /**\n   * @override\n   */\n  public fontFamily(node: N) {\n    const style = this.window.getComputedStyle(node);\n    return style.fontFamily || '';\n  }\n\n  /**\n   * @override\n   */\n  public nodeSize(node: N, em: number = 1, local: boolean = false) {\n    if (local && node.getBBox) {\n      let {width, height} = node.getBBox();\n      return [width / em , height / em] as [number, number];\n    }\n    return [node.offsetWidth / em, node.offsetHeight / em] as [number, number];\n  }\n\n  /**\n   * @override\n   */\n  public nodeBBox(node: N) {\n    const {left, right, top, bottom} = node.getBoundingClientRect() as PageBBox;\n    return {left, right, top, bottom};\n  }\n}\n"]},"metadata":{},"sourceType":"script"}