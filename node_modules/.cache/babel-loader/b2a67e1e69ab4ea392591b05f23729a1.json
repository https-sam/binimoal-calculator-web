{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtableMixin = void 0;\n\nvar BBox_js_1 = require(\"../../../util/BBox.js\");\n\nvar string_js_1 = require(\"../../../util/string.js\");\n\nvar numeric_js_1 = require(\"../../../util/numeric.js\");\n\nfunction CommonMtableMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spreadArray([], __read(args))) || this;\n\n      _this.numCols = 0;\n      _this.numRows = 0;\n      _this.data = null;\n      _this.pwidthCells = [];\n      _this.pWidth = 0;\n      _this.numCols = numeric_js_1.max(_this.tableRows.map(function (row) {\n        return row.numCells;\n      }));\n      _this.numRows = _this.childNodes.length;\n      _this.hasLabels = _this.childNodes.reduce(function (value, row) {\n        return value || row.node.isKind('mlabeledtr');\n      }, false);\n\n      _this.findContainer();\n\n      _this.isTop = !_this.container || _this.container.node.isKind('math') && !_this.container.parent;\n\n      if (_this.isTop) {\n        _this.jax.table = _this;\n      }\n\n      _this.getPercentageWidth();\n\n      var attributes = _this.node.attributes;\n      _this.frame = attributes.get('frame') !== 'none';\n      _this.fLine = _this.frame && attributes.get('frame') ? .07 : 0;\n      _this.fSpace = _this.frame ? _this.convertLengths(_this.getAttributeArray('framespacing')) : [0, 0];\n      _this.cSpace = _this.convertLengths(_this.getColumnAttributes('columnspacing'));\n      _this.rSpace = _this.convertLengths(_this.getRowAttributes('rowspacing'));\n      _this.cLines = _this.getColumnAttributes('columnlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.rLines = _this.getRowAttributes('rowlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.cWidths = _this.getColumnWidths();\n\n      _this.stretchRows();\n\n      _this.stretchColumns();\n\n      return _this;\n    }\n\n    Object.defineProperty(class_1.prototype, \"tableRows\", {\n      get: function () {\n        return this.childNodes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    class_1.prototype.findContainer = function () {\n      var node = this;\n      var parent = node.parent;\n\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    };\n\n    class_1.prototype.getPercentageWidth = function () {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox_js_1.BBox.fullWidth;\n      } else {\n        var width = this.node.attributes.get('width');\n\n        if (string_js_1.isPercent(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    };\n\n    class_1.prototype.stretchRows = function () {\n      var equal = this.node.attributes.get('equalrows');\n      var HD = equal ? this.getEqualRowHeight() : 0;\n\n      var _a = equal ? this.getTableData() : {\n        H: [0],\n        D: [0]\n      },\n          H = _a.H,\n          D = _a.D;\n\n      var rows = this.tableRows;\n\n      for (var i = 0; i < this.numRows; i++) {\n        var hd = equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null;\n        rows[i].stretchChildren(hd);\n      }\n    };\n\n    class_1.prototype.stretchColumns = function () {\n      for (var i = 0; i < this.numCols; i++) {\n        var width = typeof this.cWidths[i] === 'number' ? this.cWidths[i] : null;\n        this.stretchColumn(i, width);\n      }\n    };\n\n    class_1.prototype.stretchColumn = function (i, W) {\n      var e_1, _a, e_2, _b, e_3, _c;\n\n      var stretchy = [];\n\n      try {\n        for (var _d = __values(this.tableRows), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var row = _e.value;\n          var cell = row.getChild(i);\n\n          if (cell) {\n            var child = cell.childNodes[0];\n\n            if (child.stretch.dir === 0 && child.canStretch(2)) {\n              stretchy.push(child);\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var count = stretchy.length;\n      var nodeCount = this.childNodes.length;\n\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          var all = count > 1 && count === nodeCount;\n\n          try {\n            for (var _f = __values(this.tableRows), _g = _f.next(); !_g.done; _g = _f.next()) {\n              var row = _g.value;\n              var cell = row.getChild(i);\n\n              if (cell) {\n                var child = cell.childNodes[0];\n                var noStretch = child.stretch.dir === 0;\n\n                if (all || noStretch) {\n                  var w = child.getBBox(noStretch).w;\n\n                  if (w > W) {\n                    W = w;\n                  }\n                }\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n\n        try {\n          for (var stretchy_1 = __values(stretchy), stretchy_1_1 = stretchy_1.next(); !stretchy_1_1.done; stretchy_1_1 = stretchy_1.next()) {\n            var child = stretchy_1_1.value;\n            child.coreMO().getStretchedVariant([W]);\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (stretchy_1_1 && !stretchy_1_1.done && (_c = stretchy_1.return)) _c.call(stretchy_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n      }\n    };\n\n    class_1.prototype.getTableData = function () {\n      if (this.data) {\n        return this.data;\n      }\n\n      var H = new Array(this.numRows).fill(0);\n      var D = new Array(this.numRows).fill(0);\n      var W = new Array(this.numCols).fill(0);\n      var NH = new Array(this.numRows);\n      var ND = new Array(this.numRows);\n      var LW = [0];\n      var rows = this.tableRows;\n\n      for (var j = 0; j < rows.length; j++) {\n        var M = 0;\n        var row = rows[j];\n        var align = row.node.attributes.get('rowalign');\n\n        for (var i = 0; i < row.numCells; i++) {\n          var cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n\n        NH[j] = H[j];\n        ND[j] = D[j];\n\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n\n      var L = LW[0];\n      this.data = {\n        H: H,\n        D: D,\n        W: W,\n        NH: NH,\n        ND: ND,\n        L: L\n      };\n      return this.data;\n    };\n\n    class_1.prototype.updateHDW = function (cell, i, j, align, H, D, W, M) {\n      var _a = cell.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      var scale = cell.parent.bbox.rscale;\n\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n\n      var m = 0;\n      align = cell.node.attributes.get('rowalign') || align;\n\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    };\n\n    class_1.prototype.extendHD = function (i, H, D, M) {\n      var d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    };\n\n    class_1.prototype.recordPWidthCell = function (cell, i) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    };\n\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var height, width;\n\n      if (this.node.attributes.get('equalrows')) {\n        var HD = this.getEqualRowHeight();\n        height = numeric_js_1.sum([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = numeric_js_1.sum(H.concat(D, this.rLines, this.rSpace));\n      }\n\n      height += 2 * (this.fLine + this.fSpace[1]);\n      var CW = this.getComputedWidths();\n      width = numeric_js_1.sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      var w = this.node.attributes.get('width');\n\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n\n      var _b = __read(this.getBBoxHD(height), 2),\n          h = _b[0],\n          d = _b[1];\n\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n\n      var _c = __read(this.getBBoxLR(), 2),\n          L = _c[0],\n          R = _c[1];\n\n      bbox.L = L;\n      bbox.R = R;\n\n      if (!string_js_1.isPercent(w)) {\n        this.setColumnPWidths();\n      }\n    };\n\n    class_1.prototype.setChildPWidths = function (_recompute, cwidth, _clear) {\n      var width = this.node.attributes.get('width');\n      if (!string_js_1.isPercent(width)) return false;\n\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n\n      var _a = this.bbox,\n          w = _a.w,\n          L = _a.L,\n          R = _a.R;\n      var labelInWidth = this.node.attributes.get('data-width-includes-label');\n      var W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      var cols = this.node.attributes.get('equalcolumns') ? Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) : this.getColumnAttributes('columnwidth', 0);\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      var CW = this.getComputedWidths();\n      this.pWidth = numeric_js_1.sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n\n      this.setColumnPWidths();\n\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n\n      return this.pWidth !== w;\n    };\n\n    class_1.prototype.setColumnPWidths = function () {\n      var e_4, _a;\n\n      var W = this.cWidths;\n\n      try {\n        for (var _b = __values(this.pwidthCells), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = __read(_c.value, 2),\n              cell = _d[0],\n              i = _d[1];\n\n          if (cell.setChildPWidths(false, W[i])) {\n            cell.invalidateBBox();\n            cell.getBBox();\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    };\n\n    class_1.prototype.getBBoxHD = function (height) {\n      var _a = __read(this.getAlignmentRow(), 2),\n          align = _a[0],\n          row = _a[1];\n\n      if (row === null) {\n        var a = this.font.params.axis_height;\n        var h2 = height / 2;\n        var HD = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        var y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    };\n\n    class_1.prototype.getBBoxLR = function () {\n      if (this.hasLabels) {\n        var attributes = this.node.attributes;\n        var side = attributes.get('side');\n\n        var _a = __read(this.getPadAlignShift(side), 2),\n            pad = _a[0],\n            align = _a[1];\n\n        var labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n\n        return align === 'center' && !labels ? [pad, pad] : side === 'left' ? [pad, 0] : [0, pad];\n      }\n\n      return [0, 0];\n    };\n\n    class_1.prototype.getPadAlignShift = function (side) {\n      var L = this.getTableData().L;\n      var sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      var pad = L + sep;\n\n      var _a = __read(this.styles == null ? ['', ''] : [this.styles.get('padding-left'), this.styles.get('padding-right')], 2),\n          lpad = _a[0],\n          rpad = _a[1];\n\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n\n      var _b = __read(this.getAlignShift(), 2),\n          align = _b[0],\n          shift = _b[1];\n\n      if (align === side) {\n        shift = side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad;\n      }\n\n      return [pad, align, shift];\n    };\n\n    class_1.prototype.getAlignShift = function () {\n      return this.isTop ? _super.prototype.getAlignShift.call(this) : [this.container.getChildAlign(this.containerI), 0];\n    };\n\n    class_1.prototype.getWidth = function () {\n      return this.pWidth || this.getBBox().w;\n    };\n\n    class_1.prototype.getEqualRowHeight = function () {\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var HD = Array.from(H.keys()).map(function (i) {\n        return H[i] + D[i];\n      });\n      return Math.max.apply(Math, HD);\n    };\n\n    class_1.prototype.getComputedWidths = function () {\n      var _this = this;\n\n      var W = this.getTableData().W;\n      var CW = Array.from(W.keys()).map(function (i) {\n        return typeof _this.cWidths[i] === 'number' ? _this.cWidths[i] : W[i];\n      });\n\n      if (this.node.attributes.get('equalcolumns')) {\n        CW = Array(CW.length).fill(numeric_js_1.max(CW));\n      }\n\n      return CW;\n    };\n\n    class_1.prototype.getColumnWidths = function () {\n      var width = this.node.attributes.get('width');\n\n      if (this.node.attributes.get('equalcolumns')) {\n        return this.getEqualColumns(width);\n      }\n\n      var swidths = this.getColumnAttributes('columnwidth', 0);\n\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n\n      if (string_js_1.isPercent(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    };\n\n    class_1.prototype.getEqualColumns = function (width) {\n      var n = Math.max(1, this.numCols);\n      var cwidth;\n\n      if (width === 'auto') {\n        var W = this.getTableData().W;\n        cwidth = numeric_js_1.max(W);\n      } else if (string_js_1.isPercent(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        var w = numeric_js_1.sum([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n\n      return Array(this.numCols).fill(cwidth);\n    };\n\n    class_1.prototype.getColumnWidthsAuto = function (swidths) {\n      var _this = this;\n\n      return swidths.map(function (x) {\n        if (x === 'auto' || x === 'fit') return null;\n        if (string_js_1.isPercent(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n\n    class_1.prototype.getColumnWidthsPercent = function (swidths) {\n      var _this = this;\n\n      var hasFit = swidths.indexOf('fit') >= 0;\n      var W = (hasFit ? this.getTableData() : {\n        W: null\n      }).W;\n      return Array.from(swidths.keys()).map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return hasFit ? W[i] : null;\n        if (string_js_1.isPercent(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n\n    class_1.prototype.getColumnWidthsFixed = function (swidths, width) {\n      var _this = this;\n\n      var indices = Array.from(swidths.keys());\n      var fit = indices.filter(function (i) {\n        return swidths[i] === 'fit';\n      });\n      var auto = indices.filter(function (i) {\n        return swidths[i] === 'auto';\n      });\n      var n = fit.length || auto.length;\n      var W = (n ? this.getTableData() : {\n        W: null\n      }).W;\n      var cwidth = width - numeric_js_1.sum([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      var dw = cwidth;\n      indices.forEach(function (i) {\n        var x = swidths[i];\n        dw -= x === 'fit' || x === 'auto' ? W[i] : _this.length2em(x, cwidth);\n      });\n      var fw = n && dw > 0 ? dw / n : 0;\n      return indices.map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return _this.length2em(x, cwidth);\n      });\n    };\n\n    class_1.prototype.getVerticalPosition = function (i, align) {\n      var equal = this.node.attributes.get('equalrows');\n\n      var _a = this.getTableData(),\n          H = _a.H,\n          D = _a.D;\n\n      var HD = equal ? this.getEqualRowHeight() : 0;\n      var space = this.getRowHalfSpacing();\n      var y = this.fLine;\n\n      for (var j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n\n      var _b = __read(equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]], 2),\n          h = _b[0],\n          d = _b[1];\n\n      var offset = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      return y;\n    };\n\n    class_1.prototype.getEmHalfSpacing = function (fspace, space, scale) {\n      if (scale === void 0) {\n        scale = 1;\n      }\n\n      var fspaceEm = this.em(fspace * scale);\n      var spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    };\n\n    class_1.prototype.getRowHalfSpacing = function () {\n      var space = this.rSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    };\n\n    class_1.prototype.getColumnHalfSpacing = function () {\n      var space = this.cSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    };\n\n    class_1.prototype.getAlignmentRow = function () {\n      var _a = __read(string_js_1.split(this.node.attributes.get('align')), 2),\n          align = _a[0],\n          row = _a[1];\n\n      if (row == null) return [align, null];\n      var i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    };\n\n    class_1.prototype.getColumnAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n\n      var n = this.numCols - i;\n      var columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n\n      return columns;\n    };\n\n    class_1.prototype.getRowAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n\n      var n = this.numRows - i;\n      var rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n\n      return rows;\n    };\n\n    class_1.prototype.getAttributeArray = function (name) {\n      var value = this.node.attributes.get(name);\n      if (!value) return [this.node.attributes.getDefault(name)];\n      return string_js_1.split(value);\n    };\n\n    class_1.prototype.addEm = function (list, n) {\n      var _this = this;\n\n      if (n === void 0) {\n        n = 1;\n      }\n\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.em(x / n);\n      });\n    };\n\n    class_1.prototype.convertLengths = function (list) {\n      var _this = this;\n\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.length2em(x);\n      });\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMtableMixin = CommonMtableMixin;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/common/Wrappers/mtable.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMtable wrapper mixin for the MmlMtable object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonMtr} from './mtr.js';\nimport {CommonMo} from './mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {DIRECTION} from '../FontData.js';\nimport {split, isPercent} from '../../../util/string.js';\nimport {sum, max} from '../../../util/numeric.js';\n\n/*****************************************************************/\n/**\n * The heights, depths, and widths of the rows and columns\n * Plus the natural height and depth (i.e., without the labels)\n * Plus the label column width\n */\nexport type TableData = {\n  H: number[];\n  D: number[];\n  W: number[];\n  NH: number[];\n  ND: number[];\n  L: number;\n};\n\n/**\n * An array of table dimensions\n */\nexport type ColumnWidths = (string | number | null)[];\n\n/*****************************************************************/\n/**\n * The CommonMtable interface\n *\n * @template C   The class for table cells\n * @template R   The class for table rows\n */\nexport interface CommonMtable<C extends AnyWrapper, R extends CommonMtr<C>> extends AnyWrapper {\n\n  /**\n   * The number of columns and rows in the table\n   */\n  numCols: number;\n  numRows: number;\n\n  /**\n   * True if there are labeled rows\n   */\n  hasLabels: boolean;\n\n  /**\n   * True if this mtable is the top element, or in a top-most mrow\n   */\n  isTop: boolean;\n\n  /**\n   * The parent node of this table (skipping non-parents and mrows)\n   *   and the position of the table as a child node\n   */\n  container: AnyWrapper;\n  containerI: number;\n\n  /**\n   * The spacing and line data\n   */\n  frame: boolean;\n  fLine: number;\n  fSpace: number[];\n  cSpace: number[];\n  rSpace: number[];\n  cLines: number[];\n  rLines: number[];\n  cWidths: (number | string)[];\n\n  /**\n   * The bounding box information for the table rows and columns\n   */\n  data: TableData;\n\n  /**\n   * The table cells that have percentage-width content\n   */\n  pwidthCells: [C, number][];\n\n  /**\n   * The full width of a percentage-width table\n   */\n  pWidth: number;\n\n  /**\n   * The rows of the table\n   */\n  readonly tableRows: R[];\n\n  /**\n   * @override\n   */\n  childNodes: R[];\n\n  /**\n   * Find the container and the child position of the table\n   */\n  findContainer(): void;\n\n  /**\n   * If the table has a precentage width or has labels, set the pwidth of the bounding box\n   */\n  getPercentageWidth(): void;\n\n  /**\n   * Stretch the rows to the equal height or natural height\n   */\n  stretchRows(): void;\n\n  /**\n   * Stretch the columns to their proper widths\n   */\n  stretchColumns(): void;\n\n  /**\n   * Handle horizontal stretching within the ith column\n   *\n   * @param {number} i   The column number\n   * @param {number} W   The computed width of the column (or null of not computed)\n   */\n  stretchColumn(i: number, W: number): void;\n\n  /**\n   * Determine the row heights and depths, the column widths,\n   * and the natural width and height of the table.\n   *\n   * @return {TableData}  The dimensions of the rows and columns\n   */\n  getTableData(): TableData;\n\n  /**\n   * @param {C} cell         The cell whose height, depth, and width are to be added into the H, D, W arrays\n   * @param {number} i       The column number for the cell\n   * @param {number} j       The row number for the cell\n   * @param {string} align   The row alignment\n   * @param {number[]} H     The maximum height for each of the rows\n   * @param {number[]} D     The maximum depth for each of the rows\n   * @param {number[]} W     The maximum width for each column\n   * @param {number} M       The current height for items aligned top and bottom\n   * @return {number}        The updated value for M\n   */\n  updateHDW(cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number): number;\n\n  /**\n   * Extend the H and D of a row to cover the maximum height needed by top/bottom aligned items\n   *\n   * @param {number} i     The row whose hight and depth should be adjusted\n   * @param {number[]} H   The row heights\n   * @param {number[]} D   The row depths\n   * @param {number} M     The maximum height of top/bottom aligned items\n   */\n  extendHD(i: number, H: number[], D: number[], M: number): void;\n\n  /**\n   * Set cell widths for columns with percentage width children\n   */\n  setColumnPWidths(): void;\n\n  /**\n   * @param {number} height   The total height of the table\n   * @return {number[]}       The [height, depth] for the aligned table\n   */\n  getBBoxHD(height: number): number[];\n\n  /**\n   * Get bbox left and right amounts to cover labels\n   */\n  getBBoxLR(): number[];\n\n  /**\n   * @param {string} side                 The side for the labels\n   * @return {[number, string, number]}   The padding, alignment, and shift amounts\n   */\n  getPadAlignShift(side: string): [number, string, number];\n\n  /**\n   * @return {number}    The true width of the table (without labels)\n   */\n  getWidth(): number;\n\n  /**\n   * @return {number}   The maximum height of a row\n   */\n  getEqualRowHeight(): number;\n\n  /**\n   * @return {number[]}   The array of computed widths\n   */\n  getComputedWidths(): number[];\n\n  /**\n   * Determine the column widths that can be computed (and need to be set).\n   * The resulting arrays will have numbers for fixed-size arrays,\n   *   strings for percentage sizes that can't be determined now,\n   *   and null for stretchy columns tht will expand to fill the extra space.\n   * Depending on the width specified for the table, different column\n   *  values can be determined.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidths(): ColumnWidths;\n\n  /**\n   * For tables with equal columns, get the proper amount per row.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getEqualColumns(width: string): ColumnWidths;\n\n  /**\n   * For tables with width=\"auto\", auto and fit columns\n   * will end up being natural width, so don't need to\n   * set those explicitly.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsAuto(swidths: string[]): ColumnWidths;\n\n  /**\n   * For tables with percentage widths, let 'fit' columns (or 'auto'\n   * columns if there are not 'fit' ones) will stretch automatically,\n   * but for 'auto' columns (when there are 'fit' ones), set the size\n   * to the natural size of the column.\n   *\n   * @param {string[]} widths  Strings giving the widths\n   * @return {ColumnWidths}    The array of widths\n   */\n  getColumnWidthsPercent(widths: string[]): ColumnWidths;\n\n  /**\n   * For fixed-width tables, compute the column widths of all columns.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths;\n\n  /**\n   * @param {number} i      The row number (starting at 0)\n   * @param {string} align  The alignment on that row\n   * @return {number}       The offest of the alignment position from the top of the table\n   */\n  getVerticalPosition(i: number, align: string): number;\n\n  /**\n   * @param {number} fspace   The frame spacing to use\n   * @param {number[]} space  The array of spacing values to convert to strings\n   * @param {number} scale    A scaling factor to use for the sizes\n   * @return {string[]}       The half-spacing as stings with units of \"em\"\n   *                           with frame spacing at the beginning and end\n   */\n  getEmHalfSpacing(fspace: number, space: number[], scale?: number): string[];\n\n  /**\n   * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n   */\n  getRowHalfSpacing(): number[];\n\n  /**\n   * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n   */\n  getColumnHalfSpacing(): number[];\n\n  /**\n   * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n   */\n  getAlignmentRow(): [string, number | null];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numCols entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table columns (minus 1) by repeating the last entry\n   */\n  getColumnAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numRows entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table rows (minus 1) by repeating the last entry\n   */\n  getRowAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @return {string[]}             The array of values in the given attribute, split at spaces\n   *                                 (after leading and trailing spaces are removed, and multiple\n   *                                  spaces have been collapsed to one).\n   */\n  getAttributeArray(name: string): string[];\n\n  /**\n   * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n   *\n   * @param {string[]} list   The array of dimensions (in em's)\n   * @param {nunber=} n       The number to divide each dimension by after converted\n   * @return {string[]}       The array of values with \"em\" added\n   */\n  addEm(list: number[], n?: number): string[];\n\n  /**\n   * Converts an array of dimensions (with arbitrary units) to an array of numbers\n   *   representing the dimensions in units of em's.\n   *\n   * @param {string[]} list   The array of dimensions to be turned into em's\n   * @return {number[]}       The array of values converted to em's\n   */\n  convertLengths(list: string[]): number[];\n\n}\n\n/**\n * Shorthand for the CommonMtable constructor\n */\nexport type MtableConstructor<C extends AnyWrapper, R extends CommonMtr<C>> = Constructor<CommonMtable<C, R>>;\n\n/*****************************************************************/\n/**\n * The CommonMtable wrapper mixin for the MmlMtable object\n *\n * @template C  The table cell class\n * @temlpate R  the table row class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtableMixin<\n  C extends AnyWrapper,\n  R extends CommonMtr<C>,\n  T extends WrapperConstructor\n>(Base: T): MtableConstructor<C, R> & T {\n\n  return class extends Base {\n\n    /**\n     * The number of columns in the table\n     */\n    public numCols: number = 0;\n    /**\n     * The number of rows in the table\n     */\n    public numRows: number = 0;\n\n    /**\n     * True if there are labeled rows\n     */\n    public hasLabels: boolean;\n\n    /**\n     * True if this mtable is the top element, or in a top-most mrow\n     */\n    public isTop: boolean;\n\n    /**\n     * The parent node of this table (skipping non-parents and mrows)\n     */\n    public container: AnyWrapper;\n    /**\n     * The position of the table as a child node of its container\n     */\n    public containerI: number;\n\n    /**\n     * True if there is a frame\n     */\n    public frame: boolean;\n    /**\n     * The size of the frame line (or 0 if none)\n     */\n    public fLine: number;\n    /**\n     * frame spacing on the left and right\n     */\n    public fSpace: number[];\n    /**\n     * The spacing between columns\n     */\n    public cSpace: number[];\n    /**\n     * The spacing between rows\n     */\n    public rSpace: number[];\n    /**\n     * The width of columns lines (or 0 if no line for the column)\n     */\n    public cLines: number[];\n    /**\n     * The width of row lines (or 0 if no lone for that row)\n     */\n    public rLines: number[];\n    /**\n     * The column widths (or percentages, etc.)\n     */\n    public cWidths: (number | string)[];\n\n    /**\n     * The bounding box information for the table rows and columns\n     */\n    public data: TableData = null;\n\n    /**\n     * The table cells that have percentage-width content\n     */\n    public pwidthCells: [C, number][] = [];\n\n    /**\n     * The full width of a percentage-width table\n     */\n    public pWidth: number = 0;\n\n    /**\n     * @return {R[]}  The rows of the table\n     */\n    get tableRows(): R[] {\n      return this.childNodes;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      //\n      // Determine the number of columns and rows, and whether the table is stretchy\n      //\n      this.numCols = max(this.tableRows.map(row => row.numCells));\n      this.numRows = this.childNodes.length;\n      this.hasLabels = this.childNodes.reduce((value, row) => value || row.node.isKind('mlabeledtr'), false);\n      this.findContainer();\n      this.isTop = !this.container || (this.container.node.isKind('math') && !this.container.parent);\n      if (this.isTop) {\n        this.jax.table = this;\n      }\n      this.getPercentageWidth();\n      //\n      // Get the frame, row, and column parameters\n      //\n      const attributes = this.node.attributes;\n      this.frame = attributes.get('frame') !== 'none';\n      this.fLine = (this.frame && attributes.get('frame') ? .07 : 0);\n      this.fSpace = (this.frame ? this.convertLengths(this.getAttributeArray('framespacing')) : [0, 0]);\n      this.cSpace = this.convertLengths(this.getColumnAttributes('columnspacing'));\n      this.rSpace = this.convertLengths(this.getRowAttributes('rowspacing'));\n      this.cLines = this.getColumnAttributes('columnlines').map(x => (x === 'none' ? 0 : .07));\n      this.rLines = this.getRowAttributes('rowlines').map(x => (x === 'none' ? 0 : .07));\n      this.cWidths = this.getColumnWidths();\n      //\n      // Stretch the rows and columns\n      //\n      this.stretchRows();\n      this.stretchColumns();\n    }\n\n    /**\n     * Find the container and the child position of the table\n     */\n    public findContainer() {\n      let node = this as AnyWrapper;\n      let parent = node.parent as AnyWrapper;\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    }\n\n    /**\n     * If the table has a precentage width or has labels, set the pwidth of the bounding box\n     */\n    public getPercentageWidth() {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox.fullWidth;\n      } else {\n        const width = this.node.attributes.get('width') as string;\n        if (isPercent(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    }\n\n    /**\n     * Stretch the rows to the equal height or natural height\n     */\n    public stretchRows() {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const {H, D} = (equal ? this.getTableData() : {H: [0], D: [0]});\n      const rows = this.tableRows;\n      for (let i = 0; i < this.numRows; i++) {\n        const hd = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null);\n        rows[i].stretchChildren(hd);\n      }\n    }\n\n    /**\n     * Stretch the columns to their proper widths\n     */\n    public stretchColumns() {\n      for (let i = 0; i < this.numCols; i++) {\n        const width = (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : null);\n        this.stretchColumn(i, width);\n      }\n    }\n\n    /**\n     * Handle horizontal stretching within the ith column\n     *\n     * @param {number} i   The column number\n     * @param {number} W   The computed width of the column (or null of not computed)\n     */\n    public stretchColumn(i: number, W: number) {\n      let stretchy: AnyWrapper[] = [];\n      //\n      //  Locate and count the stretchy children\n      //\n      for (const row of this.tableRows) {\n        const cell = row.getChild(i);\n        if (cell) {\n          const child = cell.childNodes[0];\n          if (child.stretch.dir === DIRECTION.None &&\n              child.canStretch(DIRECTION.Horizontal)) {\n            stretchy.push(child);\n          }\n        }\n      }\n      let count = stretchy.length;\n      let nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          //\n          //  If all the children are stretchy, find the largest one,\n          //  otherwise, find the width of the non-stretchy children.\n          //\n          let all = (count > 1 && count === nodeCount);\n          for (const row of this.tableRows) {\n            const cell = row.getChild(i);\n            if (cell) {\n              const child = cell.childNodes[0];\n              const noStretch = (child.stretch.dir === DIRECTION.None);\n              if (all || noStretch) {\n                const {w} = child.getBBox(noStretch);\n                if (w > W) {\n                  W = w;\n                }\n              }\n            }\n          }\n        }\n        //\n        //  Stretch the stretchable children\n        //\n        for (const child of stretchy) {\n          (child.coreMO() as CommonMo).getStretchedVariant([W]);\n        }\n      }\n    }\n\n    /******************************************************************/\n\n    /**\n     * Determine the row heights and depths, the column widths,\n     * and the natural width and height of the table.\n     *\n     * @return {TableData}  The dimensions of the rows and columns\n     */\n    public getTableData(): TableData {\n      if (this.data) {\n        return this.data;\n      }\n      const H = new Array(this.numRows).fill(0);\n      const D = new Array(this.numRows).fill(0);\n      const W = new Array(this.numCols).fill(0);\n      const NH = new Array(this.numRows);\n      const ND = new Array(this.numRows);\n      const LW = [0];\n      const rows = this.tableRows;\n      for (let j = 0; j < rows.length; j++) {\n        let M = 0;\n        const row = rows[j];\n        const align = row.node.attributes.get('rowalign') as string;\n        for (let i = 0; i < row.numCells; i++) {\n          const cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n        NH[j] = H[j];\n        ND[j] = D[j];\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n      const L = LW[0];\n      this.data = {H, D, W, NH, ND, L};\n      return this.data;\n    }\n\n    /**\n     * @override\n     */\n    public updateHDW(\n      cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number\n    ): number {\n      let {h, d, w} = cell.getBBox();\n      const scale = cell.parent.bbox.rscale;\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n      let m = 0;\n      align = cell.node.attributes.get('rowalign') as string || align;\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    }\n\n    /**\n     * @override\n     */\n    public extendHD(i: number, H: number[], D: number[], M: number) {\n      const d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    }\n\n    /**\n     * @param {C} cell     The cell to check for percentage widths\n     * @param {number} i   The column index of the cell\n     */\n    public recordPWidthCell(cell: C, i: number) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      const {H, D} = this.getTableData();\n      let height, width;\n      //\n      // For equal rows, use the common height and depth for all rows\n      // Otherwise, use the height and depths for each row separately.\n      // Add in the spacing, line widths, and frame size.\n      //\n      if (this.node.attributes.get('equalrows') as boolean) {\n        const HD = this.getEqualRowHeight();\n        height = sum([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = sum(H.concat(D, this.rLines, this.rSpace));\n      }\n      height += 2 * (this.fLine + this.fSpace[1]);\n      //\n      //  Get the widths of all columns\n      //\n      const CW = this.getComputedWidths();\n      //\n      //  Get the expected width of the table\n      //\n      width = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      //\n      //  If the table width is not 'auto', determine the specified width\n      //    and pick the larger of the specified and computed widths.\n      //\n      const w = this.node.attributes.get('width') as string;\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n      //\n      //  Return the bounding box information\n      //\n      let [h, d] = this.getBBoxHD(height);\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n      let [L, R] = this.getBBoxLR();\n      bbox.L = L;\n      bbox.R = R;\n      //\n      //  Handle cell widths if width is not a percentage\n      //\n      if (!isPercent(w)) {\n        this.setColumnPWidths();\n      }\n    }\n\n    /**\n     * @override\n     */\n    public setChildPWidths(_recompute: boolean, cwidth: number, _clear: boolean) {\n      const width = this.node.attributes.get('width') as string;\n      if (!isPercent(width)) return false;\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n      const {w, L, R} = this.bbox;\n      const labelInWidth = this.node.attributes.get('data-width-includes-label') as boolean;\n      const W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      const cols = (this.node.attributes.get('equalcolumns') as boolean ?\n                    Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) :\n                    this.getColumnAttributes('columnwidth', 0));\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      const CW = this.getComputedWidths();\n      this.pWidth = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n      this.setColumnPWidths();\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n      return this.pWidth !== w;\n    }\n\n    /**\n     * Finalize any cells that have percentage-width content\n     */\n    public setColumnPWidths() {\n      const W = this.cWidths as number[];\n      for (const [cell, i] of this.pwidthCells) {\n        if (cell.setChildPWidths(false, W[i])) {\n          cell.invalidateBBox();\n          cell.getBBox();\n        }\n      }\n    }\n\n    /**\n     * @param {number} height   The total height of the table\n     * @return {[number, number]}  The [height, depth] for the aligned table\n     */\n    public getBBoxHD(height: number): [number, number] {\n      const [align, row] = this.getAlignmentRow();\n      if (row === null) {\n        const a = this.font.params.axis_height;\n        const h2 = height / 2;\n        const HD: {[key: string]: [number, number]} = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        const y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    }\n\n    /**\n     * Get bbox left and right amounts to cover labels\n     */\n    public getBBoxLR() {\n      if (this.hasLabels) {\n        const attributes = this.node.attributes;\n        const side = attributes.get('side') as string;\n        let [pad, align] = this.getPadAlignShift(side);\n        //\n        // If labels are included in the width,\n        //   remove the frame spacing if there is no frame line (added by multline)\n        //   and use left or right justification rather than centering so that\n        //   there is no extra space reserved for the label on the opposite side,\n        //   (as there usually is to center the equation).\n        //\n        const labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n        return (align === 'center' && !labels ? [pad, pad] :\n                side === 'left' ? [pad, 0] : [0, pad]);\n      }\n      return [0, 0];\n    }\n\n    /**\n     * @param {string} side                 The side for the labels\n     * @return {[number, string, number]}   The padding, alignment, and shift amounts\n     */\n    public getPadAlignShift(side: string): [number, string, number] {\n      //\n      //  Make sure labels don't overlap table\n      //\n      const {L} = this.getTableData();\n      const sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      let pad = L + sep;\n      const [lpad, rpad] = (this.styles == null ? ['', ''] :\n                            [this.styles.get('padding-left'), this.styles.get('padding-right')]);\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n      //\n      //  Handle indentation\n      //\n      let [align, shift] = this.getAlignShift();\n      if (align === side) {\n        shift = (side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad);\n      }\n      return [pad, align, shift] as [number, string, number];\n    }\n\n    /**\n     * @override\n     */\n    public getAlignShift() {\n      return (this.isTop ? super.getAlignShift() :\n              [this.container.getChildAlign(this.containerI), 0] as [string, number]);\n    }\n\n    /**\n     * @return {number}    The true width of the table (without labels)\n     */\n    public getWidth(): number {\n      return this.pWidth || this.getBBox().w;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @return {number}   The maximum height of a row\n     */\n    public getEqualRowHeight(): number {\n      const {H, D} = this.getTableData();\n      const HD = Array.from(H.keys()).map(i => H[i] + D[i]);\n      return Math.max.apply(Math, HD);\n    }\n\n    /**\n     * @return {number[]}   The array of computed widths\n     */\n    public getComputedWidths(): number[] {\n      const W = this.getTableData().W;\n      let CW = Array.from(W.keys()).map(i => {\n        return (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : W[i]);\n      });\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        CW = Array(CW.length).fill(max(CW));\n      }\n      return CW;\n    }\n\n    /**\n     * Determine the column widths that can be computed (and need to be set).\n     * The resulting arrays will have numbers for fixed-size arrays,\n     *   strings for percentage sizes that can't be determined now,\n     *   and null for stretchy columns that will expand to fill the extra space.\n     * Depending on the width specified for the table, different column\n     *  values can be determined.\n     *\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getColumnWidths(): (string | number | null)[] {\n      const width = this.node.attributes.get('width') as string;\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        return this.getEqualColumns(width);\n      }\n      const swidths = this.getColumnAttributes('columnwidth', 0);\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n      if (isPercent(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    }\n\n    /**\n     * For tables with equal columns, get the proper amount per column.\n     *\n     * @param {string} width   The width attribute of the table\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getEqualColumns(width: string): (string | number | null)[] {\n      const n = Math.max(1, this.numCols);\n      let cwidth;\n      if (width === 'auto') {\n        const {W} = this.getTableData();\n        cwidth = max(W);\n      } else if (isPercent(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        const w = sum([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n      return Array(this.numCols).fill(cwidth);\n    }\n\n    /**\n     * For tables with width=\"auto\", auto and fit columns\n     * will end up being natural width, so don't need to\n     * set those explicitly.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}  The array of widths\n     */\n    public getColumnWidthsAuto(swidths: string[]): ColumnWidths {\n      return swidths.map(x => {\n        if (x === 'auto' || x === 'fit') return null;\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For tables with percentage widths, the 'fit' columns (or 'auto'\n     * columns if there are not 'fit' ones) will stretch automatically,\n     * but for 'auto' columns (when there are 'fit' ones), set the size\n     * to the natural size of the column.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsPercent(swidths: string[]): ColumnWidths {\n      const hasFit = swidths.indexOf('fit') >= 0;\n      const {W} = (hasFit ? this.getTableData() : {W: null});\n      return Array.from(swidths.keys()).map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return (hasFit ? W[i] : null);\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For fixed-width tables, compute the column widths of all columns.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @param {number} width       The width of the table\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths {\n      //\n      // Get the indices of the fit and auto columns, and the number of fit or auto entries.\n      // If there are fit or auto columns, get the column widths.\n      //\n      const indices = Array.from(swidths.keys());\n      const fit = indices.filter(i => swidths[i] === 'fit');\n      const auto = indices.filter(i => swidths[i] === 'auto');\n      const n = fit.length || auto.length;\n      const {W} = (n ? this.getTableData() : {W: null});\n      //\n      // Determine the space remaining from the fixed width after the\n      //   separation and lines have been removed (cwidth), and\n      //   after the width of the columns have been removed (dw).\n      //\n      const cwidth = width - sum([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      let dw = cwidth;\n      indices.forEach(i => {\n        const x = swidths[i];\n        dw -= (x === 'fit' || x === 'auto' ? W[i] : this.length2em(x, cwidth));\n      });\n      //\n      // Get the amount of extra space per column, or 0 (fw)\n      //\n      const fw = (n && dw > 0 ? dw / n : 0);\n      //\n      // Return the column widths (plus extra space for those that are stretching\n      //\n      return indices.map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return this.length2em(x, cwidth);\n      });\n    }\n\n    /**\n     * @param {number} i      The row number (starting at 0)\n     * @param {string} align  The alignment on that row\n     * @return {number}       The offest of the alignment position from the top of the table\n     */\n    public getVerticalPosition(i: number, align: string): number {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const {H, D} = this.getTableData();\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const space = this.getRowHalfSpacing();\n      //\n      //  Start with frame size and add in spacing, height and depth,\n      //    and line thickness for each row.\n      //\n      let y = this.fLine;\n      for (let j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n      //\n      //  For equal rows, get updated height and depth\n      //\n      const [h, d] = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]]);\n      //\n      //  Add the offset into the specified row\n      //\n      const offset: {[name: string]: number} = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      //\n      //  Return the final result\n      //\n      return y;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @param {number} fspace   The frame spacing to use\n     * @param {number[]} space  The array of spacing values to convert to strings\n     * @param {number} scale    A scaling factor to use for the sizes\n     * @return {string[]}       The half-spacing as stings with units of \"em\"\n     *                           with frame spacing at the beginning and end\n     */\n    public getEmHalfSpacing(fspace: number, space: number[], scale: number = 1): string[] {\n      //\n      //  Get the column spacing values, and add the frame spacing values at the left and right\n      //\n      const fspaceEm = this.em(fspace * scale);\n      const spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n     */\n    public getRowHalfSpacing(): number[] {\n      const space = this.rSpace.map(x => x / 2);\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n     */\n    public getColumnHalfSpacing(): number[] {\n      const space = this.cSpace.map(x => x / 2);\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    }\n\n    /**\n     * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n     */\n    public getAlignmentRow(): [string, number] {\n      const [align, row] = split(this.node.attributes.get('align') as string);\n      if (row == null) return [align, null];\n      let i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numCols entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table columns (minus 1) by repeating the last entry\n     */\n    public getColumnAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numCols - i;\n      const columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n      return columns;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numRows entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table rows (minus 1) by repeating the last entry\n     */\n    public getRowAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numRows - i;\n      const rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n      return rows;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @return {string[]}             The array of values in the given attribute, split at spaces\n     *                                 (after leading and trailing spaces are removed, and multiple\n     *                                  spaces have been collapsed to one).\n     */\n    public getAttributeArray(name: string): string[] {\n      const value = this.node.attributes.get(name) as string;\n      if (!value) return [this.node.attributes.getDefault(name) as string];\n      return split(value);\n    }\n\n    /**\n     * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n     *\n     * @param {string[]} list   The array of dimensions (in em's)\n     * @param {nunber=} n       The number to divide each dimension by after converted\n     * @return {string[]}       The array of values with \"em\" added\n     */\n    public addEm(list: number[], n: number = 1): string[] | null {\n      if (!list) return null;\n      return list.map(x => this.em(x / n));\n    }\n\n    /**\n     * Converts an array of dimensions (with arbitrary units) to an array of numbers\n     *   representing the dimensions in units of em's.\n     *\n     * @param {string[]} list   The array of dimensions to be turned into em's\n     * @return {number[]}       The array of values converted to em's\n     */\n    public convertLengths(list: string[]): number[] | null {\n      if (!list) return null;\n      return list.map(x => this.length2em(x));\n    }\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}