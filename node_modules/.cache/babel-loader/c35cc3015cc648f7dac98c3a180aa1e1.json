{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SerializedMmlVisitor = exports.toEntity = exports.DATAMJX = void 0;\n\nvar MmlVisitor_js_1 = require(\"./MmlVisitor.js\");\n\nvar MmlNode_js_1 = require(\"./MmlNode.js\");\n\nvar mi_js_1 = require(\"./MmlNodes/mi.js\");\n\nexports.DATAMJX = 'data-mjx-';\n\nvar toEntity = function (c) {\n  return '&#x' + c.codePointAt(0).toString(16).toUpperCase() + ';';\n};\n\nexports.toEntity = toEntity;\n\nvar SerializedMmlVisitor = function (_super) {\n  __extends(SerializedMmlVisitor, _super);\n\n  function SerializedMmlVisitor() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SerializedMmlVisitor.prototype.visitTree = function (node) {\n    return this.visitNode(node, '');\n  };\n\n  SerializedMmlVisitor.prototype.visitTextNode = function (node, _space) {\n    return this.quoteHTML(node.getText());\n  };\n\n  SerializedMmlVisitor.prototype.visitXMLNode = function (node, space) {\n    return space + node.getSerializedXML();\n  };\n\n  SerializedMmlVisitor.prototype.visitInferredMrowNode = function (node, space) {\n    var e_1, _a;\n\n    var mml = [];\n\n    try {\n      for (var _b = __values(node.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        mml.push(this.visitNode(child, space));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return mml.join('\\n');\n  };\n\n  SerializedMmlVisitor.prototype.visitTeXAtomNode = function (node, space) {\n    var children = this.childNodeMml(node, space + '  ', '\\n');\n    var mml = space + '<mrow' + this.getAttributes(node) + '>' + (children.match(/\\S/) ? '\\n' + children + space : '') + '</mrow>';\n    return mml;\n  };\n\n  SerializedMmlVisitor.prototype.visitAnnotationNode = function (node, space) {\n    return space + '<annotation' + this.getAttributes(node) + '>' + this.childNodeMml(node, '', '') + '</annotation>';\n  };\n\n  SerializedMmlVisitor.prototype.visitDefault = function (node, space) {\n    var kind = node.kind;\n\n    var _a = __read(node.isToken || node.childNodes.length === 0 ? ['', ''] : ['\\n', space], 2),\n        nl = _a[0],\n        endspace = _a[1];\n\n    var children = this.childNodeMml(node, space + '  ', nl);\n    return space + '<' + kind + this.getAttributes(node) + '>' + (children.match(/\\S/) ? nl + children + endspace : '') + '</' + kind + '>';\n  };\n\n  SerializedMmlVisitor.prototype.childNodeMml = function (node, space, nl) {\n    var e_2, _a;\n\n    var mml = '';\n\n    try {\n      for (var _b = __values(node.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        mml += this.visitNode(child, space) + nl;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return mml;\n  };\n\n  SerializedMmlVisitor.prototype.getAttributes = function (node) {\n    var e_3, _a;\n\n    var attr = [];\n    var defaults = this.constructor.defaultAttributes[node.kind] || {};\n    var attributes = Object.assign({}, defaults, this.getDataAttributes(node), node.attributes.getAllAttributes());\n    var variants = this.constructor.variants;\n\n    if (attributes.hasOwnProperty('mathvariant') && variants.hasOwnProperty(attributes.mathvariant)) {\n      attributes.mathvariant = variants[attributes.mathvariant];\n    }\n\n    try {\n      for (var _b = __values(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var name_1 = _c.value;\n        var value = String(attributes[name_1]);\n        if (value === undefined) continue;\n        attr.push(name_1 + '=\"' + this.quoteHTML(value) + '\"');\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return attr.length ? ' ' + attr.join(' ') : '';\n  };\n\n  SerializedMmlVisitor.prototype.getDataAttributes = function (node) {\n    var data = {};\n    var variant = node.attributes.getExplicit('mathvariant');\n    var variants = this.constructor.variants;\n    variant && variants.hasOwnProperty(variant) && this.setDataAttribute(data, 'variant', variant);\n    node.getProperty('variantForm') && this.setDataAttribute(data, 'alternate', '1');\n    node.getProperty('pseudoscript') && this.setDataAttribute(data, 'pseudoscript', 'true');\n    node.getProperty('autoOP') === false && this.setDataAttribute(data, 'auto-op', 'false');\n    var texclass = node.getProperty('texClass');\n\n    if (texclass !== undefined) {\n      var setclass = true;\n\n      if (texclass === MmlNode_js_1.TEXCLASS.OP && node.isKind('mi')) {\n        var name_2 = node.getText();\n        setclass = !(name_2.length > 1 && name_2.match(mi_js_1.MmlMi.operatorName));\n      }\n\n      setclass && this.setDataAttribute(data, 'texclass', texclass < 0 ? 'NONE' : MmlNode_js_1.TEXCLASSNAMES[texclass]);\n    }\n\n    node.getProperty('scriptlevel') && node.getProperty('useHeight') === false && this.setDataAttribute(data, 'smallmatrix', 'true');\n    return data;\n  };\n\n  SerializedMmlVisitor.prototype.setDataAttribute = function (data, name, value) {\n    data[exports.DATAMJX + name] = value;\n  };\n\n  SerializedMmlVisitor.prototype.quoteHTML = function (value) {\n    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;').replace(/[\\uD800-\\uDBFF]./g, exports.toEntity).replace(/[\\u0080-\\uD7FF\\uE000-\\uFFFF]/g, exports.toEntity);\n  };\n\n  SerializedMmlVisitor.variants = {\n    '-tex-calligraphic': 'script',\n    '-tex-bold-calligraphic': 'bold-script',\n    '-tex-oldstyle': 'normal',\n    '-tex-bold-oldstyle': 'bold',\n    '-tex-mathit': 'italic'\n  };\n  SerializedMmlVisitor.defaultAttributes = {\n    math: {\n      xmlns: 'http://www.w3.org/1998/Math/MathML'\n    }\n  };\n  return SerializedMmlVisitor;\n}(MmlVisitor_js_1.MmlVisitor);\n\nexports.SerializedMmlVisitor = SerializedMmlVisitor;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/core/MmlTree/SerializedMmlVisitor.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  A visitor that produces a serilaied MathML string\n *                (replacement for toMathML() output from v2)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MmlVisitor} from './MmlVisitor.js';\nimport {MmlNode, TextNode, XMLNode, TEXCLASS, TEXCLASSNAMES} from './MmlNode.js';\nimport {MmlMi} from './MmlNodes/mi.js';\n\n\nexport const DATAMJX = 'data-mjx-';\n\nexport const toEntity = (c: string) => '&#x' + c.codePointAt(0).toString(16).toUpperCase() + ';';\n\ntype PropertyList = {[name: string]: string};\n\n\n/*****************************************************************/\n/**\n *  Implements the SerializedMmlVisitor (subclass of MmlVisitor)\n */\n\nexport class SerializedMmlVisitor extends MmlVisitor {\n\n  /**\n   * Translations for the internal mathvariants\n   */\n  public static variants: PropertyList = {\n    '-tex-calligraphic':      'script',\n    '-tex-bold-calligraphic': 'bold-script',\n    '-tex-oldstyle':          'normal',\n    '-tex-bold-oldstyle':     'bold',\n    '-tex-mathit':            'italic'\n  };\n\n  /**\n   * Attributes to include on every element of a given kind\n   */\n  public static defaultAttributes: {[kind: string]: PropertyList} = {\n    math: {\n      xmlns: 'http://www.w3.org/1998/Math/MathML'\n    }\n  };\n\n  /**\n   * Convert the tree rooted at a particular node into a serialized MathML string\n   *\n   * @param {MmlNode} node  The node to use as the root of the tree to traverse\n   * @return {string}       The MathML string representing the internal tree\n   */\n  public visitTree(node: MmlNode): string {\n    return this.visitNode(node, '');\n  }\n\n  /**\n   * @param {TextNode} node  The text node to visit\n   * @param {string} space   The amount of indenting for this node\n   * @return {string}        The (HTML-quoted) text of the node\n   */\n  public visitTextNode(node: TextNode, _space: string): string {\n    return this.quoteHTML(node.getText());\n  }\n\n  /**\n   * @param {XMLNode} node  The XML node to visit\n   * @param {string} space  The amount of indenting for this node\n   * @return {string}       The serialization of the XML node\n   */\n  public visitXMLNode(node: XMLNode, space: string): string {\n    return space + node.getSerializedXML();\n  }\n\n  /**\n   * Visit an inferred mrow, but don't add the inferred row itself (since\n   * it is supposed to be inferred).\n   *\n   * @param {MmlNode} node  The inferred mrow to visit\n   * @param {string} space  The amount of indenting for this node\n   * @return {string}       The serialized contents of the mrow, properly indented\n   */\n  public visitInferredMrowNode(node: MmlNode, space: string): string {\n    let mml = [];\n    for (const child of node.childNodes) {\n      mml.push(this.visitNode(child, space));\n    }\n    return mml.join('\\n');\n  }\n\n  /**\n   * Visit a TeXAtom node. It is turned into a mrow with the appropriate TeX class\n   * indicator.\n   *\n   * @param {MmlNode} node  The TeXAtom to visit.\n   * @param {string} space  The amount of indenting for this node.\n   * @return {string}       The serialized contents of the mrow, properly indented.\n   */\n  public visitTeXAtomNode(node: MmlNode, space: string): string {\n    let children = this.childNodeMml(node, space + '  ', '\\n');\n    let mml = space + '<mrow' + this.getAttributes(node) + '>' +\n      (children.match(/\\S/) ? '\\n' + children + space : '') + '</mrow>';\n    return mml;\n  }\n\n  /**\n   * @param {MmlNode} node    The annotation node to visit\n   * @param {string} space    The number of spaces to use for indentation\n   * @return {string}         The serializied annotation element\n   */\n  public visitAnnotationNode(node: MmlNode, space: string): string {\n    return space + '<annotation' + this.getAttributes(node) + '>'\n      + this.childNodeMml(node, '', '')\n      + '</annotation>';\n  }\n\n  /**\n   * The generic visiting function:\n   *   Make the string version of the open tag, properly indented, with it attributes\n   *   Increate the indentation level\n   *   Add the childnodes\n   *   Add the end tag with proper spacing (empty tags have the close tag following directly)\n   *\n   * @param {MmlNode} node    The node to visit\n   * @param {string} space    The number of spaces to use for indentation\n   * @return {string}         The serialization of the given node\n   */\n  public visitDefault(node: MmlNode, space: string): string {\n    let kind = node.kind;\n    let [nl, endspace] = (node.isToken || node.childNodes.length === 0 ? ['', ''] : ['\\n', space]);\n    const children = this.childNodeMml(node, space + '  ', nl);\n    return space + '<' + kind + this.getAttributes(node) + '>'\n                 + (children.match(/\\S/) ? nl + children + endspace : '')\n                 + '</' + kind + '>';\n  }\n\n  /**\n   * @param {MmlNode} node    The node whose children are to be added\n   * @param {string} space    The spaces to use for indentation\n   * @param {string} nl       The newline character (or empty)\n   * @return {string}         The serializied children\n   */\n  protected childNodeMml(node: MmlNode, space: string, nl: string): string {\n    let mml = '';\n    for (const child of node.childNodes) {\n      mml += this.visitNode(child, space) + nl;\n    }\n    return mml;\n  }\n\n  /**\n   * @param {MmlNode} node  The node whose attributes are to be produced\n   * @return {string}       The attribute list as a string\n   */\n  protected getAttributes(node: MmlNode): string {\n    const attr = [];\n    const defaults = (this.constructor as typeof SerializedMmlVisitor).defaultAttributes[node.kind] || {};\n    const attributes = Object.assign({},\n                                     defaults,\n                                     this.getDataAttributes(node),\n                                     node.attributes.getAllAttributes()\n                                    );\n    const variants = (this.constructor as typeof SerializedMmlVisitor).variants;\n    if (attributes.hasOwnProperty('mathvariant') && variants.hasOwnProperty(attributes.mathvariant)) {\n      attributes.mathvariant = variants[attributes.mathvariant];\n    }\n    for (const name of Object.keys(attributes)) {\n      const value = String(attributes[name]);\n      if (value === undefined) continue;\n      attr.push(name + '=\"' + this.quoteHTML(value) + '\"');\n    }\n    return attr.length ? ' ' + attr.join(' ') : '';\n  }\n\n  /**\n   * Create the list of data-mjx-* attributes\n   *\n   * @param {MmlNode} node        The node whose data list is to be generated\n   * @return {PropertyList}       The final class attribute list\n   */\n  protected getDataAttributes(node: MmlNode): PropertyList {\n    const data = {} as PropertyList;\n    const variant = node.attributes.getExplicit('mathvariant') as string;\n    const variants = (this.constructor as typeof SerializedMmlVisitor).variants;\n    variant && variants.hasOwnProperty(variant) && this.setDataAttribute(data, 'variant', variant);\n    node.getProperty('variantForm') && this.setDataAttribute(data, 'alternate', '1');\n    node.getProperty('pseudoscript') && this.setDataAttribute(data, 'pseudoscript', 'true');\n    node.getProperty('autoOP') === false && this.setDataAttribute(data, 'auto-op', 'false');\n    const texclass = node.getProperty('texClass') as number;\n    if (texclass !== undefined) {\n      let setclass = true;\n      if (texclass === TEXCLASS.OP && node.isKind('mi')) {\n        const name = (node as MmlMi).getText();\n        setclass = !(name.length > 1 && name.match(MmlMi.operatorName));\n      }\n      setclass && this.setDataAttribute(data, 'texclass', texclass < 0 ? 'NONE' : TEXCLASSNAMES[texclass]);\n    }\n    node.getProperty('scriptlevel') && node.getProperty('useHeight') === false &&\n      this.setDataAttribute(data, 'smallmatrix', 'true');\n    return data;\n  }\n\n  /**\n   * @param {PropertyList} data  The class attribute list\n   * @param {string} name    The name for the data-mjx-name attribute\n   * @param {string} value   The value of the attribute\n   */\n  protected setDataAttribute(data: PropertyList, name: string, value: string) {\n    data[DATAMJX + name] = value;\n  }\n\n  /**\n   *  Convert HTML special characters to entities (&amp;, &lt;, &gt;, &quot;)\n   *  Convert multi-character Unicode characters to entities\n   *  Convert non-ASCII characters to entities.\n   *\n   * @param {string} value  The string to be made HTML escaped\n   * @return {string}       The string with escaping performed\n   */\n  protected quoteHTML(value: string): string {\n    return value\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;').replace(/>/g, '&gt;')\n      .replace(/\\\"/g, '&quot;')\n      .replace(/[\\uD800-\\uDBFF]./g, toEntity)\n      .replace(/[\\u0080-\\uD7FF\\uE000-\\uFFFF]/g, toEntity);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}