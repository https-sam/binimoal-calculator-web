{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar TexError = function () {\n  function TexError(id, message) {\n    var rest = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      rest[_i - 2] = arguments[_i];\n    }\n\n    this.id = id;\n    this.message = TexError.processString(message, rest);\n  }\n\n  TexError.processString = function (str, args) {\n    var parts = str.split(TexError.pattern);\n\n    for (var i = 1, m = parts.length; i < m; i += 2) {\n      var c = parts[i].charAt(0);\n\n      if (c >= '0' && c <= '9') {\n        parts[i] = args[parseInt(parts[i], 10) - 1];\n\n        if (typeof parts[i] === 'number') {\n          parts[i] = parts[i].toString();\n        }\n      } else if (c === '{') {\n        c = parts[i].substr(1);\n\n        if (c >= '0' && c <= '9') {\n          parts[i] = args[parseInt(parts[i].substr(1, parts[i].length - 2), 10) - 1];\n\n          if (typeof parts[i] === 'number') {\n            parts[i] = parts[i].toString();\n          }\n        } else {\n          var match = parts[i].match(/^\\{([a-z]+):%(\\d+)\\|(.*)\\}$/);\n\n          if (match) {\n            parts[i] = '%' + parts[i];\n          }\n        }\n      }\n\n      if (parts[i] == null) {\n        parts[i] = '???';\n      }\n    }\n\n    return parts.join('');\n  };\n\n  TexError.pattern = /%(\\d+|\\{\\d+\\}|\\{[a-z]+:\\%\\d+(?:\\|(?:%\\{\\d+\\}|%.|[^\\}])*)+\\}|.)/g;\n  return TexError;\n}();\n\nexports.default = TexError;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/input/tex/TexError.ts"],"names":[],"mappings":";;;;;;AAyBA,IAAA,QAAA,GAAA,YAAA;AAuDE,WAAA,QAAA,CAAmB,EAAnB,EAA+B,OAA/B,EAA8C;AAAE,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAA7B,SAAA,EAAA,GAAA,EAAA;AACjB,SAAK,OAAL,GAAe,QAAQ,CAAC,aAAT,CAAuB,OAAvB,EAAgC,IAAhC,CAAf;AACD;;AAxCc,EAAA,QAAA,CAAA,aAAA,GAAf,UAA6B,GAA7B,EAA0C,IAA1C,EAAwD;AACtD,QAAI,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,QAAQ,CAAC,OAAnB,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,GAAG,CAAtC,EAAyC,CAAC,IAAI,CAA9C,EAAiD;AAC/C,UAAI,CAAC,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,CAAgB,CAAhB,CAAR;;AAEA,UAAI,CAAC,IAAI,GAAL,IAAY,CAAC,IAAI,GAArB,EAA0B;AACxB,QAAA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,CAA1B,CAAf;;AACA,YAAI,OAAO,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAxB,EAAkC;AAChC,UAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAL,CAAS,QAAT,EAAX;AACD;AACF,OALD,MAKO,IAAI,CAAC,KAAK,GAAV,EAAe;AACpB,QAAA,CAAC,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,CAAgB,CAAhB,CAAJ;;AACA,YAAI,CAAC,IAAI,GAAL,IAAY,CAAC,IAAI,GAArB,EAA0B;AACxB,UAAA,KAAK,CAAC,CAAD,CAAL,GAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,CAAgB,CAAhB,EAAmB,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,GAAkB,CAArC,CAAD,EAA0C,EAA1C,CAAR,GAAwD,CAAzD,CAAf;;AACA,cAAI,OAAO,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAxB,EAAkC;AAChC,YAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAK,CAAC,CAAD,CAAL,CAAS,QAAT,EAAX;AACD;AACF,SALD,MAKO;AACL,cAAI,KAAK,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,KAAT,CAAe,6BAAf,CAAZ;;AACA,cAAI,KAAJ,EAAW;AAET,YAAA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,KAAK,CAAC,CAAD,CAAtB;AACD;AACF;AACF;;AACD,UAAI,KAAK,CAAC,CAAD,CAAL,IAAY,IAAhB,EAAsB;AACpB,QAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAX;AACD;AACF;;AACD,WAAO,KAAK,CAAC,IAAN,CAAW,EAAX,CAAP;AACD,GA9Bc;;AAfA,EAAA,QAAA,CAAA,OAAA,GACb,iEADa;AAyDjB,SAAA,QAAA;AAAC,CA3DD,EAAA;;kBAAqB,Q","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2009-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Error class for the TeX parser.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nexport default class TexError {\n\n  private static pattern =\n    /%(\\d+|\\{\\d+\\}|\\{[a-z]+:\\%\\d+(?:\\|(?:%\\{\\d+\\}|%.|[^\\}])*)+\\}|.)/g;\n\n  /**\n   * Default error message.\n   * @type {string}\n   */\n  public message: string;\n\n  /**\n   * The old MathJax processing function.\n   * @param {string} str The basic error message.\n   * @param {string[]} args The arguments to be replaced in the error message.\n   * @return {string} The processed error string.\n   */\n  private static processString(str: string, args: string[]): string {\n    let parts = str.split(TexError.pattern);\n    for (let i = 1, m = parts.length; i < m; i += 2) {\n      let c = parts[i].charAt(0);  // first char will be { or \\d or a char to be\n                                   // kept literally\n      if (c >= '0' && c <= '9') {    // %n\n        parts[i] = args[parseInt(parts[i], 10) - 1];\n        if (typeof parts[i] === 'number') {\n          parts[i] = parts[i].toString();\n        }\n      } else if (c === '{') {        // %{n} or %{plural:%n|...}\n        c = parts[i].substr(1);\n        if (c >= '0' && c <= '9') {  // %{n}\n          parts[i] = args[parseInt(parts[i].substr(1, parts[i].length - 2), 10) - 1];\n          if (typeof parts[i] === 'number') {\n            parts[i] = parts[i].toString();\n          }\n        } else {                     // %{plural:%n|...}\n          let match = parts[i].match(/^\\{([a-z]+):%(\\d+)\\|(.*)\\}$/);\n          if (match) {\n            // Removed plural here.\n            parts[i] = '%' + parts[i];\n          }\n        }\n      }\n      if (parts[i] == null) {\n        parts[i] = '???';\n      }\n    }\n    return parts.join('');\n  }\n\n  /**\n   * @constructor\n   * @param{string} id        message id (for localization)\n   * @param{string} message   text of English message\n   * @param{string[]=} rest   any substitution arguments\n   */\n  constructor(public id: string, message: string, ...rest: string[]) {\n    this.message = TexError.processString(message, rest);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}