{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractInputJax = void 0;\n\nvar Options_js_1 = require(\"../util/Options.js\");\n\nvar FunctionList_js_1 = require(\"../util/FunctionList.js\");\n\nvar AbstractInputJax = function () {\n  function AbstractInputJax(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.adaptor = null;\n    this.mmlFactory = null;\n    var CLASS = this.constructor;\n    this.options = Options_js_1.userOptions(Options_js_1.defaultOptions({}, CLASS.OPTIONS), options);\n    this.preFilters = new FunctionList_js_1.FunctionList();\n    this.postFilters = new FunctionList_js_1.FunctionList();\n  }\n\n  Object.defineProperty(AbstractInputJax.prototype, \"name\", {\n    get: function () {\n      return this.constructor.NAME;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractInputJax.prototype.setAdaptor = function (adaptor) {\n    this.adaptor = adaptor;\n  };\n\n  AbstractInputJax.prototype.setMmlFactory = function (mmlFactory) {\n    this.mmlFactory = mmlFactory;\n  };\n\n  AbstractInputJax.prototype.initialize = function () {};\n\n  AbstractInputJax.prototype.reset = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n  };\n\n  Object.defineProperty(AbstractInputJax.prototype, \"processStrings\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractInputJax.prototype.findMath = function (_node, _options) {\n    return [];\n  };\n\n  AbstractInputJax.prototype.executeFilters = function (filters, math, document, data) {\n    var args = {\n      math: math,\n      document: document,\n      data: data\n    };\n    filters.execute(args);\n    return args.data;\n  };\n\n  AbstractInputJax.NAME = 'generic';\n  AbstractInputJax.OPTIONS = {};\n  return AbstractInputJax;\n}();\n\nexports.AbstractInputJax = AbstractInputJax;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/core/InputJax.ts"],"names":[],"mappings":";;;;;;;AA2BA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AA8FA,IAAA,gBAAA,GAAA,YAAA;AAyCE,WAAA,gBAAA,CAAY,OAAZ,EAAoC;AAAxB,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAwB;;AAX7B,SAAA,OAAA,GAA+B,IAA/B;AAIA,SAAA,UAAA,GAAyB,IAAzB;AAQL,QAAI,KAAK,GAAG,KAAK,WAAjB;AACA,SAAK,OAAL,GAAe,YAAA,CAAA,WAAA,CAAY,YAAA,CAAA,cAAA,CAAe,EAAf,EAAmB,KAAK,CAAC,OAAzB,CAAZ,EAA+C,OAA/C,CAAf;AACA,SAAK,UAAL,GAAkB,IAAI,iBAAA,CAAA,YAAJ,EAAlB;AACA,SAAK,WAAL,GAAmB,IAAI,iBAAA,CAAA,YAAJ,EAAnB;AACD;;AAKD,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,YAAA;AACE,aAAQ,KAAK,WAAL,CAA6C,IAArD;AACD,KAFc;qBAAA;;AAAA,GAAf;;AAOO,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAA8C;AAC5C,SAAK,OAAL,GAAe,OAAf;AACD,GAFM;;AAOA,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,UAArB,EAA2C;AACzC,SAAK,UAAL,GAAkB,UAAlB;AACD,GAFM;;AAOA,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA,CACC,CADM;;AAMA,EAAA,gBAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AAAa,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAe;AAAf,MAAA,KAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;AACZ,GADM;;AAMP,EAAA,MAAA,CAAA,cAAA,CAAW,gBAAA,CAAA,SAAX,EAAW,gBAAX,EAAyB;SAAzB,YAAA;AACE,aAAO,IAAP;AACD,KAFwB;qBAAA;;AAAA,GAAzB;;AAOO,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,KAAhB,EAAqC,QAArC,EAA0D;AACxD,WAAO,EAAP;AACD,GAFM;;AAmBG,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAV,UACE,OADF,EACyB,IADzB,EAEE,QAFF,EAEmC,IAFnC,EAE4C;AAE1C,QAAI,IAAI,GAAG;AAAC,MAAA,IAAI,EAAE,IAAP;AAAa,MAAA,QAAQ,EAAE,QAAvB;AAAiC,MAAA,IAAI,EAAE;AAAvC,KAAX;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,IAAhB;AACA,WAAO,IAAI,CAAC,IAAZ;AACD,GAPS;;AAzGI,EAAA,gBAAA,CAAA,IAAA,GAAe,SAAf;AAKA,EAAA,gBAAA,CAAA,OAAA,GAAsB,EAAtB;AA6GhB,SAAA,gBAAA;AAAC,CAvHD,EAAA;;AAAsB,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for the InputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument} from './MathDocument.js';\nimport {MathItem, ProtoItem} from './MathItem.js';\nimport {MmlNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from './MmlTree/MmlFactory.js';\nimport {userOptions, defaultOptions, OptionList} from '../util/Options.js';\nimport {FunctionList} from '../util/FunctionList.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n *  The InputJax interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface InputJax<N, T, D> {\n  /**\n   * The name of the input jax subclass (e.g,. 'TeX')\n   */\n  name: string;\n\n  /**\n   * Whether this input jax processes string arrays or DOM nodes\n   * (TeX and AsciiMath process strings, MathML processes DOM nodes)\n   */\n  processStrings: boolean;\n\n  /**\n   * The options for this input jax instance\n   */\n  options: OptionList;\n\n  /**\n   * Lists of pre- and post-filters to call before and after processing the input\n   */\n  preFilters: FunctionList;\n  postFilters: FunctionList;\n\n  /**\n   * The DOM adaptor for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory for this input jax\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {DOMAdaptor} adaptor The adaptor to use in this jax\n   */\n  setAdaptor(adaptor: DOMAdaptor<N, T, D>): void;\n\n  /**\n   * @param {MmlFactory} mmlFactory The MmlFactory to use in this jax\n   */\n  setMmlFactory(mmlFactory: MmlFactory): void;\n\n  /**\n   * Do any initialization that depends on the document being set up\n   */\n  initialize(): void;\n\n  /**\n   * Reset any needed features of the input jax\n   *\n   * @param {any[]} args   The arguments needed by the reset operation\n   */\n  reset(...args: any[]): void;\n\n  /**\n   * Finds the math within the DOM or the list of strings\n   *\n   * @param {N | string[]} which   The element or array of strings to be searched for math\n   * @param {OptionList} options   The options for the search, if any\n   * @return {ProtoItem[]}         Array of proto math items found (further processed by the\n   *                                handler to produce actual MathItem objects)\n   */\n  findMath(which: N | string[], options?: OptionList): ProtoItem<N, T>[];\n\n  /**\n   * Convert the math in a math item into the internal format\n   *\n   * @param {MathItem} math  The MathItem whose math content is to processed\n   * @param {MathDocument} document The MathDocument for this input jax.\n   * @return {MmlNode}       The resulting internal node tree for the math\n   */\n  compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n}\n\n/*****************************************************************/\n/**\n *  The abstract InputJax class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractInputJax<N, T, D> implements InputJax<N, T, D> {\n\n  /**\n   * The name of the input jax\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The default options for the input jax\n   */\n  public static OPTIONS: OptionList = {};\n\n  /**\n   * The actual options supplied to the input jax\n   */\n  public options: OptionList;\n\n  /**\n   * Filters to run on the TeX string before it is processed\n   */\n  public preFilters: FunctionList;\n\n  /**\n   * Filters to run on the generated MathML after the TeX string is processed\n   */\n  public postFilters: FunctionList;\n\n  /**\n   * The DOMAdaptor for the MathDocument for this input jax\n   */\n  public adaptor: DOMAdaptor<N, T, D> = null;  // set by the handler\n  /**\n   * The MathML node factory\n   */\n  public mmlFactory: MmlFactory = null;        // set by the handler\n\n  /**\n   * @param {OptionList} options  The options to apply to this input jax\n   *\n   * @constructor\n   */\n  constructor(options: OptionList = {}) {\n    let CLASS = this.constructor as typeof AbstractInputJax;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.preFilters = new FunctionList();\n    this.postFilters = new FunctionList();\n  }\n\n  /**\n   * @return {string}  The name of this input jax class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractInputJax).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    this.adaptor = adaptor;\n  }\n\n  /**\n   * @override\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    this.mmlFactory = mmlFactory;\n  }\n\n  /**\n   * @override\n   */\n  public initialize() {\n  }\n\n  /**\n   * @override\n   */\n  public reset(..._args: any[]) {\n  }\n\n  /**\n   * @return {boolean}  True means find math in string array, false means in DOM element\n   */\n  public get processStrings(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_node: N | string[], _options?: OptionList) {\n    return [] as ProtoItem<N, T>[];\n  }\n\n  /**\n   * @override\n   */\n  public abstract compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n\n  /**\n   * Execute a set of filters, passing them the MathItem and any needed data,\n   *  and return the (possibly modified) data\n   *\n   * @param {FunctionList} filters   The list of functions to be performed\n   * @param {MathItem} math          The math item that is being processed\n   * @param {MathDocument} document  The math document containg the math item\n   * @param {any} data               Whatever other data is needed\n   * @return {any}                   The (possibly modified) data\n   */\n  protected executeFilters(\n    filters: FunctionList, math: MathItem<N, T, D>,\n    document: MathDocument<N, T, D>, data: any\n  ): any {\n    let args = {math: math, document: document, data: data};\n    filters.execute(args);\n    return args.data;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}