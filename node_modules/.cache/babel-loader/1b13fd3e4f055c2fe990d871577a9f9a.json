{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiteList = void 0;\n\nvar LiteList = function () {\n  function LiteList(children) {\n    this.nodes = [];\n    this.nodes = __spreadArray([], __read(children));\n  }\n\n  LiteList.prototype.append = function (node) {\n    this.nodes.push(node);\n  };\n\n  LiteList.prototype[Symbol.iterator] = function () {\n    var i = 0;\n    return {\n      next: function () {\n        return i === this.nodes.length ? {\n          value: null,\n          done: true\n        } : {\n          value: this.nodes[i++],\n          done: false\n        };\n      }\n    };\n  };\n\n  return LiteList;\n}();\n\nexports.LiteList = LiteList;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/adaptors/lite/List.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,IAAA,QAAA,GAAA,YAAA;AAUE,WAAA,QAAA,CAAY,QAAZ,EAAyB;AANlB,SAAA,KAAA,GAAa,EAAb;AAOL,SAAK,KAAL,GAAU,aAAA,CAAA,EAAA,EAAA,MAAA,CAAO,QAAP,CAAA,CAAV;AACD;;AAKM,EAAA,QAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,IAAd,EAAqB;AACnB,SAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACD,GAFM;;AAOA,EAAA,QAAA,CAAA,SAAA,CAAC,MAAM,CAAC,QAAR,IAAP,YAAA;AACE,QAAI,CAAC,GAAG,CAAR;AACA,WAAO;AAIL,MAAA,IAAI,EAAJ,YAAA;AACE,eAAQ,CAAC,KAAK,KAAK,KAAL,CAAW,MAAjB,GACA;AAAC,UAAA,KAAK,EAAE,IAAR;AAAc,UAAA,IAAI,EAAE;AAApB,SADA,GAEA;AAAC,UAAA,KAAK,EAAE,KAAK,KAAL,CAAW,CAAC,EAAZ,CAAR;AAAyB,UAAA,IAAI,EAAE;AAA/B,SAFR;AAGD;AARI,KAAP;AAUD,GAZM;;AAcT,SAAA,QAAA;AAAC,CAtCD,EAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a lightweight DOM adaptor\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {LiteNode} from './Element.js';\n\n/************************************************************/\n/**\n * Implements a lightweight DocumentFragment or NodeList replacement\n *\n * @template N  The HTMLElement node class\n */\nexport class LiteList<N> {\n  /**\n   * The nodes held in the fragment\n   */\n  public nodes: N[] = [];\n\n  /**\n   * @param {N[]} children  The children for the fragment\n   * @constructor\n   */\n  constructor(children: N[]) {\n    this.nodes = [...children];\n  }\n\n  /**\n   * @param {N} node  A node to append to the fragment\n   */\n  public append(node: N) {\n    this.nodes.push(node);\n  }\n\n  /**\n   * Make this class iterable (so it can be used with Array.from())\n   */\n  public [Symbol.iterator](): Iterator<LiteNode> {\n    let i = 0;\n    return {\n      /**\n       * @return {IteratorResult<LiteNode>}\n       */\n      next(): IteratorResult<LiteNode> {\n        return (i === this.nodes.length ?\n                {value: null, done: true} :\n                {value: this.nodes[i++], done: false});\n      }\n    };\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}