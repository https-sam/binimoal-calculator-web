{"ast":null,"code":"/*************************************************************\n *\n *  Copyright (c) 2019-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\nconst path = eval(\"require('path')\"); // use actual node version, not webpack's version\n\n/*\n * Load the needed MathJax components\n */\n\nrequire('../startup/lib/startup.js');\n\nconst {\n  Loader,\n  CONFIG\n} = require('../../../js/components/loader.js');\n\nconst {\n  combineDefaults,\n  combineConfig\n} = require('../../../js/components/global.js');\n\nconst {\n  dependencies,\n  paths,\n  provides\n} = require('../dependencies.js');\n/*\n * Set up the initial configuration\n */\n\n\ncombineDefaults(MathJax.config, 'loader', {\n  require: eval('require'),\n  // use node's require() to load files\n  failed: err => {\n    throw err;\n  } // pass on error message to init()'s catch function\n\n});\ncombineDefaults(MathJax.config.loader, 'dependencies', dependencies);\ncombineDefaults(MathJax.config.loader, 'paths', paths);\ncombineDefaults(MathJax.config.loader, 'provides', provides);\n/*\n * Preload core and liteDOM adaptor (needed for node)\n */\n\nLoader.preLoad('loader', 'startup', 'core', 'adaptors/liteDOM');\n\nrequire('../core/core.js');\n\nrequire('../adaptors/liteDOM/liteDOM.js');\n/*\n * Set the mathjax root path to the location where node-main.js was loaded from,\n * using the actual node __dirname, not the webpack one, and removing\n * the directory if we are loaded from components/src/node-main.\n */\n\n\nconst dir = CONFIG.paths.mathjax = eval('__dirname');\n\nif (path.basename(dir) === 'node-main') {\n  CONFIG.paths.mathjax = path.dirname(dir);\n  combineDefaults(CONFIG, 'source', require('../source.js').source); //\n  //  Set the asynchronous loader to use the js directory, so we can load\n  //  other files like entity definitions\n  //\n\n  const ROOT = path.resolve(dir, '../../../js');\n  const REQUIRE = MathJax.config.loader.require;\n\n  MathJax._.mathjax.mathjax.asyncLoad = function (name) {\n    return REQUIRE(name.charAt(0) === '.' ? path.resolve(ROOT, name) : name);\n  };\n}\n/*\n * The initialization function.  Use as:\n *\n *   require('mathjax').init({ ... }).then((MathJax) => { ... });\n *\n * where the argument to init() is a MathJax configuration (what would be set as MathJax = {...}).\n * The init() function returns a promise that is resolved when MathJax is loaded and ready, and that\n * is passed the MathJax global variable when it is called.\n */\n\n\nconst init = function () {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  combineConfig(MathJax.config, config);\n  return Loader.load(...CONFIG.load).then(() => CONFIG.ready()).then(() => MathJax) // Pass MathJax global as argument to subsequent .then() calls\n  .catch(error => CONFIG.failed(error));\n};\n/*\n * Export the init() function\n */\n\n\nexport { init };","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/components/src/node-main/node-main.js"],"names":["path","eval","require","Loader","CONFIG","combineDefaults","combineConfig","dependencies","paths","provides","MathJax","config","failed","err","loader","preLoad","dir","mathjax","basename","dirname","source","ROOT","resolve","REQUIRE","_","asyncLoad","name","charAt","init","load","then","ready","catch","error"],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2019-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nconst path = eval(\"require('path')\");  // use actual node version, not webpack's version\n\n/*\n * Load the needed MathJax components\n */\nrequire('../startup/lib/startup.js');\nconst {Loader, CONFIG} = require('../../../js/components/loader.js');\nconst {combineDefaults, combineConfig} = require('../../../js/components/global.js');\nconst {dependencies, paths, provides} = require('../dependencies.js');\n\n/*\n * Set up the initial configuration\n */\ncombineDefaults(MathJax.config, 'loader', {\n  require: eval('require'),      // use node's require() to load files\n  failed: (err) => {throw err}   // pass on error message to init()'s catch function\n});\ncombineDefaults(MathJax.config.loader, 'dependencies', dependencies);\ncombineDefaults(MathJax.config.loader, 'paths', paths);\ncombineDefaults(MathJax.config.loader, 'provides', provides);\n\n/*\n * Preload core and liteDOM adaptor (needed for node)\n */\nLoader.preLoad('loader', 'startup', 'core', 'adaptors/liteDOM');\nrequire('../core/core.js');\nrequire('../adaptors/liteDOM/liteDOM.js');\n\n/*\n * Set the mathjax root path to the location where node-main.js was loaded from,\n * using the actual node __dirname, not the webpack one, and removing\n * the directory if we are loaded from components/src/node-main.\n */\nconst dir = CONFIG.paths.mathjax = eval('__dirname');\nif (path.basename(dir) === 'node-main') {\n  CONFIG.paths.mathjax = path.dirname(dir);\n  combineDefaults(CONFIG, 'source', require('../source.js').source);\n  //\n  //  Set the asynchronous loader to use the js directory, so we can load\n  //  other files like entity definitions\n  //\n  const ROOT = path.resolve(dir, '../../../js');\n  const REQUIRE = MathJax.config.loader.require;\n  MathJax._.mathjax.mathjax.asyncLoad = function (name) {\n    return REQUIRE(name.charAt(0) === '.' ? path.resolve(ROOT, name) : name);\n  };\n}\n\n\n/*\n * The initialization function.  Use as:\n *\n *   require('mathjax').init({ ... }).then((MathJax) => { ... });\n *\n * where the argument to init() is a MathJax configuration (what would be set as MathJax = {...}).\n * The init() function returns a promise that is resolved when MathJax is loaded and ready, and that\n * is passed the MathJax global variable when it is called.\n */\nconst init = (config = {}) => {\n  combineConfig(MathJax.config, config);\n  return Loader.load(...CONFIG.load)\n    .then(() => CONFIG.ready())\n    .then(() => MathJax)                    // Pass MathJax global as argument to subsequent .then() calls\n    .catch(error => CONFIG.failed(error));\n}\n\n/*\n * Export the init() function\n */\nexport {init};\n"]},"metadata":{},"sourceType":"module"}