{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonWrapper = void 0;\n\nvar Wrapper_js_1 = require(\"../../core/Tree/Wrapper.js\");\n\nvar MmlNode_js_1 = require(\"../../core/MmlTree/MmlNode.js\");\n\nvar string_js_1 = require(\"../../util/string.js\");\n\nvar LENGTHS = require(\"../../util/lengths.js\");\n\nvar Styles_js_1 = require(\"../../util/Styles.js\");\n\nvar BBox_js_1 = require(\"../../util/BBox.js\");\n\nvar FontData_js_1 = require(\"./FontData.js\");\n\nvar SMALLSIZE = 2 / 18;\n\nfunction MathMLSpace(script, size) {\n  return script ? size < SMALLSIZE ? 0 : SMALLSIZE : size;\n}\n\nvar CommonWrapper = function (_super) {\n  __extends(CommonWrapper, _super);\n\n  function CommonWrapper(factory, node, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    var _this = _super.call(this, factory, node) || this;\n\n    _this.parent = null;\n    _this.removedStyles = null;\n    _this.styles = null;\n    _this.variant = '';\n    _this.bboxComputed = false;\n    _this.stretch = FontData_js_1.NOSTRETCH;\n    _this.font = null;\n    _this.parent = parent;\n    _this.font = factory.jax.font;\n    _this.bbox = BBox_js_1.BBox.zero();\n\n    _this.getStyles();\n\n    _this.getVariant();\n\n    _this.getScale();\n\n    _this.getSpace();\n\n    _this.childNodes = node.childNodes.map(function (child) {\n      var wrapped = _this.wrap(child);\n\n      if (wrapped.bbox.pwidth && (node.notParent || node.isKind('math'))) {\n        _this.bbox.pwidth = BBox_js_1.BBox.fullWidth;\n      }\n\n      return wrapped;\n    });\n    return _this;\n  }\n\n  Object.defineProperty(CommonWrapper.prototype, \"jax\", {\n    get: function () {\n      return this.factory.jax;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CommonWrapper.prototype, \"adaptor\", {\n    get: function () {\n      return this.factory.jax.adaptor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CommonWrapper.prototype, \"metrics\", {\n    get: function () {\n      return this.factory.jax.math.metrics;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CommonWrapper.prototype, \"fixesPWidth\", {\n    get: function () {\n      return !this.node.notParent && !this.node.isToken;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CommonWrapper.prototype.wrap = function (node, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    var wrapped = this.factory.wrap(node, parent || this);\n\n    if (parent) {\n      parent.childNodes.push(wrapped);\n    }\n\n    this.jax.nodeMap.set(node, wrapped);\n    return wrapped;\n  };\n\n  CommonWrapper.prototype.getBBox = function (save) {\n    if (save === void 0) {\n      save = true;\n    }\n\n    if (this.bboxComputed) {\n      return this.bbox;\n    }\n\n    var bbox = save ? this.bbox : BBox_js_1.BBox.zero();\n    this.computeBBox(bbox);\n    this.bboxComputed = save;\n    return bbox;\n  };\n\n  CommonWrapper.prototype.computeBBox = function (bbox, recompute) {\n    var e_1, _a;\n\n    if (recompute === void 0) {\n      recompute = false;\n    }\n\n    bbox.empty();\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        bbox.append(child.getBBox());\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    bbox.clean();\n\n    if (this.fixesPWidth && this.setChildPWidths(recompute)) {\n      this.computeBBox(bbox, true);\n    }\n  };\n\n  CommonWrapper.prototype.setChildPWidths = function (recompute, w, clear) {\n    var e_2, _a;\n\n    if (w === void 0) {\n      w = null;\n    }\n\n    if (clear === void 0) {\n      clear = true;\n    }\n\n    if (recompute) {\n      return false;\n    }\n\n    if (clear) {\n      this.bbox.pwidth = '';\n    }\n\n    var changed = false;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        var cbox = child.getBBox();\n\n        if (cbox.pwidth && child.setChildPWidths(recompute, w === null ? cbox.w : w, clear)) {\n          changed = true;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return changed;\n  };\n\n  CommonWrapper.prototype.invalidateBBox = function () {\n    if (this.bboxComputed) {\n      this.bboxComputed = false;\n\n      if (this.parent) {\n        this.parent.invalidateBBox();\n      }\n    }\n  };\n\n  CommonWrapper.prototype.copySkewIC = function (bbox) {\n    var first = this.childNodes[0];\n\n    if (first === null || first === void 0 ? void 0 : first.bbox.sk) {\n      bbox.sk = first.bbox.sk;\n    }\n\n    if (first === null || first === void 0 ? void 0 : first.bbox.dx) {\n      bbox.dx = first.bbox.dx;\n    }\n\n    var last = this.childNodes[this.childNodes.length - 1];\n\n    if (last === null || last === void 0 ? void 0 : last.bbox.ic) {\n      bbox.ic = last.bbox.ic;\n      bbox.w += bbox.ic;\n    }\n  };\n\n  CommonWrapper.prototype.getStyles = function () {\n    var styleString = this.node.attributes.getExplicit('style');\n    if (!styleString) return;\n    var style = this.styles = new Styles_js_1.Styles(styleString);\n\n    for (var i = 0, m = CommonWrapper.removeStyles.length; i < m; i++) {\n      var id = CommonWrapper.removeStyles[i];\n\n      if (style.get(id)) {\n        if (!this.removedStyles) this.removedStyles = {};\n        this.removedStyles[id] = style.get(id);\n        style.set(id, '');\n      }\n    }\n  };\n\n  CommonWrapper.prototype.getVariant = function () {\n    if (!this.node.isToken) return;\n    var attributes = this.node.attributes;\n    var variant = attributes.get('mathvariant');\n\n    if (!attributes.getExplicit('mathvariant')) {\n      var values = attributes.getList('fontfamily', 'fontweight', 'fontstyle');\n\n      if (this.removedStyles) {\n        var style = this.removedStyles;\n        if (style.fontFamily) values.family = style.fontFamily;\n        if (style.fontWeight) values.weight = style.fontWeight;\n        if (style.fontStyle) values.style = style.fontStyle;\n      }\n\n      if (values.fontfamily) values.family = values.fontfamily;\n      if (values.fontweight) values.weight = values.fontweight;\n      if (values.fontstyle) values.style = values.fontstyle;\n\n      if (values.weight && values.weight.match(/^\\d+$/)) {\n        values.weight = parseInt(values.weight) > 600 ? 'bold' : 'normal';\n      }\n\n      if (values.family) {\n        variant = this.explicitVariant(values.family, values.weight, values.style);\n      } else {\n        if (this.node.getProperty('variantForm')) variant = '-tex-variant';\n        variant = (CommonWrapper.BOLDVARIANTS[values.weight] || {})[variant] || variant;\n        variant = (CommonWrapper.ITALICVARIANTS[values.style] || {})[variant] || variant;\n      }\n    }\n\n    this.variant = variant;\n  };\n\n  CommonWrapper.prototype.explicitVariant = function (fontFamily, fontWeight, fontStyle) {\n    var style = this.styles;\n    if (!style) style = this.styles = new Styles_js_1.Styles();\n    style.set('fontFamily', fontFamily);\n    if (fontWeight) style.set('fontWeight', fontWeight);\n    if (fontStyle) style.set('fontStyle', fontStyle);\n    return '-explicitFont';\n  };\n\n  CommonWrapper.prototype.getScale = function () {\n    var scale = 1,\n        parent = this.parent;\n    var pscale = parent ? parent.bbox.scale : 1;\n    var attributes = this.node.attributes;\n    var scriptlevel = Math.min(attributes.get('scriptlevel'), 2);\n    var fontsize = attributes.get('fontsize');\n    var mathsize = this.node.isToken || this.node.isKind('mstyle') ? attributes.get('mathsize') : attributes.getInherited('mathsize');\n\n    if (scriptlevel !== 0) {\n      scale = Math.pow(attributes.get('scriptsizemultiplier'), scriptlevel);\n      var scriptminsize = this.length2em(attributes.get('scriptminsize'), .8, 1);\n      if (scale < scriptminsize) scale = scriptminsize;\n    }\n\n    if (this.removedStyles && this.removedStyles.fontSize && !fontsize) {\n      fontsize = this.removedStyles.fontSize;\n    }\n\n    if (fontsize && !attributes.getExplicit('mathsize')) {\n      mathsize = fontsize;\n    }\n\n    if (mathsize !== '1') {\n      scale *= this.length2em(mathsize, 1, 1);\n    }\n\n    this.bbox.scale = scale;\n    this.bbox.rscale = scale / pscale;\n  };\n\n  CommonWrapper.prototype.getSpace = function () {\n    var isTop = this.isTopEmbellished();\n    var hasSpacing = this.node.hasSpacingAttributes();\n\n    if (this.jax.options.mathmlSpacing || hasSpacing) {\n      isTop && this.getMathMLSpacing();\n    } else {\n      this.getTeXSpacing(isTop, hasSpacing);\n    }\n  };\n\n  CommonWrapper.prototype.getMathMLSpacing = function () {\n    var node = this.node.coreMO();\n    var child = node.coreParent();\n    var parent = child.parent;\n    if (!parent || !parent.isKind('mrow') || parent.childNodes.length === 1) return;\n    var attributes = node.attributes;\n    var isScript = attributes.get('scriptlevel') > 0;\n    this.bbox.L = attributes.isSet('lspace') ? Math.max(0, this.length2em(attributes.get('lspace'))) : MathMLSpace(isScript, node.lspace);\n    this.bbox.R = attributes.isSet('rspace') ? Math.max(0, this.length2em(attributes.get('rspace'))) : MathMLSpace(isScript, node.rspace);\n    var n = parent.childIndex(child);\n    if (n === 0) return;\n    var prev = parent.childNodes[n - 1];\n    if (!prev.isEmbellished) return;\n    var bbox = this.jax.nodeMap.get(prev).getBBox();\n\n    if (bbox.R) {\n      this.bbox.L = Math.max(0, this.bbox.L - bbox.R);\n    }\n  };\n\n  CommonWrapper.prototype.getTeXSpacing = function (isTop, hasSpacing) {\n    if (!hasSpacing) {\n      var space = this.node.texSpacing();\n\n      if (space) {\n        this.bbox.L = this.length2em(space);\n      }\n    }\n\n    if (isTop || hasSpacing) {\n      var attributes = this.node.coreMO().attributes;\n\n      if (attributes.isSet('lspace')) {\n        this.bbox.L = Math.max(0, this.length2em(attributes.get('lspace')));\n      }\n\n      if (attributes.isSet('rspace')) {\n        this.bbox.R = Math.max(0, this.length2em(attributes.get('rspace')));\n      }\n    }\n  };\n\n  CommonWrapper.prototype.isTopEmbellished = function () {\n    return this.node.isEmbellished && !(this.node.parent && this.node.parent.isEmbellished);\n  };\n\n  CommonWrapper.prototype.core = function () {\n    return this.jax.nodeMap.get(this.node.core());\n  };\n\n  CommonWrapper.prototype.coreMO = function () {\n    return this.jax.nodeMap.get(this.node.coreMO());\n  };\n\n  CommonWrapper.prototype.getText = function () {\n    var e_3, _a;\n\n    var text = '';\n\n    if (this.node.isToken) {\n      try {\n        for (var _b = __values(this.node.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n\n          if (child instanceof MmlNode_js_1.TextNode) {\n            text += child.getText();\n          }\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n\n    return text;\n  };\n\n  CommonWrapper.prototype.canStretch = function (direction) {\n    this.stretch = FontData_js_1.NOSTRETCH;\n\n    if (this.node.isEmbellished) {\n      var core = this.core();\n\n      if (core && core.node !== this.node) {\n        if (core.canStretch(direction)) {\n          this.stretch = core.stretch;\n        }\n      }\n    }\n\n    return this.stretch.dir !== 0;\n  };\n\n  CommonWrapper.prototype.getAlignShift = function () {\n    var _a;\n\n    var _b = (_a = this.node.attributes).getList.apply(_a, __spreadArray([], __read(MmlNode_js_1.indentAttributes))),\n        indentalign = _b.indentalign,\n        indentshift = _b.indentshift,\n        indentalignfirst = _b.indentalignfirst,\n        indentshiftfirst = _b.indentshiftfirst;\n\n    if (indentalignfirst !== 'indentalign') {\n      indentalign = indentalignfirst;\n    }\n\n    if (indentalign === 'auto') {\n      indentalign = this.jax.options.displayAlign;\n    }\n\n    if (indentshiftfirst !== 'indentshift') {\n      indentshift = indentshiftfirst;\n    }\n\n    if (indentshift === 'auto') {\n      indentshift = this.jax.options.displayIndent;\n\n      if (indentalign === 'right' && !indentshift.match(/^\\s*0[a-z]*\\s*$/)) {\n        indentshift = ('-' + indentshift.trim()).replace(/^--/, '');\n      }\n    }\n\n    var shift = this.length2em(indentshift, this.metrics.containerWidth);\n    return [indentalign, shift];\n  };\n\n  CommonWrapper.prototype.getAlignX = function (W, bbox, align) {\n    return align === 'right' ? W - (bbox.w + bbox.R) * bbox.rscale : align === 'left' ? bbox.L * bbox.rscale : (W - bbox.w * bbox.rscale) / 2;\n  };\n\n  CommonWrapper.prototype.getAlignY = function (H, D, h, d, align) {\n    return align === 'top' ? H - h : align === 'bottom' ? d - D : align === 'center' ? (H - h - (D - d)) / 2 : 0;\n  };\n\n  CommonWrapper.prototype.getWrapWidth = function (i) {\n    return this.childNodes[i].getBBox().w;\n  };\n\n  CommonWrapper.prototype.getChildAlign = function (_i) {\n    return 'left';\n  };\n\n  CommonWrapper.prototype.percent = function (m) {\n    return LENGTHS.percent(m);\n  };\n\n  CommonWrapper.prototype.em = function (m) {\n    return LENGTHS.em(m);\n  };\n\n  CommonWrapper.prototype.px = function (m, M) {\n    if (M === void 0) {\n      M = -LENGTHS.BIGDIMEN;\n    }\n\n    return LENGTHS.px(m, M, this.metrics.em);\n  };\n\n  CommonWrapper.prototype.length2em = function (length, size, scale) {\n    if (size === void 0) {\n      size = 1;\n    }\n\n    if (scale === void 0) {\n      scale = null;\n    }\n\n    if (scale === null) {\n      scale = this.bbox.scale;\n    }\n\n    return LENGTHS.length2em(length, size, scale, this.jax.pxPerEm);\n  };\n\n  CommonWrapper.prototype.unicodeChars = function (text, name) {\n    if (name === void 0) {\n      name = this.variant;\n    }\n\n    var chars = string_js_1.unicodeChars(text);\n    var variant = this.font.getVariant(name);\n\n    if (variant && variant.chars) {\n      var map_1 = variant.chars;\n      chars = chars.map(function (n) {\n        return ((map_1[n] || [])[3] || {}).smp || n;\n      });\n    }\n\n    return chars;\n  };\n\n  CommonWrapper.prototype.remapChars = function (chars) {\n    return chars;\n  };\n\n  CommonWrapper.prototype.mmlText = function (text) {\n    return this.node.factory.create('text').setText(text);\n  };\n\n  CommonWrapper.prototype.mmlNode = function (kind, properties, children) {\n    if (properties === void 0) {\n      properties = {};\n    }\n\n    if (children === void 0) {\n      children = [];\n    }\n\n    return this.node.factory.create(kind, properties, children);\n  };\n\n  CommonWrapper.prototype.createMo = function (text) {\n    var mmlFactory = this.node.factory;\n    var textNode = mmlFactory.create('text').setText(text);\n    var mml = mmlFactory.create('mo', {\n      stretchy: true\n    }, [textNode]);\n    mml.inheritAttributesFrom(this.node);\n    var node = this.wrap(mml);\n    node.parent = this;\n    return node;\n  };\n\n  CommonWrapper.prototype.getVariantChar = function (variant, n) {\n    var char = this.font.getChar(variant, n) || [0, 0, 0, {\n      unknown: true\n    }];\n\n    if (char.length === 3) {\n      char[3] = {};\n    }\n\n    return char;\n  };\n\n  CommonWrapper.kind = 'unknown';\n  CommonWrapper.styles = {};\n  CommonWrapper.removeStyles = ['fontSize', 'fontFamily', 'fontWeight', 'fontStyle', 'fontVariant', 'font'];\n  CommonWrapper.skipAttributes = {\n    fontfamily: true,\n    fontsize: true,\n    fontweight: true,\n    fontstyle: true,\n    color: true,\n    background: true,\n    'class': true,\n    href: true,\n    style: true,\n    xmlns: true\n  };\n  CommonWrapper.BOLDVARIANTS = {\n    bold: {\n      normal: 'bold',\n      italic: 'bold-italic',\n      fraktur: 'bold-fraktur',\n      script: 'bold-script',\n      'sans-serif': 'bold-sans-serif',\n      'sans-serif-italic': 'sans-serif-bold-italic'\n    },\n    normal: {\n      bold: 'normal',\n      'bold-italic': 'italic',\n      'bold-fraktur': 'fraktur',\n      'bold-script': 'script',\n      'bold-sans-serif': 'sans-serif',\n      'sans-serif-bold-italic': 'sans-serif-italic'\n    }\n  };\n  CommonWrapper.ITALICVARIANTS = {\n    italic: {\n      normal: 'italic',\n      bold: 'bold-italic',\n      'sans-serif': 'sans-serif-italic',\n      'bold-sans-serif': 'sans-serif-bold-italic'\n    },\n    normal: {\n      italic: 'normal',\n      'bold-italic': 'bold',\n      'sans-serif-italic': 'sans-serif',\n      'sans-serif-bold-italic': 'bold-sans-serif'\n    }\n  };\n  return CommonWrapper;\n}(Wrapper_js_1.AbstractWrapper);\n\nexports.CommonWrapper = CommonWrapper;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/output/common/Wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonWrapper class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractWrapper, WrapperClass} from '../../core/Tree/Wrapper.js';\nimport {PropertyList} from '../../core/Tree/Node.js';\nimport {MmlNode, TextNode, AbstractMmlNode, indentAttributes} from '../../core/MmlTree/MmlNode.js';\nimport {MmlMo} from '../../core/MmlTree/MmlNodes/mo.js';\nimport {Property} from '../../core/Tree/Node.js';\nimport {unicodeChars} from '../../util/string.js';\nimport * as LENGTHS from '../../util/lengths.js';\nimport {Styles} from '../../util/Styles.js';\nimport {StyleList} from '../../util/StyleList.js';\nimport {CommonOutputJax} from './OutputJax.js';\nimport {CommonWrapperFactory} from './WrapperFactory.js';\nimport {BBox} from '../../util/BBox.js';\nimport {FontData, DelimiterData, CharData, CharOptions, DIRECTION, NOSTRETCH} from './FontData.js';\n\n/*****************************************************************/\n\n/**\n * Shorthand for a dictionary object (an object of key:value pairs)\n */\nexport type StringMap = {[key: string]: string};\n\n/**\n * MathML spacing rules\n */\n/* tslint:disable-next-line:whitespace */\nconst SMALLSIZE = 2/18;\n\n/**\n * @param {boolean} script   The scriptlevel\n * @param {number} size      The space size\n * @return {number}          The size clamped to SMALLSIZE when scriptlevel > 0\n */\nfunction MathMLSpace(script: boolean, size: number): number {\n  return (script ? size < SMALLSIZE ? 0 : SMALLSIZE : size);\n}\n\nexport type Constructor<T> = new(...args: any[]) => T;\n\n/**\n * Shorthands for wrappers and their constructors\n */\nexport type AnyWrapper = CommonWrapper<any, any, any, any, any, any>;\nexport type AnyWrapperClass = CommonWrapperClass<any, any, any, any, any, any>;\nexport type WrapperConstructor = Constructor<AnyWrapper>;\n\n/*********************************************************/\n/**\n *  The CommonWrapper class interface\n *\n * @template J  The OutputJax type\n * @template W  The Wrapper type\n * @template C  The WrapperClass type\n * @template CC The CharOptions type\n * @template FD The FontData type\n */\nexport interface CommonWrapperClass<\n  J extends CommonOutputJax<any, any, any, W, CommonWrapperFactory<J, W, C, CC, DD, FD>, FD, any>,\n  W extends CommonWrapper<J, W, C, CC, DD, FD>,\n  C extends CommonWrapperClass<J, W, C, CC, DD, FD>,\n  CC extends CharOptions,\n  DD extends DelimiterData,\n  FD extends FontData<CC, any, DD>\n> extends WrapperClass<MmlNode, CommonWrapper<J, W, C, CC, DD, FD>> {\n  /**\n   * @override\n   */\n  new(factory: CommonWrapperFactory<J, W, C, CC, DD, FD>, node: MmlNode, ...args: any[]): W;\n}\n\n/*****************************************************************/\n/**\n *  The base CommonWrapper class\n *\n * @template J  The OutputJax type\n * @template W  The Wrapper type\n * @template C  The WrapperClass type\n * @template CC The CharOptions type\n * @template FD The FontData type\n */\nexport class CommonWrapper<\n  J extends CommonOutputJax<any, any, any, W, CommonWrapperFactory<J, W, C, CC, DD, FD>, FD, any>,\n  W extends CommonWrapper<J, W, C, CC, DD, FD>,\n  C extends CommonWrapperClass<J, W, C, CC, DD, FD>,\n  CC extends CharOptions,\n  DD extends DelimiterData,\n  FD extends FontData<CC, any, DD>\n> extends AbstractWrapper<MmlNode, CommonWrapper<J, W, C, CC, DD, FD>> {\n\n  /**\n   * The wrapper kind\n   */\n  public static kind: string = 'unknown';\n\n  /**\n   * Any styles needed for the class\n   */\n  public static styles: StyleList = {};\n\n  /**\n   * Styles that should not be passed on from style attribute\n   */\n  public static removeStyles: string[] = [\n    'fontSize', 'fontFamily', 'fontWeight',\n    'fontStyle', 'fontVariant', 'font'\n  ];\n\n  /**\n   * Non-MathML attributes on MathML elements NOT to be copied to the\n   * corresponding DOM elements.  If set to false, then the attribute\n   * WILL be copied.  Most of these (like the font attributes) are handled\n   * in other ways.\n   */\n  public static skipAttributes: {[name: string]: boolean} = {\n    fontfamily: true, fontsize: true, fontweight: true, fontstyle: true,\n    color: true, background: true,\n    'class': true, href: true, style: true,\n    xmlns: true\n  };\n\n  /**\n   * The translation of mathvariant to bold styles, or to remove\n   * bold from a mathvariant.\n   */\n  public static BOLDVARIANTS: {[name: string]: StringMap} =  {\n    bold: {\n      normal: 'bold',\n      italic: 'bold-italic',\n      fraktur: 'bold-fraktur',\n      script: 'bold-script',\n      'sans-serif': 'bold-sans-serif',\n      'sans-serif-italic': 'sans-serif-bold-italic'\n    },\n    normal: {\n      bold: 'normal',\n      'bold-italic': 'italic',\n      'bold-fraktur': 'fraktur',\n      'bold-script': 'script',\n      'bold-sans-serif': 'sans-serif',\n      'sans-serif-bold-italic': 'sans-serif-italic'\n    }\n  };\n\n  /**\n   * The translation of mathvariant to italic styles, or to remove\n   * italic from a mathvariant.\n   */\n  public static ITALICVARIANTS: {[name: string]: StringMap} = {\n    italic: {\n      normal: 'italic',\n      bold: 'bold-italic',\n      'sans-serif': 'sans-serif-italic',\n      'bold-sans-serif': 'sans-serif-bold-italic'\n    },\n    normal: {\n      italic: 'normal',\n      'bold-italic': 'bold',\n      'sans-serif-italic': 'sans-serif',\n      'sans-serif-bold-italic': 'bold-sans-serif'\n    }\n  };\n\n  /**\n   * The factory used to create more wrappers\n   */\n  protected factory: CommonWrapperFactory<J, W, C, CC, DD, FD>;\n\n  /**\n   * The parent of this node\n   */\n  public parent: W = null;\n\n  /**\n   * The children of this node\n   */\n  public childNodes: W[];\n\n  /**\n   * Styles that must be handled directly by the wrappers (mostly having to do with fonts)\n   */\n  protected removedStyles: StringMap = null;\n\n  /**\n   * The explicit styles set by the node\n   */\n  protected styles: Styles = null;\n\n  /**\n   * The mathvariant for this node\n   */\n  public variant: string = '';\n\n  /**\n   * The bounding box for this node\n   */\n  public bbox: BBox;\n  /**\n   * Whether the bounding box has been computed yet\n   */\n  protected bboxComputed: boolean = false;\n\n  /**\n   * Delimiter data for stretching this node (NOSTRETCH means not yet determined)\n   */\n  public stretch: DD = NOSTRETCH as DD;\n\n  /**\n   * Easy access to the font parameters\n   */\n  public font: FD = null;\n\n  /**\n   * Easy access to the output jax for this node\n   */\n  get jax() {\n    return this.factory.jax;\n  }\n\n  /**\n   * Easy access to the DOMAdaptor object\n   */\n  get adaptor() {\n    return this.factory.jax.adaptor;\n  }\n\n  /**\n   * Easy access to the metric data for this node\n   */\n  get metrics() {\n    return this.factory.jax.math.metrics;\n  }\n\n  /**\n   * True if children with percentage widths should be resolved by this container\n   */\n  get fixesPWidth() {\n    return !this.node.notParent && !this.node.isToken;\n  }\n\n  /*******************************************************************/\n\n  /**\n   * @override\n   */\n  constructor(factory: CommonWrapperFactory<J, W, C, CC, DD, FD>, node: MmlNode, parent: W = null) {\n    super(factory, node);\n    this.parent = parent;\n    this.font = factory.jax.font;\n    this.bbox = BBox.zero();\n    this.getStyles();\n    this.getVariant();\n    this.getScale();\n    this.getSpace();\n    this.childNodes = node.childNodes.map((child: MmlNode) => {\n      const wrapped = this.wrap(child);\n      if (wrapped.bbox.pwidth && (node.notParent || node.isKind('math'))) {\n        this.bbox.pwidth = BBox.fullWidth;\n      }\n      return wrapped;\n    });\n  }\n\n  /**\n   * @param {MmlNode} node  The node to the wrapped\n   * @param {W} parent  The wrapped parent node\n   * @return {W}  The newly wrapped node\n   */\n  public wrap(node: MmlNode, parent: W = null): W {\n    const wrapped = this.factory.wrap(node, parent || this);\n    if (parent) {\n      parent.childNodes.push(wrapped);\n    }\n    this.jax.nodeMap.set(node, wrapped);\n    return wrapped;\n  }\n\n  /*******************************************************************/\n  /**\n   * Return the wrapped node's bounding box, either the cached one, if it exists,\n   *   or computed directly if not.\n   *\n   * @param {boolean} save  Whether to cache the bbox or not (used for stretchy elements)\n   * @return {BBox}  The computed bounding box\n   */\n  public getBBox(save: boolean = true): BBox {\n    if (this.bboxComputed) {\n      return this.bbox;\n    }\n    const bbox = (save ? this.bbox : BBox.zero());\n    this.computeBBox(bbox);\n    this.bboxComputed = save;\n    return bbox;\n  }\n\n  /**\n   * @param {BBox} bbox           The bounding box to modify (either this.bbox, or an empty one)\n   * @param {boolean} recompute   True if we are recomputing due to changes in children that have percentage widths\n   */\n  protected computeBBox(bbox: BBox, recompute: boolean = false) {\n    bbox.empty();\n    for (const child of this.childNodes) {\n      bbox.append(child.getBBox());\n    }\n    bbox.clean();\n    if (this.fixesPWidth && this.setChildPWidths(recompute)) {\n      this.computeBBox(bbox, true);\n    }\n  }\n\n  /**\n   * Recursively resolve any percentage widths in the child nodes using the given\n   *   container width (or the child width, if none was passed).\n   *   Overriden for mtables in order to compute the width.\n   *\n   * @param {boolean} recompute  True if we are recomputing due to changes in children\n   * @param {(number|null)=} w   The width of the container (from which percentages are computed)\n   * @param {boolean=} clear     True if pwidth marker is to be cleared\n   * @return {boolean}           True if a percentage width was found\n   */\n  public setChildPWidths(recompute: boolean, w: (number | null) = null, clear: boolean = true): boolean {\n    if (recompute) {\n      return false;\n    }\n    if (clear) {\n      this.bbox.pwidth = '';\n    }\n    let changed = false;\n    for (const child of this.childNodes) {\n      const cbox = child.getBBox();\n      if (cbox.pwidth && child.setChildPWidths(recompute, w === null ? cbox.w : w, clear)) {\n        changed = true;\n      }\n    }\n    return changed;\n  }\n\n  /**\n   * Mark BBox to be computed again (e.g., when an mo has stretched)\n   */\n  public invalidateBBox() {\n    if (this.bboxComputed) {\n      this.bboxComputed = false;\n      if (this.parent) {\n        this.parent.invalidateBBox();\n      }\n    }\n  }\n\n  /**\n   * Copy child skew and italic correction\n   *\n   * @param {BBox} bbox  The bounding box to modify\n   */\n  protected copySkewIC(bbox: BBox) {\n    const first = this.childNodes[0];\n    if (first?.bbox.sk) {\n      bbox.sk = first.bbox.sk;\n    }\n    if (first?.bbox.dx) {\n      bbox.dx = first.bbox.dx;\n    }\n    const last = this.childNodes[this.childNodes.length - 1];\n    if (last?.bbox.ic) {\n      bbox.ic = last.bbox.ic;\n      bbox.w += bbox.ic;\n    }\n  }\n\n  /*******************************************************************/\n\n  /**\n   * Add the style attribute, but remove any font-related styles\n   *   (since these are handled separately by the variant)\n   */\n  protected getStyles() {\n    const styleString = this.node.attributes.getExplicit('style') as string;\n    if (!styleString) return;\n    const style = this.styles = new Styles(styleString);\n    for (let i = 0, m = CommonWrapper.removeStyles.length; i < m; i++) {\n      const id = CommonWrapper.removeStyles[i];\n      if (style.get(id)) {\n        if (!this.removedStyles) this.removedStyles = {};\n        this.removedStyles[id] = style.get(id);\n        style.set(id, '');\n      }\n    }\n  }\n\n  /**\n   * Get the mathvariant (or construct one, if needed).\n   */\n  protected getVariant() {\n    if (!this.node.isToken) return;\n    const attributes = this.node.attributes;\n    let variant = attributes.get('mathvariant') as string;\n    if (!attributes.getExplicit('mathvariant')) {\n      const values = attributes.getList('fontfamily', 'fontweight', 'fontstyle') as StringMap;\n      if (this.removedStyles) {\n        const style = this.removedStyles;\n        if (style.fontFamily) values.family = style.fontFamily;\n        if (style.fontWeight) values.weight = style.fontWeight;\n        if (style.fontStyle)  values.style  = style.fontStyle;\n      }\n      if (values.fontfamily) values.family = values.fontfamily;\n      if (values.fontweight) values.weight = values.fontweight;\n      if (values.fontstyle)  values.style  = values.fontstyle;\n      if (values.weight && values.weight.match(/^\\d+$/)) {\n        values.weight = (parseInt(values.weight) > 600 ? 'bold' : 'normal');\n      }\n      if (values.family) {\n        variant = this.explicitVariant(values.family, values.weight, values.style);\n      } else {\n        if (this.node.getProperty('variantForm')) variant = '-tex-variant';\n        variant = (CommonWrapper.BOLDVARIANTS[values.weight] || {})[variant] || variant;\n        variant = (CommonWrapper.ITALICVARIANTS[values.style] || {})[variant] || variant;\n      }\n    }\n    this.variant = variant;\n  }\n\n  /**\n   * Set the CSS for a token element having an explicit font (rather than regular mathvariant).\n   *\n   * @param {string} fontFamily  The font family to use\n   * @param {string} fontWeight  The font weight to use\n   * @param {string} fontStyle   The font style to use\n   */\n  protected explicitVariant(fontFamily: string, fontWeight: string, fontStyle: string) {\n    let style = this.styles;\n    if (!style) style = this.styles = new Styles();\n    style.set('fontFamily', fontFamily);\n    if (fontWeight) style.set('fontWeight', fontWeight);\n    if (fontStyle)  style.set('fontStyle', fontStyle);\n    return '-explicitFont';\n  }\n\n  /**\n   * Determine the scaling factor to use for this wrapped node, and set the styles for it.\n   */\n  protected getScale() {\n    let scale = 1, parent = this.parent;\n    let pscale = (parent ? parent.bbox.scale : 1);\n    let attributes = this.node.attributes;\n    let scriptlevel = Math.min(attributes.get('scriptlevel') as number, 2);\n    let fontsize = attributes.get('fontsize');\n    let mathsize = (this.node.isToken || this.node.isKind('mstyle') ?\n                    attributes.get('mathsize') : attributes.getInherited('mathsize'));\n    //\n    // If scriptsize is non-zero, set scale based on scriptsizemultiplier\n    //\n    if (scriptlevel !== 0) {\n      scale = Math.pow(attributes.get('scriptsizemultiplier') as number, scriptlevel);\n      let scriptminsize = this.length2em(attributes.get('scriptminsize'), .8, 1);\n      if (scale < scriptminsize) scale = scriptminsize;\n    }\n    //\n    // If there is style=\"font-size:...\", and not fontsize attribute, use that as fontsize\n    //\n    if (this.removedStyles && this.removedStyles.fontSize && !fontsize) {\n      fontsize = this.removedStyles.fontSize;\n    }\n    //\n    // If there is a fontsize and no mathsize attribute, is that\n    //\n    if (fontsize && !attributes.getExplicit('mathsize')) {\n      mathsize = fontsize;\n    }\n    //\n    //  Incorporate the mathsize, if any\n    //\n    if (mathsize !== '1') {\n      scale *= this.length2em(mathsize, 1, 1);\n    }\n    //\n    // Record the scaling factors and set the element's CSS\n    //\n    this.bbox.scale = scale;\n    this.bbox.rscale = scale / pscale;\n  }\n\n  /**\n   * Sets the spacing based on TeX or MathML algorithm\n   */\n  protected getSpace() {\n    const isTop = this.isTopEmbellished();\n    const hasSpacing = this.node.hasSpacingAttributes();\n    if (this.jax.options.mathmlSpacing || hasSpacing) {\n      isTop && this.getMathMLSpacing();\n    } else {\n      this.getTeXSpacing(isTop, hasSpacing);\n    }\n  }\n\n  /**\n   * Get the spacing using MathML rules based on the core MO\n   */\n  protected getMathMLSpacing() {\n    const node = this.node.coreMO() as MmlMo;\n    //\n    // If the mo is not within a multi-node mrow, don't add space\n    //\n    const child = node.coreParent();\n    const parent = child.parent;\n    if (!parent || !parent.isKind('mrow') || parent.childNodes.length === 1) return;\n    //\n    // Get the lspace and rspace\n    //\n    const attributes = node.attributes;\n    const isScript = (attributes.get('scriptlevel') > 0);\n    this.bbox.L = (attributes.isSet('lspace') ?\n                   Math.max(0, this.length2em(attributes.get('lspace'))) :\n                   MathMLSpace(isScript, node.lspace));\n    this.bbox.R = (attributes.isSet('rspace') ?\n                   Math.max(0, this.length2em(attributes.get('rspace'))) :\n                   MathMLSpace(isScript, node.rspace));\n    //\n    // If there are two adjacent <mo>, use enough left space to make it\n    //   the maximum of the rspace of the first and lspace of the second\n    //\n    const n = parent.childIndex(child);\n    if (n === 0) return;\n    const prev = parent.childNodes[n - 1] as AbstractMmlNode;\n    if (!prev.isEmbellished) return;\n    const bbox = this.jax.nodeMap.get(prev).getBBox();\n    if (bbox.R) {\n      this.bbox.L = Math.max(0, this.bbox.L - bbox.R);\n    }\n  }\n\n  /**\n   * Get the spacing using the TeX rules\n   *\n   * @parm {boolean} isTop       True when this is a top-level embellished operator\n   * @parm {boolean} hasSpacing  True when there is an explicit or inherited 'form' attribute\n   */\n  protected getTeXSpacing(isTop: boolean, hasSpacing: boolean) {\n    if (!hasSpacing) {\n      const space = this.node.texSpacing();\n      if (space) {\n        this.bbox.L = this.length2em(space);\n      }\n    }\n    if (isTop || hasSpacing) {\n      const attributes = this.node.coreMO().attributes;\n      if (attributes.isSet('lspace')) {\n        this.bbox.L = Math.max(0, this.length2em(attributes.get('lspace')));\n      }\n      if (attributes.isSet('rspace')) {\n        this.bbox.R = Math.max(0, this.length2em(attributes.get('rspace')));\n      }\n    }\n  }\n\n  /**\n   * @return {boolean}   True if this is the top-most container of an embellished operator that is\n   *                       itself an embellished operator (the maximal embellished operator for its core)\n   */\n  protected isTopEmbellished(): boolean {\n    return (this.node.isEmbellished &&\n            !(this.node.parent && this.node.parent.isEmbellished));\n  }\n\n  /*******************************************************************/\n\n  /**\n   * @return {CommonWrapper}  The wrapper for this node's core node\n   */\n  public core(): CommonWrapper<J, W, C, CC, DD, FD> {\n    return this.jax.nodeMap.get(this.node.core());\n  }\n\n  /**\n   * @return {CommonWrapper}  The wrapper for this node's core <mo> node\n   */\n  public coreMO(): CommonWrapper<J, W, C, CC, DD, FD> {\n    return this.jax.nodeMap.get(this.node.coreMO());\n  }\n\n  /**\n   * @return {string}  For a token node, the combined text content of the node's children\n   */\n  public getText(): string {\n    let text = '';\n    if (this.node.isToken) {\n      for (const child of this.node.childNodes) {\n        if (child instanceof TextNode) {\n          text += child.getText();\n        }\n      }\n    }\n    return text;\n  }\n\n  /**\n   * @param {DIRECTION} direction  The direction to stretch this node\n   * @return {boolean}             Whether the node can stretch in that direction\n   */\n  public canStretch(direction: DIRECTION): boolean {\n    this.stretch = NOSTRETCH as DD;\n    if (this.node.isEmbellished) {\n      let core = this.core();\n      if (core && core.node !== this.node) {\n        if (core.canStretch(direction)) {\n          this.stretch = core.stretch;\n        }\n      }\n    }\n    return this.stretch.dir !== DIRECTION.None;\n  }\n\n  /**\n   * @return {[string, number]}  The alignment and indentation shift for the expression\n   */\n  protected getAlignShift(): [string, number] {\n    let {indentalign, indentshift, indentalignfirst, indentshiftfirst} =\n      this.node.attributes.getList(...indentAttributes) as StringMap;\n    if (indentalignfirst !== 'indentalign') {\n      indentalign = indentalignfirst;\n    }\n    if (indentalign === 'auto') {\n      indentalign = this.jax.options.displayAlign;\n    }\n    if (indentshiftfirst !== 'indentshift') {\n      indentshift = indentshiftfirst;\n    }\n    if (indentshift === 'auto') {\n      indentshift = this.jax.options.displayIndent;\n      if (indentalign === 'right' && !indentshift.match(/^\\s*0[a-z]*\\s*$/)) {\n        indentshift = ('-' + indentshift.trim()).replace(/^--/, '');\n      }\n    }\n    const shift = this.length2em(indentshift, this.metrics.containerWidth);\n    return [indentalign, shift] as [string, number];\n  }\n\n  /**\n   * @param {number} W       The total width\n   * @param {BBox} bbox      The bbox to be aligned\n   * @param {string} align   How to align (left, center, right)\n   * @return {number}        The x position of the aligned width\n   */\n  protected getAlignX(W: number, bbox: BBox, align: string): number {\n    return (align === 'right' ? W - (bbox.w + bbox.R) * bbox.rscale :\n            align === 'left' ? bbox.L * bbox.rscale :\n            (W - bbox.w * bbox.rscale) / 2);\n  }\n\n  /**\n   * @param {number} H        The total height\n   * @param {number} D        The total depth\n   * @param {number} h        The height to be aligned\n   * @param {number} d        The depth to be aligned\n   * @param {string} align    How to align (top, bottom, center, axis, baseline)\n   * @return {number}         The y position of the aligned baseline\n   */\n  protected getAlignY(H: number, D: number, h: number, d: number, align: string): number {\n    return (align === 'top' ? H - h :\n            align === 'bottom' ? d - D :\n            align === 'center' ? ((H - h) - (D - d)) / 2 :\n            0); // baseline and axis\n  }\n\n  /**\n   * @param {number} i   The index of the child element whose container is needed\n   * @return {number}    The inner width as a container (for percentage widths)\n   */\n  public getWrapWidth(i: number): number {\n    return this.childNodes[i].getBBox().w;\n  }\n\n  /**\n   * @param {number} i   The index of the child element whose container is needed\n   * @return {string}    The alignment child element\n   */\n  public getChildAlign(_i: number): string {\n    return 'left';\n  }\n\n  /*******************************************************************/\n  /*\n   * Easy access to some utility routines\n   */\n\n  /**\n   * @param {number} m  A number to be shown as a percent\n   * @return {string}  The number m as a percent\n   */\n  protected percent(m: number): string {\n    return LENGTHS.percent(m);\n  }\n\n  /**\n   * @param {number} m  A number to be shown in ems\n   * @return {string}  The number with units of ems\n   */\n  protected em(m: number): string {\n    return LENGTHS.em(m);\n  }\n\n  /**\n   * @param {number} m   A number of em's to be shown as pixels\n   * @param {number} M   The minimum number of pixels to allow\n   * @return {string}  The number with units of px\n   */\n  protected px(m: number, M: number = -LENGTHS.BIGDIMEN): string {\n    return LENGTHS.px(m, M, this.metrics.em);\n  }\n\n  /**\n   * @param {Property} length  A dimension (giving number and units) or number to be converted to ems\n   * @param {number} size  The default size of the dimension (for percentage values)\n   * @param {number} scale  The current scaling factor (to handle absolute units)\n   * @return {number}  The dimension converted to ems\n   */\n  protected length2em(length: Property, size: number = 1, scale: number = null): number {\n    if (scale === null) {\n      scale = this.bbox.scale;\n    }\n    return LENGTHS.length2em(length as string, size, scale, this.jax.pxPerEm);\n  }\n\n  /**\n   * @param {string} text   The text to turn into unicode locations\n   * @param {string} name   The name of the variant for the characters\n   * @return {number[]}     Array of numbers represeting the string's unicode character positions\n   */\n  protected unicodeChars(text: string, name: string = this.variant): number[] {\n    let chars = unicodeChars(text);\n    //\n    //  Remap to Math Alphanumerics block\n    //\n    const variant = this.font.getVariant(name);\n    if (variant && variant.chars) {\n      const map = variant.chars;\n      //\n      //  Is map[n] doesn't exist, (map[n] || []) still gives an CharData array.\n      //  If the array doesn't have a CharOptions element use {} instead.\n      //  Then check if the options has an smp property, which gives\n      //    the Math Alphabet mapping for this character.\n      //  Otherwise use the original code point, n.\n      //\n      chars = chars.map((n) => ((map[n] || [])[3] || {}).smp || n);\n    }\n    return chars;\n  }\n\n  /**\n   * @param {number[]} chars    The array of unicode character numbers to remap\n   * @return {number[]}         The converted array\n   */\n  public remapChars(chars: number[]): number[] {\n    return chars;\n  }\n\n  /**\n   * @param {string} text   The text from which to create a TextNode object\n   * @return {TextNode}     The TextNode with the given text\n   */\n  public mmlText(text: string): TextNode {\n    return ((this.node as AbstractMmlNode).factory.create('text') as TextNode).setText(text);\n  }\n\n  /**\n   * @param {string} kind             The kind of MmlNode to create\n   * @param {ProperyList} properties  The properties to set initially\n   * @param {MmlNode[]} children      The child nodes to add to the created node\n   * @return {MmlNode}                The newly created MmlNode\n   */\n  public mmlNode(kind: string, properties: PropertyList = {}, children: MmlNode[] = []): MmlNode {\n    return (this.node as AbstractMmlNode).factory.create(kind, properties, children);\n  }\n\n  /**\n   * Create an mo wrapper with the given text,\n   *   link it in, and give it the right defaults.\n   *\n   * @param {string} text     The text for the wrapped element\n   * @return {CommonWrapper}  The wrapped MmlMo node\n   */\n  protected createMo(text: string): CommonWrapper<J, W, C, CC, DD, FD> {\n    const mmlFactory = (this.node as AbstractMmlNode).factory;\n    const textNode = (mmlFactory.create('text') as TextNode).setText(text);\n    const mml = mmlFactory.create('mo', {stretchy: true}, [textNode]);\n    mml.inheritAttributesFrom(this.node);\n    const node = this.wrap(mml);\n    node.parent = this as any as W;\n    return node;\n  }\n\n  /**\n   * @param {string} variant   The variant in which to look for the character\n   * @param {number} n         The number of the character to look up\n   * @return {CharData}        The full CharData object, with CharOptions guaranteed to be defined\n   */\n  protected getVariantChar(variant: string, n: number): CharData<CC> {\n    const char = this.font.getChar(variant, n) || [0, 0, 0, {unknown: true} as CC];\n    if (char.length === 3) {\n      (char as any)[3] = {};\n    }\n    return char as [number, number, number, CC];\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}