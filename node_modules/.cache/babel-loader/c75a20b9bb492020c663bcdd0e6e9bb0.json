{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMoMixin = exports.DirectionVH = void 0;\n\nvar BBox_js_1 = require(\"../../../util/BBox.js\");\n\nvar string_js_1 = require(\"../../../util/string.js\");\n\nvar FontData_js_1 = require(\"../FontData.js\");\n\nexports.DirectionVH = (_a = {}, _a[1] = 'v', _a[2] = 'h', _a);\n\nfunction CommonMoMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var _this = _super.apply(this, __spreadArray([], __read(args))) || this;\n\n      _this.size = null;\n      _this.isAccent = _this.node.isAccent;\n      return _this;\n    }\n\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n\n      this.protoBBox(bbox);\n\n      if (this.node.attributes.get('symmetric') && this.stretch.dir !== 2) {\n        var d = this.getCenterOffset(bbox);\n        bbox.h += d;\n        bbox.d -= d;\n      }\n\n      if (this.node.getProperty('mathaccent') && (this.stretch.dir === 0 || this.size >= 0)) {\n        bbox.w = 0;\n      }\n    };\n\n    class_1.prototype.protoBBox = function (bbox) {\n      var stretchy = this.stretch.dir !== 0;\n\n      if (stretchy && this.size === null) {\n        this.getStretchedVariant([0]);\n      }\n\n      if (stretchy && this.size < 0) return;\n\n      _super.prototype.computeBBox.call(this, bbox);\n\n      this.copySkewIC(bbox);\n    };\n\n    class_1.prototype.getAccentOffset = function () {\n      var bbox = BBox_js_1.BBox.empty();\n      this.protoBBox(bbox);\n      return -bbox.w / 2;\n    };\n\n    class_1.prototype.getCenterOffset = function (bbox) {\n      if (bbox === void 0) {\n        bbox = null;\n      }\n\n      if (!bbox) {\n        bbox = BBox_js_1.BBox.empty();\n\n        _super.prototype.computeBBox.call(this, bbox);\n      }\n\n      return (bbox.h + bbox.d) / 2 + this.font.params.axis_height - bbox.h;\n    };\n\n    class_1.prototype.getVariant = function () {\n      if (this.node.attributes.get('largeop')) {\n        this.variant = this.node.attributes.get('displaystyle') ? '-largeop' : '-smallop';\n        return;\n      }\n\n      if (!this.node.attributes.getExplicit('mathvariant') && this.node.getProperty('pseudoscript') === false) {\n        this.variant = '-tex-variant';\n        return;\n      }\n\n      _super.prototype.getVariant.call(this);\n    };\n\n    class_1.prototype.canStretch = function (direction) {\n      if (this.stretch.dir !== 0) {\n        return this.stretch.dir === direction;\n      }\n\n      var attributes = this.node.attributes;\n      if (!attributes.get('stretchy')) return false;\n      var c = this.getText();\n      if (Array.from(c).length !== 1) return false;\n      var delim = this.font.getDelimiter(c.codePointAt(0));\n      this.stretch = delim && delim.dir === direction ? delim : FontData_js_1.NOSTRETCH;\n      return this.stretch.dir !== 0;\n    };\n\n    class_1.prototype.getStretchedVariant = function (WH, exact) {\n      var e_1, _a;\n\n      if (exact === void 0) {\n        exact = false;\n      }\n\n      if (this.stretch.dir !== 0) {\n        var D = this.getWH(WH);\n        var min = this.getSize('minsize', 0);\n        var max = this.getSize('maxsize', Infinity);\n        var mathaccent = this.node.getProperty('mathaccent');\n        D = Math.max(min, Math.min(max, D));\n        var df = this.font.params.delimiterfactor / 1000;\n        var ds = this.font.params.delimitershortfall;\n        var m = min || exact ? D : mathaccent ? Math.min(D / df, D + ds) : Math.max(D * df, D - ds);\n        var delim = this.stretch;\n        var c = delim.c || this.getText().codePointAt(0);\n        var i = 0;\n\n        if (delim.sizes) {\n          try {\n            for (var _b = __values(delim.sizes), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var d = _c.value;\n\n              if (d >= m) {\n                if (mathaccent && i) {\n                  i--;\n                }\n\n                this.variant = this.font.getSizeVariant(c, i);\n                this.size = i;\n\n                if (delim.schar && delim.schar[i]) {\n                  this.stretch = __assign(__assign({}, this.stretch), {\n                    c: delim.schar[i]\n                  });\n                }\n\n                return;\n              }\n\n              i++;\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        }\n\n        if (delim.stretch) {\n          this.size = -1;\n          this.invalidateBBox();\n          this.getStretchBBox(WH, this.checkExtendedHeight(D, delim), delim);\n        } else {\n          this.variant = this.font.getSizeVariant(c, i - 1);\n          this.size = i - 1;\n        }\n      }\n    };\n\n    class_1.prototype.getSize = function (name, value) {\n      var attributes = this.node.attributes;\n\n      if (attributes.isSet(name)) {\n        value = this.length2em(attributes.get(name), 1, 1);\n      }\n\n      return value;\n    };\n\n    class_1.prototype.getWH = function (WH) {\n      if (WH.length === 0) return 0;\n      if (WH.length === 1) return WH[0];\n\n      var _a = __read(WH, 2),\n          H = _a[0],\n          D = _a[1];\n\n      var a = this.font.params.axis_height;\n      return this.node.attributes.get('symmetric') ? 2 * Math.max(H - a, D + a) : H + D;\n    };\n\n    class_1.prototype.getStretchBBox = function (WHD, D, C) {\n      var _a;\n\n      if (C.hasOwnProperty('min') && C.min > D) {\n        D = C.min;\n      }\n\n      var _b = __read(C.HDW, 3),\n          h = _b[0],\n          d = _b[1],\n          w = _b[2];\n\n      if (this.stretch.dir === 1) {\n        _a = __read(this.getBaseline(WHD, D, C), 2), h = _a[0], d = _a[1];\n      } else {\n        w = D;\n      }\n\n      this.bbox.h = h;\n      this.bbox.d = d;\n      this.bbox.w = w;\n    };\n\n    class_1.prototype.getBaseline = function (WHD, HD, C) {\n      var hasWHD = WHD.length === 2 && WHD[0] + WHD[1] === HD;\n      var symmetric = this.node.attributes.get('symmetric');\n\n      var _a = __read(hasWHD ? WHD : [HD, 0], 2),\n          H = _a[0],\n          D = _a[1];\n\n      var _b = __read([H + D, 0], 2),\n          h = _b[0],\n          d = _b[1];\n\n      if (symmetric) {\n        var a = this.font.params.axis_height;\n\n        if (hasWHD) {\n          h = 2 * Math.max(H - a, D + a);\n        }\n\n        d = h / 2 - a;\n      } else if (hasWHD) {\n        d = D;\n      } else {\n        var _c = __read(C.HDW || [.75, .25], 2),\n            ch = _c[0],\n            cd = _c[1];\n\n        d = cd * (h / (ch + cd));\n      }\n\n      return [h - d, d];\n    };\n\n    class_1.prototype.checkExtendedHeight = function (D, C) {\n      if (C.fullExt) {\n        var _a = __read(C.fullExt, 2),\n            extSize = _a[0],\n            endSize = _a[1];\n\n        var n = Math.ceil(Math.max(0, D - endSize) / extSize);\n        D = endSize + n * extSize;\n      }\n\n      return D;\n    };\n\n    class_1.prototype.remapChars = function (chars) {\n      var primes = this.node.getProperty('primes');\n\n      if (primes) {\n        return string_js_1.unicodeChars(primes);\n      }\n\n      if (chars.length === 1) {\n        var parent_1 = this.node.coreParent().parent;\n        var isAccent = this.isAccent && !parent_1.isKind('mrow');\n        var map = isAccent ? 'accent' : 'mo';\n        var text = this.font.getRemappedChar(map, chars[0]);\n\n        if (text) {\n          chars = this.unicodeChars(text, this.variant);\n        }\n      }\n\n      return chars;\n    };\n\n    return class_1;\n  }(Base);\n}\n\nexports.CommonMoMixin = CommonMoMixin;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/output/common/Wrappers/mo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAMa,OAAA,CAAA,WAAA,IAAW,EAAA,GAAA,EAAA,EACtB,EAAA,CAAA,CAAA,CAAA,GAAsB,GADA,EAEtB,EAAA,CAAA,CAAA,CAAA,GAAwB,GAFF,EAGtB,EAHW;;AAkGb,SAAgB,aAAhB,CAA4D,IAA5D,EAAmE;AAEjE,SAAA,UAAA,MAAA,EAAA;AAAqB,IAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAgBnB,aAAA,OAAA,GAAA;AAAY,UAAA,IAAA,GAAA,EAAA;;WAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,QAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAAZ,UAAA,KAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CACW,IADX,CAAA,CAAA,KACe,IADf;;AAVO,MAAA,KAAA,CAAA,IAAA,GAAe,IAAf;AAYL,MAAA,KAAI,CAAC,QAAL,GAAiB,KAAI,CAAC,IAAL,CAAoB,QAArC;;AACD;;AAKM,IAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,IAAnB,EAA+B,UAA/B,EAA0D;AAA3B,UAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,UAAA,GAAA,KAAA;AAA2B;;AACxD,WAAK,SAAL,CAAe,IAAf;;AACA,UAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,WAAzB,KACA,KAAK,OAAL,CAAa,GAAb,KAAgB,CADpB,EAC+C;AAC7C,YAAM,CAAC,GAAG,KAAK,eAAL,CAAqB,IAArB,CAAV;AACA,QAAA,IAAI,CAAC,CAAL,IAAU,CAAV;AACA,QAAA,IAAI,CAAC,CAAL,IAAU,CAAV;AACD;;AACD,UAAI,KAAK,IAAL,CAAU,WAAV,CAAsB,YAAtB,MACC,KAAK,OAAL,CAAa,GAAb,KAAgB,CAAhB,IAAuC,KAAK,IAAL,IAAa,CADrD,CAAJ,EAC6D;AAC3D,QAAA,IAAI,CAAC,CAAL,GAAS,CAAT;AACD;AACF,KAZM;;AAmBA,IAAA,OAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,IAAjB,EAA2B;AACzB,UAAM,QAAQ,GAAI,KAAK,OAAL,CAAa,GAAb,KAAgB,CAAlC;;AACA,UAAI,QAAQ,IAAI,KAAK,IAAL,KAAc,IAA9B,EAAoC;AAClC,aAAK,mBAAL,CAAyB,CAAC,CAAD,CAAzB;AACD;;AACD,UAAI,QAAQ,IAAI,KAAK,IAAL,GAAY,CAA5B,EAA+B;;AAC/B,MAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,IAAlB;;AACA,WAAK,UAAL,CAAgB,IAAhB;AACD,KARM;;AAaA,IAAA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAP,YAAA;AACE,UAAM,IAAI,GAAG,SAAA,CAAA,IAAA,CAAK,KAAL,EAAb;AACA,WAAK,SAAL,CAAe,IAAf;AACA,aAAO,CAAC,IAAI,CAAC,CAAN,GAAU,CAAjB;AACD,KAJM;;AAUA,IAAA,OAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAwC;AAAjB,UAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,IAAA,GAAA,IAAA;AAAiB;;AACtC,UAAI,CAAC,IAAL,EAAW;AACT,QAAA,IAAI,GAAG,SAAA,CAAA,IAAA,CAAK,KAAL,EAAP;;AACA,QAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,IAAlB;AACD;;AACD,aAAQ,CAAC,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,CAAf,IAAoB,CAApB,GAAwB,KAAK,IAAL,CAAU,MAAV,CAAiB,WAA1C,GAAyD,IAAI,CAAC,CAArE;AACD,KANM;;AAWA,IAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,UAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,SAAzB,CAAJ,EAAyC;AACvC,aAAK,OAAL,GAAgB,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,cAAzB,IAA2C,UAA3C,GAAwD,UAAxE;AACA;AACD;;AACD,UAAI,CAAC,KAAK,IAAL,CAAU,UAAV,CAAqB,WAArB,CAAiC,aAAjC,CAAD,IACA,KAAK,IAAL,CAAU,WAAV,CAAsB,cAAtB,MAA0C,KAD9C,EACqD;AACnD,aAAK,OAAL,GAAe,cAAf;AACA;AACD;;AACD,MAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB;AACD,KAXM;;AAgBA,IAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,SAAlB,EAAsC;AACpC,UAAI,KAAK,OAAL,CAAa,GAAb,KAAgB,CAApB,EAAyC;AACvC,eAAO,KAAK,OAAL,CAAa,GAAb,KAAqB,SAA5B;AACD;;AACD,UAAM,UAAU,GAAG,KAAK,IAAL,CAAU,UAA7B;AACA,UAAI,CAAC,UAAU,CAAC,GAAX,CAAe,UAAf,CAAL,EAAiC,OAAO,KAAP;AACjC,UAAM,CAAC,GAAG,KAAK,OAAL,EAAV;AACA,UAAI,KAAK,CAAC,IAAN,CAAW,CAAX,EAAc,MAAd,KAAyB,CAA7B,EAAgC,OAAO,KAAP;AAChC,UAAM,KAAK,GAAG,KAAK,IAAL,CAAU,YAAV,CAAuB,CAAC,CAAC,WAAF,CAAc,CAAd,CAAvB,CAAd;AACA,WAAK,OAAL,GAAgB,KAAK,IAAI,KAAK,CAAC,GAAN,KAAc,SAAvB,GAAmC,KAAnC,GAA2C,aAAA,CAAA,SAA3D;AACA,aAAO,KAAK,OAAL,CAAa,GAAb,KAAgB,CAAvB;AACD,KAXM;;AAmBA,IAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,EAA3B,EAAyC,KAAzC,EAA+D;;;AAAtB,UAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,KAAA,GAAA,KAAA;AAAsB;;AAC7D,UAAI,KAAK,OAAL,CAAa,GAAb,KAAgB,CAApB,EAAyC;AACvC,YAAI,CAAC,GAAG,KAAK,KAAL,CAAW,EAAX,CAAR;AACA,YAAM,GAAG,GAAG,KAAK,OAAL,CAAa,SAAb,EAAwB,CAAxB,CAAZ;AACA,YAAM,GAAG,GAAG,KAAK,OAAL,CAAa,SAAb,EAAwB,QAAxB,CAAZ;AACA,YAAM,UAAU,GAAG,KAAK,IAAL,CAAU,WAAV,CAAsB,YAAtB,CAAnB;AAKA,QAAA,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,CAAd,CAAd,CAAJ;AACA,YAAM,EAAE,GAAG,KAAK,IAAL,CAAU,MAAV,CAAiB,eAAjB,GAAmC,IAA9C;AACA,YAAM,EAAE,GAAG,KAAK,IAAL,CAAU,MAAV,CAAiB,kBAA5B;AACA,YAAM,CAAC,GAAI,GAAG,IAAI,KAAP,GAAe,CAAf,GAAmB,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,EAAb,EAAiB,CAAC,GAAG,EAArB,CAAH,GAA+B,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,EAAb,EAAiB,CAAC,GAAG,EAArB,CAAvE;AAIA,YAAM,KAAK,GAAG,KAAK,OAAnB;AACA,YAAM,CAAC,GAAG,KAAK,CAAC,CAAN,IAAW,KAAK,OAAL,GAAe,WAAf,CAA2B,CAA3B,CAArB;AACA,YAAI,CAAC,GAAG,CAAR;;AACA,YAAI,KAAK,CAAC,KAAV,EAAiB;;AACf,iBAAgB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,CAAC,KAAN,CAAA,EAAW,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3B,EAA2B,CAAA,EAAA,CAAA,IAA3B,EAA2B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3B,EAA6B;AAAxB,kBAAM,CAAC,GAAA,EAAA,CAAA,KAAP;;AACH,kBAAI,CAAC,IAAI,CAAT,EAAY;AACV,oBAAI,UAAU,IAAI,CAAlB,EAAqB;AACnB,kBAAA,CAAC;AACF;;AACD,qBAAK,OAAL,GAAe,KAAK,IAAL,CAAU,cAAV,CAAyB,CAAzB,EAA4B,CAA5B,CAAf;AACA,qBAAK,IAAL,GAAY,CAAZ;;AACA,oBAAI,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB,EAAmC;AACjC,uBAAK,OAAL,GAAY,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,KAAK,OAAZ,CAAA,EAAmB;AAAE,oBAAA,CAAC,EAAE,KAAK,CAAC,KAAN,CAAY,CAAZ;AAAL,mBAAnB,CAAZ;AACD;;AACD;AACD;;AACD,cAAA,CAAC;AACF;;;;;;;;;;;;AACF;;AAKD,YAAI,KAAK,CAAC,OAAV,EAAmB;AACjB,eAAK,IAAL,GAAY,CAAC,CAAb;AACA,eAAK,cAAL;AACA,eAAK,cAAL,CAAoB,EAApB,EAAwB,KAAK,mBAAL,CAAyB,CAAzB,EAA4B,KAA5B,CAAxB,EAA4D,KAA5D;AACD,SAJD,MAIO;AACL,eAAK,OAAL,GAAe,KAAK,IAAL,CAAU,cAAV,CAAyB,CAAzB,EAA4B,CAAC,GAAG,CAAhC,CAAf;AACA,eAAK,IAAL,GAAY,CAAC,GAAG,CAAhB;AACD;AACF;AACF,KAjDM;;AAwDA,IAAA,OAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,IAAf,EAA6B,KAA7B,EAA0C;AACxC,UAAI,UAAU,GAAG,KAAK,IAAL,CAAU,UAA3B;;AACA,UAAI,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAJ,EAA4B;AAC1B,QAAA,KAAK,GAAG,KAAK,SAAL,CAAe,UAAU,CAAC,GAAX,CAAe,IAAf,CAAf,EAAqC,CAArC,EAAwC,CAAxC,CAAR;AACD;;AACD,aAAO,KAAP;AACD,KANM;;AAYA,IAAA,OAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,EAAb,EAAyB;AACvB,UAAI,EAAE,CAAC,MAAH,KAAc,CAAlB,EAAqB,OAAO,CAAP;AACrB,UAAI,EAAE,CAAC,MAAH,KAAc,CAAlB,EAAqB,OAAO,EAAE,CAAC,CAAD,CAAT;;AACjB,UAAA,EAAA,GAAA,MAAA,CAAS,EAAT,EAAW,CAAX,CAAA;AAAA,UAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,UAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;;AACJ,UAAM,CAAC,GAAG,KAAK,IAAL,CAAU,MAAV,CAAiB,WAA3B;AACA,aAAQ,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,WAAzB,IAAwC,IAAI,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,CAA5C,GAAqE,CAAC,GAAG,CAAjF;AACD,KANM;;AAaA,IAAA,OAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,GAAtB,EAAqC,CAArC,EAAgD,CAAhD,EAAgE;;;AAC9D,UAAI,CAAC,CAAC,cAAF,CAAiB,KAAjB,KAA2B,CAAC,CAAC,GAAF,GAAQ,CAAvC,EAA0C;AACxC,QAAA,CAAC,GAAG,CAAC,CAAC,GAAN;AACD;;AACG,UAAA,EAAA,GAAA,MAAA,CAAY,CAAC,CAAC,GAAd,EAAiB,CAAjB,CAAA;AAAA,UAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,UAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;AAAA,UAAO,CAAC,GAAA,EAAA,CAAA,CAAA,CAAR;;AACJ,UAAI,KAAK,OAAL,CAAa,GAAb,KAAgB,CAApB,EAA6C;AAC3C,QAAA,EAAA,GAAA,MAAA,CAAS,KAAK,WAAL,CAAiB,GAAjB,EAAsB,CAAtB,EAAyB,CAAzB,CAAT,EAAoC,CAApC,CAAA,EAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF,EAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;AACD,OAFD,MAEO;AACL,QAAA,CAAC,GAAG,CAAJ;AACD;;AACD,WAAK,IAAL,CAAU,CAAV,GAAc,CAAd;AACA,WAAK,IAAL,CAAU,CAAV,GAAc,CAAd;AACA,WAAK,IAAL,CAAU,CAAV,GAAc,CAAd;AACD,KAbM;;AAqBA,IAAA,OAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,GAAnB,EAAkC,EAAlC,EAA8C,CAA9C,EAA8D;AAC5D,UAAM,MAAM,GAAI,GAAG,CAAC,MAAJ,KAAe,CAAf,IAAoB,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAZ,KAAoB,EAAxD;AACA,UAAM,SAAS,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,WAAzB,CAAlB;;AACM,UAAA,EAAA,GAAA,MAAA,CAAU,MAAM,GAAG,GAAH,GAAS,CAAC,EAAD,EAAK,CAAL,CAAzB,EAAiC,CAAjC,CAAA;AAAA,UAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,UAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;;AACF,UAAA,EAAA,GAAA,MAAA,CAAS,CAAC,CAAC,GAAG,CAAL,EAAQ,CAAR,CAAT,EAAmB,CAAnB,CAAA;AAAA,UAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,UAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;;AACJ,UAAI,SAAJ,EAAe;AAIb,YAAM,CAAC,GAAG,KAAK,IAAL,CAAU,MAAV,CAAiB,WAA3B;;AACA,YAAI,MAAJ,EAAY;AACV,UAAA,CAAC,GAAG,IAAI,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,CAAR;AACD;;AACD,QAAA,CAAC,GAAG,CAAC,GAAG,CAAJ,GAAQ,CAAZ;AACD,OATD,MASO,IAAI,MAAJ,EAAY;AAIjB,QAAA,CAAC,GAAG,CAAJ;AACD,OALM,MAKA;AAKD,YAAA,EAAA,GAAA,MAAA,CAAY,CAAC,CAAC,GAAF,IAAS,CAAC,GAAD,EAAM,GAAN,CAArB,EAAgC,CAAhC,CAAA;AAAA,YAAC,EAAE,GAAA,EAAA,CAAA,CAAA,CAAH;AAAA,YAAK,EAAE,GAAA,EAAA,CAAA,CAAA,CAAP;;AACJ,QAAA,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,EAAT,CAAL,CAAN;AACD;;AACD,aAAO,CAAC,CAAC,GAAG,CAAL,EAAQ,CAAR,CAAP;AACD,KA5BM;;AAiCA,IAAA,OAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,CAA3B,EAAsC,CAAtC,EAAsD;AACpD,UAAI,CAAC,CAAC,OAAN,EAAe;AACP,YAAA,EAAA,GAAA,MAAA,CAAqB,CAAC,CAAC,OAAvB,EAA8B,CAA9B,CAAA;AAAA,YAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,YAAU,OAAO,GAAA,EAAA,CAAA,CAAA,CAAjB;;AACN,YAAM,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAC,GAAG,OAAhB,IAA2B,OAArC,CAAV;AACA,QAAA,CAAC,GAAG,OAAO,GAAG,CAAC,GAAG,OAAlB;AACD;;AACD,aAAO,CAAP;AACD,KAPM;;AAYA,IAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,KAAlB,EAAiC;AAC/B,UAAM,MAAM,GAAG,KAAK,IAAL,CAAU,WAAV,CAAsB,QAAtB,CAAf;;AACA,UAAI,MAAJ,EAAY;AACV,eAAO,WAAA,CAAA,YAAA,CAAa,MAAb,CAAP;AACD;;AACD,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB,YAAM,QAAM,GAAI,KAAK,IAAL,CAAoB,UAApB,GAAiC,MAAjD;AACA,YAAM,QAAQ,GAAG,KAAK,QAAL,IAAiB,CAAC,QAAM,CAAC,MAAP,CAAc,MAAd,CAAnC;AACA,YAAM,GAAG,GAAI,QAAQ,GAAG,QAAH,GAAc,IAAnC;AACA,YAAM,IAAI,GAAG,KAAK,IAAL,CAAU,eAAV,CAA0B,GAA1B,EAA+B,KAAK,CAAC,CAAD,CAApC,CAAb;;AACA,YAAI,IAAJ,EAAU;AACR,UAAA,KAAK,GAAG,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAK,OAA7B,CAAR;AACD;AACF;;AACD,aAAO,KAAP;AACD,KAfM;;AAiBT,WAAA,OAAA;AAAC,GApRD,CAAqB,IAArB,CAAA;AAsRD;;AAxRD,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMo wrapper mixin for the MmlMo object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {MmlMo} from '../../../core/MmlTree/MmlNodes/mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {unicodeChars} from '../../../util/string.js';\nimport {DelimiterData} from '../FontData.js';\nimport {DIRECTION, NOSTRETCH} from '../FontData.js';\n\n/*****************************************************************/\n/**\n * Convert direction to letter\n */\nexport const DirectionVH: {[n: number]: string} = {\n  [DIRECTION.Vertical]: 'v',\n  [DIRECTION.Horizontal]: 'h'\n};\n\n/*****************************************************************/\n/**\n * The CommonMo interface\n */\nexport interface CommonMo extends AnyWrapper {\n\n  /**\n   * The font size that a stretched operator uses.\n   * If -1, then stretch arbitrarily, and bbox gives the actual height, depth, width\n   */\n  size: number;\n\n  /**\n   * True if used as an accent in an munderover construct\n   */\n  isAccent: boolean;\n\n  /**\n   * Get the (unmodified) bbox of the contents (before centering or setting accents to width 0)\n   *\n   * @param {BBox} bbox   The bbox to fill\n   */\n  protoBBox(bbox: BBox): void;\n\n  /**\n   * @return {number}    Offset to the left by half the actual width of the accent\n   */\n  getAccentOffset(): number;\n\n  /**\n   * @param {BBox} bbox   The bbox to center, or null to compute the bbox\n   * @return {number}     The offset to move the glyph to center it\n   */\n  getCenterOffset(bbox?: BBox): number;\n\n  /**\n   * Determint variant for vertically/horizontally stretched character\n   *\n   * @param {number[]} WH  size to stretch to, either [W] or [H, D]\n   * @param {boolean} exact  True if not allowed to use delimiter factor and shortfall\n   */\n  getStretchedVariant(WH: number[], exact?: boolean): void;\n\n  /**\n   * @param {string} name   The name of the attribute to get\n   * @param {number} value  The default value to use\n   * @return {number}       The size in em's of the attribute (or the default value)\n   */\n  getSize(name: string, value: number): number;\n\n  /**\n   * @param {number[]} WH  Either [W] for width, [H, D] for height and depth, or [] for min/max size\n   * @return {number}      Either the width or the total height of the character\n   */\n  getWH(WH: number[]): number;\n\n  /**\n   * @param {number[]} WHD     The [W] or [H, D] being requested from the parent mrow\n   * @param {number} D         The full dimension (including symmetry, etc)\n   * @param {DelimiterData} C  The delimiter data for the stretchy character\n   */\n  getStretchBBox(WHD: number[], D: number, C: DelimiterData): void;\n\n  /**\n   * @param {number[]} WHD     The [H, D] being requested from the parent mrow\n   * @param {number} HD        The full height (including symmetry, etc)\n   * @param {DelimiterData} C  The delimiter data for the stretchy character\n   * @return {number[]}        The height and depth for the vertically stretched delimiter\n   */\n  getBaseline(WHD: number[], HD: number, C: DelimiterData): number[];\n\n  /**\n   * Determine the size of the delimiter based on whether full extenders should be used or not.\n   *\n   * @param {number} D          The requested size of the delimiter\n   * @param {DelimiterData} C   The data for the delimiter\n   * @return {number}           The final size of the assembly\n   */\n  checkExtendedHeight(D: number, C: DelimiterData): number;\n\n}\n\n/**\n * Shorthand for the CommonMo constructor\n */\nexport type MoConstructor = Constructor<CommonMo>;\n\n/*****************************************************************/\n/**\n * The CommomMo wrapper mixin for the MmlMo object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMoMixin<T extends WrapperConstructor>(Base: T): MoConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * The font size that a stretched operator uses.\n     * If -1, then stretch arbitrarily, and bbox gives the actual height, depth, width\n     */\n    public size: number = null;\n\n    /**\n     * True if used as an accent in an munderover construct\n     */\n    public isAccent: boolean;\n\n    /**\n     * @override\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.isAccent = (this.node as MmlMo).isAccent;\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      this.protoBBox(bbox);\n      if (this.node.attributes.get('symmetric') &&\n          this.stretch.dir !== DIRECTION.Horizontal) {\n        const d = this.getCenterOffset(bbox);\n        bbox.h += d;\n        bbox.d -= d;\n      }\n      if (this.node.getProperty('mathaccent') &&\n          (this.stretch.dir === DIRECTION.None || this.size >= 0)) {\n        bbox.w = 0;\n      }\n    }\n\n    /**\n     * Get the (unmodified) bbox of the contents (before centering or setting accents to width 0)\n     *\n     * @param {BBox} bbox   The bbox to fill\n     */\n    public protoBBox(bbox: BBox) {\n      const stretchy = (this.stretch.dir !== DIRECTION.None);\n      if (stretchy && this.size === null) {\n        this.getStretchedVariant([0]);\n      }\n      if (stretchy && this.size < 0) return;\n      super.computeBBox(bbox);\n      this.copySkewIC(bbox);\n    }\n\n    /**\n     * @return {number}    Offset to the left by half the actual width of the accent\n     */\n    public getAccentOffset(): number {\n      const bbox = BBox.empty();\n      this.protoBBox(bbox);\n      return -bbox.w / 2;\n    }\n\n    /**\n     * @param {BBox} bbox   The bbox to center, or null to compute the bbox\n     * @return {number}     The offset to move the glyph to center it\n     */\n    public getCenterOffset(bbox: BBox = null): number {\n      if (!bbox) {\n        bbox = BBox.empty();\n        super.computeBBox(bbox);\n      }\n      return ((bbox.h + bbox.d) / 2 + this.font.params.axis_height) - bbox.h;\n    }\n\n    /**\n     * @override\n     */\n    public getVariant() {\n      if (this.node.attributes.get('largeop')) {\n        this.variant = (this.node.attributes.get('displaystyle') ? '-largeop' : '-smallop');\n        return;\n      }\n      if (!this.node.attributes.getExplicit('mathvariant') &&\n          this.node.getProperty('pseudoscript') === false) {\n        this.variant = '-tex-variant';\n        return;\n      }\n      super.getVariant();\n    }\n\n    /**\n     * @override\n     */\n    public canStretch(direction: DIRECTION) {\n      if (this.stretch.dir !== DIRECTION.None) {\n        return this.stretch.dir === direction;\n      }\n      const attributes = this.node.attributes;\n      if (!attributes.get('stretchy')) return false;\n      const c = this.getText();\n      if (Array.from(c).length !== 1) return false;\n      const delim = this.font.getDelimiter(c.codePointAt(0));\n      this.stretch = (delim && delim.dir === direction ? delim : NOSTRETCH);\n      return this.stretch.dir !== DIRECTION.None;\n    }\n\n    /**\n     * Determint variant for vertically/horizontally stretched character\n     *\n     * @param {number[]} WH  size to stretch to, either [W] or [H, D]\n     * @param {boolean} exact  True if not allowed to use delimiter factor and shortfall\n     */\n    public getStretchedVariant(WH: number[], exact: boolean = false) {\n      if (this.stretch.dir !== DIRECTION.None) {\n        let D = this.getWH(WH);\n        const min = this.getSize('minsize', 0);\n        const max = this.getSize('maxsize', Infinity);\n        const mathaccent = this.node.getProperty('mathaccent');\n        //\n        //  Clamp the dimension to the max and min\n        //  then get the target size via TeX rules\n        //\n        D = Math.max(min, Math.min(max, D));\n        const df = this.font.params.delimiterfactor / 1000;\n        const ds = this.font.params.delimitershortfall;\n        const m = (min || exact ? D : mathaccent ? Math.min(D / df, D + ds) :  Math.max(D * df, D - ds));\n        //\n        //  Look through the delimiter sizes for one that matches\n        //\n        const delim = this.stretch;\n        const c = delim.c || this.getText().codePointAt(0);\n        let i = 0;\n        if (delim.sizes) {\n          for (const d of delim.sizes) {\n            if (d >= m) {\n              if (mathaccent && i) {\n                i--;\n              }\n              this.variant = this.font.getSizeVariant(c, i);\n              this.size = i;\n              if (delim.schar && delim.schar[i]) {\n                this.stretch = {...this.stretch, c: delim.schar[i]};\n              }\n              return;\n            }\n            i++;\n          }\n        }\n        //\n        //  No size matches, so if we can make multi-character delimiters,\n        //  record the data for that, otherwise, use the largest fixed size.\n        //\n        if (delim.stretch) {\n          this.size = -1;\n          this.invalidateBBox();\n          this.getStretchBBox(WH, this.checkExtendedHeight(D, delim), delim);\n        } else {\n          this.variant = this.font.getSizeVariant(c, i - 1);\n          this.size = i - 1;\n        }\n      }\n    }\n\n    /**\n     * @param {string} name   The name of the attribute to get\n     * @param {number} value  The default value to use\n     * @return {number}       The size in em's of the attribute (or the default value)\n     */\n    public getSize(name: string, value: number): number {\n      let attributes = this.node.attributes;\n      if (attributes.isSet(name)) {\n        value = this.length2em(attributes.get(name), 1, 1); // FIXME: should use height of actual character\n      }\n      return value;\n    }\n\n    /**\n     * @param {number[]} WH  Either [W] for width, [H, D] for height and depth, or [] for min/max size\n     * @return {number}      Either the width or the total height of the character\n     */\n    public getWH(WH: number[]): number {\n      if (WH.length === 0) return 0;\n      if (WH.length === 1) return WH[0];\n      let [H, D] = WH;\n      const a = this.font.params.axis_height;\n      return (this.node.attributes.get('symmetric') ? 2 * Math.max(H - a, D + a) : H + D);\n    }\n\n    /**\n     * @param {number[]} WHD     The [W] or [H, D] being requested from the parent mrow\n     * @param {number} D         The full dimension (including symmetry, etc)\n     * @param {DelimiterData} C  The delimiter data for the stretchy character\n     */\n    public getStretchBBox(WHD: number[], D: number, C: DelimiterData) {\n      if (C.hasOwnProperty('min') && C.min > D) {\n        D = C.min;\n      }\n      let [h, d, w] = C.HDW;\n      if (this.stretch.dir === DIRECTION.Vertical) {\n        [h, d] = this.getBaseline(WHD, D, C);\n      } else {\n        w = D;\n      }\n      this.bbox.h = h;\n      this.bbox.d = d;\n      this.bbox.w = w;\n    }\n\n    /**\n     * @param {number[]} WHD     The [H, D] being requested from the parent mrow\n     * @param {number} HD        The full height (including symmetry, etc)\n     * @param {DelimiterData} C  The delimiter data for the stretchy character\n     * @return {[number, number]}        The height and depth for the vertically stretched delimiter\n     */\n    public getBaseline(WHD: number[], HD: number, C: DelimiterData): [number, number] {\n      const hasWHD = (WHD.length === 2 && WHD[0] + WHD[1] === HD);\n      const symmetric = this.node.attributes.get('symmetric');\n      const [H, D] = (hasWHD ? WHD : [HD, 0]);\n      let [h, d] = [H + D, 0];\n      if (symmetric) {\n        //\n        //  Center on the math axis\n        //\n        const a = this.font.params.axis_height;\n        if (hasWHD) {\n          h = 2 * Math.max(H - a, D + a);\n        }\n        d = h / 2 - a;\n      } else if (hasWHD) {\n        //\n        //  Use the given depth (from mrow)\n        //\n        d = D;\n      } else {\n        //\n        //  Use depth proportional to the normal-size character\n        //  (when stretching for minsize or maxsize by itself)\n        //\n        let [ch, cd] = (C.HDW || [.75, .25]);\n        d = cd * (h / (ch + cd));\n      }\n      return [h - d, d];\n    }\n\n    /**\n     * @override\n     */\n    public checkExtendedHeight(D: number, C: DelimiterData): number {\n      if (C.fullExt) {\n        const [extSize, endSize] = C.fullExt;\n        const n = Math.ceil(Math.max(0, D - endSize) / extSize);\n        D = endSize + n * extSize;\n      }\n      return D;\n    }\n\n    /**\n     * @override\n     */\n    public remapChars(chars: number[]) {\n      const primes = this.node.getProperty('primes') as string;\n      if (primes) {\n        return unicodeChars(primes);\n      }\n      if (chars.length === 1) {\n        const parent = (this.node as MmlMo).coreParent().parent;\n        const isAccent = this.isAccent && !parent.isKind('mrow');\n        const map = (isAccent ? 'accent' : 'mo');\n        const text = this.font.getRemappedChar(map, chars[0]);\n        if (text) {\n          chars = this.unicodeChars(text, this.variant);\n        }\n      }\n      return chars;\n    }\n\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}