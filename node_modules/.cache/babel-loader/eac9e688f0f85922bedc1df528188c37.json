{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnvironmentMap = exports.CommandMap = exports.MacroMap = exports.DelimiterMap = exports.CharacterMap = exports.AbstractParseMap = exports.RegExpMap = exports.AbstractSymbolMap = void 0;\n\nvar Symbol_js_1 = require(\"./Symbol.js\");\n\nvar MapHandler_js_1 = require(\"./MapHandler.js\");\n\nvar AbstractSymbolMap = function () {\n  function AbstractSymbolMap(_name, _parser) {\n    this._name = _name;\n    this._parser = _parser;\n    MapHandler_js_1.MapHandler.register(this);\n  }\n\n  Object.defineProperty(AbstractSymbolMap.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  AbstractSymbolMap.prototype.parserFor = function (symbol) {\n    return this.contains(symbol) ? this.parser : null;\n  };\n\n  AbstractSymbolMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var parser = this.parserFor(symbol);\n    var mapped = this.lookup(symbol);\n    return parser && mapped ? parser(env, mapped) || true : null;\n  };\n\n  Object.defineProperty(AbstractSymbolMap.prototype, \"parser\", {\n    get: function () {\n      return this._parser;\n    },\n    set: function (parser) {\n      this._parser = parser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AbstractSymbolMap;\n}();\n\nexports.AbstractSymbolMap = AbstractSymbolMap;\n\nvar RegExpMap = function (_super) {\n  __extends(RegExpMap, _super);\n\n  function RegExpMap(name, parser, _regExp) {\n    var _this = _super.call(this, name, parser) || this;\n\n    _this._regExp = _regExp;\n    return _this;\n  }\n\n  RegExpMap.prototype.contains = function (symbol) {\n    return this._regExp.test(symbol);\n  };\n\n  RegExpMap.prototype.lookup = function (symbol) {\n    return this.contains(symbol) ? symbol : null;\n  };\n\n  return RegExpMap;\n}(AbstractSymbolMap);\n\nexports.RegExpMap = RegExpMap;\n\nvar AbstractParseMap = function (_super) {\n  __extends(AbstractParseMap, _super);\n\n  function AbstractParseMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.map = new Map();\n    return _this;\n  }\n\n  AbstractParseMap.prototype.lookup = function (symbol) {\n    return this.map.get(symbol);\n  };\n\n  AbstractParseMap.prototype.contains = function (symbol) {\n    return this.map.has(symbol);\n  };\n\n  AbstractParseMap.prototype.add = function (symbol, object) {\n    this.map.set(symbol, object);\n  };\n\n  AbstractParseMap.prototype.remove = function (symbol) {\n    this.map.delete(symbol);\n  };\n\n  return AbstractParseMap;\n}(AbstractSymbolMap);\n\nexports.AbstractParseMap = AbstractParseMap;\n\nvar CharacterMap = function (_super) {\n  __extends(CharacterMap, _super);\n\n  function CharacterMap(name, parser, json) {\n    var e_1, _a;\n\n    var _this = _super.call(this, name, parser) || this;\n\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n\n        var _d = __read(typeof value === 'string' ? [value, null] : value, 2),\n            char = _d[0],\n            attrs = _d[1];\n\n        var character = new Symbol_js_1.Symbol(key, char, attrs);\n\n        _this.add(key, character);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return _this;\n  }\n\n  return CharacterMap;\n}(AbstractParseMap);\n\nexports.CharacterMap = CharacterMap;\n\nvar DelimiterMap = function (_super) {\n  __extends(DelimiterMap, _super);\n\n  function DelimiterMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DelimiterMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    return _super.prototype.parse.call(this, [env, '\\\\' + symbol]);\n  };\n\n  return DelimiterMap;\n}(CharacterMap);\n\nexports.DelimiterMap = DelimiterMap;\n\nvar MacroMap = function (_super) {\n  __extends(MacroMap, _super);\n\n  function MacroMap(name, json, functionMap) {\n    var e_2, _a;\n\n    var _this = _super.call(this, name, null) || this;\n\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n\n        var _d = __read(typeof value === 'string' ? [value] : value),\n            func = _d[0],\n            attrs = _d.slice(1);\n\n        var character = new Symbol_js_1.Macro(key, functionMap[func], attrs);\n\n        _this.add(key, character);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return _this;\n  }\n\n  MacroMap.prototype.parserFor = function (symbol) {\n    var macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  };\n\n  MacroMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n\n    if (!macro || !parser) {\n      return null;\n    }\n\n    return parser.apply(void 0, __spreadArray([env, macro.symbol], __read(macro.args))) || true;\n  };\n\n  return MacroMap;\n}(AbstractParseMap);\n\nexports.MacroMap = MacroMap;\n\nvar CommandMap = function (_super) {\n  __extends(CommandMap, _super);\n\n  function CommandMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CommandMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n\n    if (!macro || !parser) {\n      return null;\n    }\n\n    if (!parser) {\n      return null;\n    }\n\n    var saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    var result = parser.apply(void 0, __spreadArray([env, '\\\\' + macro.symbol], __read(macro.args)));\n    env.currentCS = saveCommand;\n    return result || true;\n  };\n\n  return CommandMap;\n}(MacroMap);\n\nexports.CommandMap = CommandMap;\n\nvar EnvironmentMap = function (_super) {\n  __extends(EnvironmentMap, _super);\n\n  function EnvironmentMap(name, parser, json, functionMap) {\n    var _this = _super.call(this, name, json, functionMap) || this;\n\n    _this.parser = parser;\n    return _this;\n  }\n\n  EnvironmentMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n        env = _b[0],\n        symbol = _b[1];\n\n    var macro = this.lookup(symbol);\n    var envParser = this.parserFor(symbol);\n\n    if (!macro || !envParser) {\n      return null;\n    }\n\n    this.parser(env, macro.symbol, envParser, macro.args);\n    return true;\n  };\n\n  return EnvironmentMap;\n}(MacroMap);\n\nexports.EnvironmentMap = EnvironmentMap;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/input/tex/SymbolMap.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Symbol map classes.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Attributes, Args, ParseMethod, ParseInput, ParseResult} from './Types.js';\nimport {Symbol, Macro} from './Symbol.js';\nimport {MapHandler} from './MapHandler.js';\n\n\n/**\n * SymbolMaps are the base components for the input parsers.\n *\n * They provide a contains method that checks if a map is applicable (contains)\n * a particular string. Implementing classes then perform the actual symbol\n * parsing, from simple regular expression test, straight forward symbol mapping\n * to transformational functionality on the parsed string.\n *\n * @interface\n */\nexport interface SymbolMap {\n\n  /**\n   * @return {string} The name of the map.\n   */\n  name: string;\n\n  /**\n   * @return {ParseMethod} The default parsing method.\n   */\n  parser: ParseMethod;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {boolean} True if the symbol map applies to the symbol.\n   */\n  contains(symbol: string): boolean;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseMethod} A parse method for the symbol.\n   */\n  parserFor(symbol: string): ParseMethod;\n\n  /**\n   * @param {TexParser} env The current parser.\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseResult} The parsed symbol and the rest of the string.\n   */\n  parse([env, symbol]: ParseInput): ParseResult;\n\n}\n\n\n/**\n * Abstract implementation of symbol maps.\n * @template T\n */\nexport abstract class AbstractSymbolMap<T> implements SymbolMap {\n\n  /**\n   * @constructor\n   * @implements {SymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   */\n  constructor(private _name: string, private _parser: ParseMethod) {\n    MapHandler.register(this);\n  }\n\n\n  /**\n   * @override\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n\n  /**\n   * @override\n   */\n  public abstract contains(symbol: string): boolean;\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    return this.contains(symbol) ? this.parser : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let parser = this.parserFor(symbol);\n    let mapped = this.lookup(symbol);\n    return (parser && mapped) ?\n      parser(env, mapped as any) || true as ParseResult : null;\n  }\n\n\n  public set parser(parser: ParseMethod) {\n    this._parser = parser;\n  }\n\n  public get parser(): ParseMethod {\n    return this._parser;\n  }\n\n\n  /**\n   * @param {string} symbol\n   * @return {T}\n   */\n  public abstract lookup(symbol: string): T;\n\n}\n\n\n\n/**\n * Regular expressions used for parsing strings.\n */\nexport class RegExpMap extends AbstractSymbolMap<string> {\n\n  /**\n   * @constructor\n   * @extends {AbstractSymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   * @param {RegExp} regexp The regular expression.\n   */\n  constructor(name: string, parser: ParseMethod, private _regExp: RegExp) {\n    super(name, parser);\n  }\n\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this._regExp.test(symbol);\n  }\n\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): string {\n    return this.contains(symbol) ? symbol : null;\n  }\n\n}\n\n\n/**\n * Parse maps associate strings with parsing functionality.\n * @constructor\n * @extends {AbstractSymbolMap}\n * @template K\n */\nexport abstract class AbstractParseMap<K> extends AbstractSymbolMap<K> {\n\n  private map: Map<string, K> = new Map<string, K>();\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): K {\n    return this.map.get(symbol);\n  }\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this.map.has(symbol);\n  }\n\n  /**\n   * Sets mapping for a symbol.\n   * @param {string} symbol The symbol to map.\n   * @param {K} object The symbols value in the mapping's codomain.\n   */\n  public add(symbol: string, object: K) {\n    this.map.set(symbol, object);\n  }\n\n  /**\n   * Removes a symbol from the map\n   * @param {string} symbol The symbol to remove\n   */\n  public remove(symbol: string) {\n    this.map.delete(symbol);\n  }\n\n}\n\n\n/**\n * Maps symbols that can all be parsed with the same method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class CharacterMap extends AbstractParseMap<Symbol> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mapping.\n   * @param {JSON} json The JSON representation of the character mapping.\n   */\n  constructor(name: string, parser: ParseMethod,\n              json: {[index: string]: string | [string, Attributes]}) {\n    super(name, parser);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [char, attrs] = (typeof(value) === 'string') ? [value, null] : value;\n      let character = new Symbol(key, char, attrs);\n      this.add(key, character);\n    }\n  }\n\n}\n\n\n/**\n * Maps symbols that are delimiters, that are all parsed with the same method.\n *\n * @constructor\n * @extends {CharacterMap}\n */\nexport class DelimiterMap extends CharacterMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    return super.parse([env, '\\\\' + symbol]);\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class MacroMap extends AbstractParseMap<Macro> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, null);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [func, ...attrs] = (typeof(value) === 'string') ? [value] : value;\n      let character = new Macro(key, functionMap[func as string], attrs);\n      this.add(key, character);\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    let macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    return parser(env, macro.symbol, ...macro.args) || true as ParseResult;\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class CommandMap extends MacroMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    if (!parser) {\n      return null;\n    }\n    let saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    let result = parser(env, '\\\\' + macro.symbol, ...macro.args);\n    env.currentCS = saveCommand;\n    return result || true as ParseResult;\n  }\n\n}\n\n\n/**\n * Maps macros for environments. It has a general parsing method for\n * environments, i.e., one that deals with begin/end, and each environment has\n * its own parsing method returning the content.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class EnvironmentMap extends MacroMap {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the environments.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              parser: ParseMethod,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, json, functionMap);\n    this.parser = parser;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let envParser = this.parserFor(symbol);\n    if (!macro || !envParser) {\n      return null;\n    }\n    this.parser(env, macro.symbol, envParser, macro.args);\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}