{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.split = exports.isPercent = exports.unicodeString = exports.unicodeChars = exports.quotePattern = exports.sortLength = void 0;\n\nfunction sortLength(a, b) {\n  return a.length !== b.length ? b.length - a.length : a === b ? 0 : a < b ? -1 : 1;\n}\n\nexports.sortLength = sortLength;\n\nfunction quotePattern(text) {\n  return text.replace(/([\\^$(){}+*?\\-|\\[\\]\\:\\\\])/g, '\\\\$1');\n}\n\nexports.quotePattern = quotePattern;\n\nfunction unicodeChars(text) {\n  return Array.from(text).map(function (c) {\n    return c.codePointAt(0);\n  });\n}\n\nexports.unicodeChars = unicodeChars;\n\nfunction unicodeString(data) {\n  return String.fromCodePoint.apply(String, __spreadArray([], __read(data)));\n}\n\nexports.unicodeString = unicodeString;\n\nfunction isPercent(x) {\n  return !!x.match(/%\\s*$/);\n}\n\nexports.isPercent = isPercent;\n\nfunction split(x) {\n  return x.trim().split(/\\s+/);\n}\n\nexports.split = split;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/util/string.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAgB,UAAhB,CAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC7C,SAAO,CAAC,CAAC,MAAF,KAAa,CAAC,CAAC,MAAf,GAAwB,CAAC,CAAC,MAAF,GAAW,CAAC,CAAC,MAArC,GAA8C,CAAC,KAAK,CAAN,GAAU,CAAV,GAAc,CAAC,GAAG,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhF;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAUA,SAAgB,YAAhB,CAA6B,IAA7B,EAAyC;AACvC,SAAO,IAAI,CAAC,OAAL,CAAa,4BAAb,EAA2C,MAA3C,CAAP;AACD;;AAFD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAUA,SAAgB,YAAhB,CAA6B,IAA7B,EAAyC;AACvC,SAAO,KAAK,CAAC,IAAN,CAAW,IAAX,EAAiB,GAAjB,CAAqB,UAAC,CAAD,EAAE;AAAK,WAAA,CAAC,CAAC,WAAF,CAAA,CAAA,CAAA;AAAgB,GAA5C,CAAP;AACD;;AAFD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAUA,SAAgB,aAAhB,CAA8B,IAA9B,EAA4C;AAC1C,SAAO,MAAM,CAAC,aAAP,CAAoB,KAApB,CAAA,MAAA,EAAM,aAAA,CAAA,EAAA,EAAA,MAAA,CAAkB,IAAlB,CAAA,CAAN,CAAP;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAUA,SAAgB,SAAhB,CAA0B,CAA1B,EAAmC;AACjC,SAAO,CAAC,CAAC,CAAC,CAAC,KAAF,CAAQ,OAAR,CAAT;AACD;;AAFD,OAAA,CAAA,SAAA,GAAA,SAAA;;AAUA,SAAgB,KAAhB,CAAsB,CAAtB,EAA+B;AAC7B,SAAO,CAAC,CAAC,IAAF,GAAS,KAAT,CAAe,KAAf,CAAP;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements some string utility functions\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n\n/**\n * Sort strings by length\n *\n * @param {string} a  First string to be compared\n * @param {string} b  Second string to be compared\n * @return {number}  -1 id a < b, 0 of a === b, 1 if a > b\n */\nexport function sortLength(a: string, b: string): number {\n  return a.length !== b.length ? b.length - a.length : a === b ? 0 : a < b ? -1 : 1;\n}\n\n/**\n * Quote a string for use in regular expressions\n *\n * @param {string} text  The text whose regex characters are to be quoted\n * @return {string}  The quoted string\n */\nexport function quotePattern(text: string): string {\n  return text.replace(/([\\^$(){}+*?\\-|\\[\\]\\:\\\\])/g, '\\\\$1');\n}\n\n/**\n * Convert a UTF-8 string to an array of unicode code points\n *\n * @param {string} text  The string to be turned into unicode positions\n * @return {number[]}  Array of numbers representing the string's unicode character positions\n */\nexport function unicodeChars(text: string): number[] {\n  return Array.from(text).map((c) => c.codePointAt(0));\n}\n\n/**\n * Convert an array of unicode code points to a string\n *\n * @param {number[]} data   The array of unicode code points\n * @return {string}         The string consisting of the characters at those points\n */\nexport function unicodeString(data: number[]): string {\n  return String.fromCodePoint(...data);\n}\n\n/**\n * Test if a value is a percentage\n *\n * @param {string} x   The string to test\n * @return {boolean}   True if the string ends with a percent sign\n */\nexport function isPercent(x: string): boolean {\n  return !!x.match(/%\\s*$/);\n}\n\n/**\n * Split a space-separated string of values\n *\n * @param {string} x   The string to be split\n * @return {string[]}  The list of white-space-separated \"words\" in the string\n */\nexport function split(x: string): string[] {\n  return x.trim().split(/\\s+/);\n}\n"]},"metadata":{},"sourceType":"script"}