{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Styles = void 0;\nvar TRBL = ['top', 'right', 'bottom', 'left'];\nvar WSC = ['width', 'style', 'color'];\n\nfunction splitSpaces(text) {\n  var parts = text.split(/((?:'[^']*'|\"[^\"]*\"|,[\\s\\n]|[^\\s\\n])*)/g);\n  var split = [];\n\n  while (parts.length > 1) {\n    parts.shift();\n    split.push(parts.shift());\n  }\n\n  return split;\n}\n\nfunction splitTRBL(name) {\n  var e_1, _a;\n\n  var parts = splitSpaces(this.styles[name]);\n\n  if (parts.length === 0) {\n    parts.push('');\n  }\n\n  if (parts.length === 1) {\n    parts.push(parts[0]);\n  }\n\n  if (parts.length === 2) {\n    parts.push(parts[0]);\n  }\n\n  if (parts.length === 3) {\n    parts.push(parts[1]);\n  }\n\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      this.setStyle(this.childName(name, child), parts.shift());\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n\nfunction combineTRBL(name) {\n  var e_2, _a;\n\n  var children = Styles.connect[name].children;\n  var parts = [];\n\n  try {\n    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n      var child = children_1_1.value;\n      var part = this.styles[name + '-' + child];\n\n      if (!part) {\n        delete this.styles[name];\n        return;\n      }\n\n      parts.push(part);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n\n  if (parts[3] === parts[1]) {\n    parts.pop();\n\n    if (parts[2] === parts[0]) {\n      parts.pop();\n\n      if (parts[1] === parts[0]) {\n        parts.pop();\n      }\n    }\n  }\n\n  this.styles[name] = parts.join(' ');\n}\n\nfunction splitSame(name) {\n  var e_3, _a;\n\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      this.setStyle(this.childName(name, child), this.styles[name]);\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n\nfunction combineSame(name) {\n  var e_4, _a;\n\n  var children = __spreadArray([], __read(Styles.connect[name].children));\n\n  var value = this.styles[this.childName(name, children.shift())];\n\n  try {\n    for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n      var child = children_2_1.value;\n\n      if (this.styles[this.childName(name, child)] !== value) {\n        delete this.styles[name];\n        return;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  this.styles[name] = value;\n}\n\nvar BORDER = {\n  width: /^(?:[\\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,\n  style: /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/\n};\n\nfunction splitWSC(name) {\n  var e_5, _a, e_6, _b;\n\n  var parts = {\n    width: '',\n    style: '',\n    color: ''\n  };\n\n  try {\n    for (var _c = __values(splitSpaces(this.styles[name])), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var part = _d.value;\n\n      if (part.match(BORDER.width) && parts.width === '') {\n        parts.width = part;\n      } else if (part.match(BORDER.style) && parts.style === '') {\n        parts.style = part;\n      } else {\n        parts.color = part;\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  try {\n    for (var _e = __values(Styles.connect[name].children), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var child = _f.value;\n      this.setStyle(this.childName(name, child), parts[child]);\n    }\n  } catch (e_6_1) {\n    e_6 = {\n      error: e_6_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_6) throw e_6.error;\n    }\n  }\n}\n\nfunction combineWSC(name) {\n  var e_7, _a;\n\n  var parts = [];\n\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      var value = this.styles[this.childName(name, child)];\n\n      if (value) {\n        parts.push(value);\n      }\n    }\n  } catch (e_7_1) {\n    e_7 = {\n      error: e_7_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_7) throw e_7.error;\n    }\n  }\n\n  if (parts.length) {\n    this.styles[name] = parts.join(' ');\n  } else {\n    delete this.styles[name];\n  }\n}\n\nvar FONT = {\n  style: /^(?:normal|italic|oblique|inherit|initial|unset)$/,\n  variant: new RegExp('^(?:' + ['normal|none', 'inherit|initial|unset', 'common-ligatures|no-common-ligatures', 'discretionary-ligatures|no-discretionary-ligatures', 'historical-ligatures|no-historical-ligatures', 'contextual|no-contextual', '(?:stylistic|character-variant|swash|ornaments|annotation)\\\\([^)]*\\\\)', 'small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps', 'lining-nums|oldstyle-nums|proportional-nums|tabular-nums', 'diagonal-fractions|stacked-fractions', 'ordinal|slashed-zero', 'jis78|jis83|jis90|jis04|simplified|traditional', 'full-width|proportional-width', 'ruby'].join('|') + ')$'),\n  weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,\n  stretch: new RegExp('^(?:' + ['normal', '(?:(?:ultra|extra|semi)-)?condensed', '(?:(?:semi|extra|ulta)-)?expanded', 'inherit|initial|unset'].join('|') + ')$'),\n  size: new RegExp('^(?:' + ['xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller', '[\\d.]+%|[\\d.]+[a-z]+', 'inherit|initial|unset'].join('|') + ')' + '(?:\\/(?:normal|[\\d.\\+](?:%|[a-z]+)?))?$')\n};\n\nfunction splitFont(name) {\n  var e_8, _a, e_9, _b;\n\n  var parts = splitSpaces(this.styles[name]);\n  var value = {\n    style: '',\n    variant: [],\n    weight: '',\n    stretch: '',\n    size: '',\n    family: '',\n    'line-height': ''\n  };\n\n  try {\n    for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {\n      var part = parts_1_1.value;\n      value.family = part;\n\n      try {\n        for (var _c = (e_9 = void 0, __values(Object.keys(FONT))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var name_1 = _d.value;\n\n          if ((Array.isArray(value[name_1]) || value[name_1] === '') && part.match(FONT[name_1])) {\n            if (name_1 === 'size') {\n              var _e = __read(part.split(/\\//), 2),\n                  size = _e[0],\n                  height = _e[1];\n\n              value[name_1] = size;\n\n              if (height) {\n                value['line-height'] = height;\n              }\n            } else if (value.size === '') {\n              if (Array.isArray(value[name_1])) {\n                value[name_1].push(part);\n              } else {\n                value[name_1] = part;\n              }\n            }\n          }\n        }\n      } catch (e_9_1) {\n        e_9 = {\n          error: e_9_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n        } finally {\n          if (e_9) throw e_9.error;\n        }\n      }\n    }\n  } catch (e_8_1) {\n    e_8 = {\n      error: e_8_1\n    };\n  } finally {\n    try {\n      if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n    } finally {\n      if (e_8) throw e_8.error;\n    }\n  }\n\n  saveFontParts(name, value);\n  delete this.styles[name];\n}\n\nfunction saveFontParts(name, value) {\n  var e_10, _a;\n\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      var cname = this.childName(name, child);\n\n      if (Array.isArray(value[child])) {\n        var values = value[child];\n\n        if (values.length) {\n          this.styles[cname] = values.join(' ');\n        }\n      } else if (value[child] !== '') {\n        this.styles[cname] = value[child];\n      }\n    }\n  } catch (e_10_1) {\n    e_10 = {\n      error: e_10_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_10) throw e_10.error;\n    }\n  }\n}\n\nfunction combineFont(_name) {}\n\nvar Styles = function () {\n  function Styles(cssText) {\n    if (cssText === void 0) {\n      cssText = '';\n    }\n\n    this.parse(cssText);\n  }\n\n  Object.defineProperty(Styles.prototype, \"cssText\", {\n    get: function () {\n      var e_11, _a;\n\n      var styles = [];\n\n      try {\n        for (var _b = __values(Object.keys(this.styles)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var name_2 = _c.value;\n          var parent_1 = this.parentName(name_2);\n\n          if (!this.styles[parent_1]) {\n            styles.push(name_2 + ': ' + this.styles[name_2]);\n          }\n        }\n      } catch (e_11_1) {\n        e_11 = {\n          error: e_11_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_11) throw e_11.error;\n        }\n      }\n\n      return styles.join('; ');\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Styles.prototype.set = function (name, value) {\n    name = this.normalizeName(name);\n    this.setStyle(name, value);\n\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      this.combineChildren(name);\n      delete this.styles[name];\n    }\n\n    while (name.match(/-/)) {\n      name = this.parentName(name);\n      if (!Styles.connect[name]) break;\n      Styles.connect[name].combine.call(this, name);\n    }\n  };\n\n  Styles.prototype.get = function (name) {\n    name = this.normalizeName(name);\n    return this.styles.hasOwnProperty(name) ? this.styles[name] : '';\n  };\n\n  Styles.prototype.setStyle = function (name, value) {\n    this.styles[name] = value;\n\n    if (Styles.connect[name] && Styles.connect[name].children) {\n      Styles.connect[name].split.call(this, name);\n    }\n\n    if (value === '') {\n      delete this.styles[name];\n    }\n  };\n\n  Styles.prototype.combineChildren = function (name) {\n    var e_12, _a;\n\n    var parent = this.parentName(name);\n\n    try {\n      for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        var cname = this.childName(parent, child);\n        Styles.connect[cname].combine.call(this, cname);\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n  };\n\n  Styles.prototype.parentName = function (name) {\n    var parent = name.replace(/-[^-]*$/, '');\n    return name === parent ? '' : parent;\n  };\n\n  Styles.prototype.childName = function (name, child) {\n    if (child.match(/-/)) {\n      return child;\n    }\n\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      child += name.replace(/.*-/, '-');\n      name = this.parentName(name);\n    }\n\n    return name + '-' + child;\n  };\n\n  Styles.prototype.normalizeName = function (name) {\n    return name.replace(/[A-Z]/g, function (c) {\n      return '-' + c.toLowerCase();\n    });\n  };\n\n  Styles.prototype.parse = function (cssText) {\n    if (cssText === void 0) {\n      cssText = '';\n    }\n\n    var PATTERN = this.constructor.pattern;\n    this.styles = {};\n    var parts = cssText.replace(PATTERN.comment, '').split(PATTERN.style);\n\n    while (parts.length > 1) {\n      var _a = __read(parts.splice(0, 3), 3),\n          space = _a[0],\n          name_3 = _a[1],\n          value = _a[2];\n\n      if (space.match(/[^\\s\\n]/)) return;\n      this.set(name_3, value);\n    }\n  };\n\n  Styles.pattern = {\n    style: /([-a-z]+)[\\s\\n]*:[\\s\\n]*((?:'[^']*'|\"[^\"]*\"|\\n|.)*?)[\\s\\n]*(?:;|$)/g,\n    comment: /\\/\\*[^]*?\\*\\//g\n  };\n  Styles.connect = {\n    padding: {\n      children: TRBL,\n      split: splitTRBL,\n      combine: combineTRBL\n    },\n    border: {\n      children: TRBL,\n      split: splitSame,\n      combine: combineSame\n    },\n    'border-top': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-right': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-bottom': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-left': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-width': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    'border-style': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    'border-color': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    font: {\n      children: ['style', 'variant', 'weight', 'stretch', 'line-height', 'size', 'family'],\n      split: splitFont,\n      combine: combineFont\n    }\n  };\n  return Styles;\n}();\n\nexports.Styles = Styles;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/util/Styles.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a lite CssStyleDeclaration replacement\n *                (very limited in scope)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n * An object contining name: value pairs\n */\nexport type StyleList = {[name: string]: string};\n\n/**\n * Data for how to map a combined style (like border) to its children\n */\nexport type connection = {\n  children: string[],               // suffix names to add to the base name\n  split: (name: string) => void,    // function to split the value for the children\n  combine: (name: string) => void   // function to combine the child values when one changes\n};\n\n/**\n * A collection of connections\n */\nexport type connections = {[name: string]: connection};\n\n/*********************************************************/\n/**\n * Some common children arrays\n */\nconst TRBL = ['top', 'right', 'bottom', 'left'];\nconst WSC = ['width', 'style', 'color'];\n\n/**\n * Split a style at spaces (taking quotation marks and commas into account)\n *\n * @param {string} text  The combined styles to be split at spaces\n * @return {string[]}    Array of parts of the style (separated by spaces)\n */\nfunction splitSpaces(text: string): string[] {\n  const parts = text.split(/((?:'[^']*'|\"[^\"]*\"|,[\\s\\n]|[^\\s\\n])*)/g);\n  const split = [] as string[];\n  while (parts.length > 1) {\n    parts.shift();\n    split.push(parts.shift());\n  }\n  return split;\n}\n\n/*********************************************************/\n/**\n * Split a top-right-bottom-left group into its parts\n * Format:\n *    x           all are the same value\n *    x y         same as x y x y\n *    x y z       same as x y z y\n *    x y z w     each specified\n *\n * @param {string} name   The style to be processed\n */\n\nfunction splitTRBL(name: string) {\n  const parts = splitSpaces(this.styles[name]);\n  if (parts.length === 0) {\n    parts.push('');\n  }\n  if (parts.length === 1) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 2) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 3) {\n    parts.push(parts[1]);\n  }\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), parts.shift());\n  }\n}\n\n/**\n * Combine top-right-bottom-left into one entry\n * (removing unneeded values)\n *\n * @param {string} name   The style to be processed\n */\nfunction combineTRBL(name: string) {\n  const children = Styles.connect[name].children;\n  const parts = [] as string[];\n  for (const child of children) {\n    const part = this.styles[name + '-' + child];\n    if (!part) {\n      delete this.styles[name];\n      return;\n    }\n    parts.push(part);\n  }\n  if (parts[3] === parts[1]) {\n    parts.pop();\n    if (parts[2] === parts[0]) {\n      parts.pop();\n      if (parts[1] === parts[0]) {\n        parts.pop();\n      }\n    }\n  }\n  this.styles[name] = parts.join(' ');\n}\n\n/*********************************************************/\n/**\n * Use the same value for all children\n *\n * @param {string} name   The style to be processed\n */\nfunction splitSame(name: string) {\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), this.styles[name]);\n  }\n}\n\n/**\n * Check that all children have the same values and\n * if so, set the parent to that value\n *\n * @param {string} name   The style to be processed\n */\nfunction combineSame(name: string) {\n  const children = [...Styles.connect[name].children];\n  const value = this.styles[this.childName(name, children.shift())];\n  for (const child of children) {\n    if (this.styles[this.childName(name, child)] !== value) {\n      delete this.styles[name];\n      return;\n    }\n  }\n  this.styles[name] = value;\n}\n\n/*********************************************************/\n/**\n * Patterns for the parts of a boarder\n */\nconst BORDER: {[name: string]: RegExp} = {\n  width: /^(?:[\\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,\n  style: /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/\n};\n\n/**\n * Split a width-style-color border definition\n *\n * @param {string} name   The style to be processed\n */\nfunction splitWSC(name: string) {\n  let parts = {width: '', style: '', color: ''} as StyleList;\n  for (const part of splitSpaces(this.styles[name])) {\n    if (part.match(BORDER.width) && parts.width === '') {\n      parts.width = part;\n    } else if (part.match(BORDER.style) && parts.style === '') {\n      parts.style = part;\n    } else {\n      parts.color = part;\n    }\n  }\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), parts[child]);\n  }\n}\n\n/**\n * Combine with-style-color border definition from children\n *\n * @param {string} name   The style to be processed\n */\nfunction combineWSC(name: string) {\n  const parts = [] as string[];\n  for (const child of Styles.connect[name].children) {\n    const value = this.styles[this.childName(name, child)];\n    if (value) {\n      parts.push(value);\n    }\n  }\n  if (parts.length) {\n    this.styles[name] = parts.join(' ');\n  } else {\n    delete this.styles[name];\n  }\n}\n\n/*********************************************************/\n/**\n * Patterns for the parts of a font declaration\n */\nconst FONT: {[name: string]: RegExp} = {\n  style: /^(?:normal|italic|oblique|inherit|initial|unset)$/,\n  variant: new RegExp('^(?:' +\n                      ['normal|none',\n                       'inherit|initial|unset',\n                       'common-ligatures|no-common-ligatures',\n                       'discretionary-ligatures|no-discretionary-ligatures',\n                       'historical-ligatures|no-historical-ligatures',\n                       'contextual|no-contextual',\n                       '(?:stylistic|character-variant|swash|ornaments|annotation)\\\\([^)]*\\\\)',\n                       'small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps',\n                       'lining-nums|oldstyle-nums|proportional-nums|tabular-nums',\n                       'diagonal-fractions|stacked-fractions',\n                       'ordinal|slashed-zero',\n                       'jis78|jis83|jis90|jis04|simplified|traditional',\n                       'full-width|proportional-width',\n                       'ruby'].join('|') + ')$'),\n  weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,\n  stretch: new RegExp('^(?:' +\n                      ['normal',\n                       '(?:(?:ultra|extra|semi)-)?condensed',\n                       '(?:(?:semi|extra|ulta)-)?expanded',\n                       'inherit|initial|unset']. join('|') + ')$'),\n  size: new RegExp('^(?:' +\n                   ['xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller',\n                    '[\\d.]+%|[\\d.]+[a-z]+',\n                    'inherit|initial|unset'].join('|') + ')' +\n                   '(?:\\/(?:normal|[\\d.\\+](?:%|[a-z]+)?))?$')\n};\n\n/**\n * Split a font declaration into is parts (not perfect but good enough for now)\n *\n * @param {string} name   The style to be processed\n */\nfunction splitFont(name: string) {\n  const parts = splitSpaces(this.styles[name]);\n  //\n  //  The parts found (array means can be more than one word)\n  //\n  const value = {\n    style: '', variant: [], weight: '', stretch: '',\n    size: '', family: '', 'line-height': ''\n  } as {[name: string]: string | string[]};\n  for (const part of parts) {\n    value.family = part; // assume it is family unless otherwise (family must be present)\n    for (const name of Object.keys(FONT)) {\n      if ((Array.isArray(value[name]) || value[name] === '') && part.match(FONT[name])) {\n        if (name === 'size') {\n          //\n          // Handle size/line-height\n          //\n          const [size, height] = part.split(/\\//);\n          value[name] = size;\n          if (height) {\n            value['line-height'] = height;\n          }\n        } else if (value.size === '') {\n          //\n          // style, weight, variant, stretch must appear before size\n          //\n          if (Array.isArray(value[name])) {\n            (value[name] as string[]).push(part);\n          } else {\n            value[name] = part;\n          }\n        }\n      }\n    }\n  }\n  saveFontParts(name, value);\n  delete this.styles[name]; // only use the parts, not the font declaration itself\n}\n\n/**\n * @param {string} name   The style to be processed\n * @param {{[name: string]: string | string[]}} value  The list of parts detected above\n */\nfunction saveFontParts(name: string, value: {[name: string]: string | string[]}) {\n  for (const child of Styles.connect[name].children) {\n    const cname = this.childName(name, child);\n    if (Array.isArray(value[child])) {\n      const values = value[child] as string[];\n      if (values.length) {\n        this.styles[cname] = values.join(' ');\n      }\n    } else  if (value[child] !== '') {\n      this.styles[cname] = value[child];\n    }\n  }\n}\n\n/**\n * Combine font parts into one (we don't actually do that)\n */\nfunction combineFont(_name: string) {}\n\n/*********************************************************/\n/**\n * Implements the Styles object (lite version of CssStyleDeclaration)\n */\nexport class Styles {\n\n  /**\n   * Patterns for style values and comments\n   */\n  public static pattern: {[name: string]: RegExp} = {\n    style: /([-a-z]+)[\\s\\n]*:[\\s\\n]*((?:'[^']*'|\"[^\"]*\"|\\n|.)*?)[\\s\\n]*(?:;|$)/g,\n    comment: /\\/\\*[^]*?\\*\\//g\n  };\n\n  /**\n   * The mapping of parents to children, and how to split and combine them\n   */\n  public static connect: connections = {\n    padding: {\n      children: TRBL,\n      split: splitTRBL,\n      combine: combineTRBL\n    },\n\n    border: {\n      children: TRBL,\n      split: splitSame,\n      combine: combineSame\n    },\n    'border-top': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-right': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-bottom': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-left': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-width': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n    'border-style': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n    'border-color': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n\n    font: {\n      children: ['style', 'variant', 'weight', 'stretch', 'line-height', 'size', 'family'],\n      split: splitFont,\n      combine: combineFont\n    }\n  };\n\n  /**\n   * The list of styles defined for this declaration\n   */\n  protected styles: StyleList;\n\n  /**\n   * @param {string} cssText  The initial definition for the style\n   * @constructor\n   */\n  constructor(cssText: string = '') {\n    this.parse(cssText);\n  }\n\n  /**\n   * @return {string}  The CSS string for the styles currently defined\n   */\n  public get cssText(): string {\n    const styles = [] as string[];\n    for (const name of Object.keys(this.styles)) {\n      const parent = this.parentName(name);\n      if (!this.styles[parent]) {\n        styles.push(name + ': ' + this.styles[name]);\n      }\n    }\n    return styles.join('; ');\n  }\n\n  /**\n   * @param {string} name   The name of the style to set\n   * @param {string|number|boolean} value The value to set it to\n   */\n  public set(name: string, value: string | number | boolean) {\n    name = this.normalizeName(name);\n    this.setStyle(name, value as string);\n    //\n    // If there is no combine function ,the children combine to\n    // a separate parent (e.g., border-width sets border-top-width, etc.\n    // and combines to border-top)\n    //\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      this.combineChildren(name);\n      delete this.styles[name];\n    }\n    //\n    // If we just changed a child, we need to try to combine\n    // it with its parent's other children\n    //\n    while (name.match(/-/)) {\n      name = this.parentName(name);\n      if (!Styles.connect[name]) break;\n      Styles.connect[name].combine.call(this, name);\n    }\n  }\n\n  /**\n   * @param {string} name  The name of the style to get\n   * @return {string}      The value of the style (or empty string if not defined)\n   */\n  public get(name: string): string {\n    name = this.normalizeName(name);\n    return (this.styles.hasOwnProperty(name) ? this.styles[name] : '');\n  }\n\n  /**\n   * @param {string} name   The name of the style to set (without causing parent updates)\n   * @param {string} value  The value to set it to\n   */\n  protected setStyle(name: string, value: string) {\n    this.styles[name] = value;\n    if (Styles.connect[name] && Styles.connect[name].children) {\n      Styles.connect[name].split.call(this, name);\n    }\n    if (value === '') {\n      delete this.styles[name];\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the style whose parent is to be combined\n   */\n  protected combineChildren(name: string) {\n    const parent = this.parentName(name);\n    for (const child of Styles.connect[name].children) {\n      const cname = this.childName(parent, child);\n      Styles.connect[cname].combine.call(this, cname);\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the style whose parent style is to be found\n   * @return {string}       The name of the parent, or '' if none\n   */\n  protected parentName(name: string): string {\n    const parent = name.replace(/-[^-]*$/, '');\n    return (name === parent ? '' : parent);\n  }\n\n  /**\n   * @param {string} name   The name of the parent style\n   * @param {string} child  The suffix to be added to the parent\n   * @preturn {string}      The combined name\n   */\n  protected childName(name: string, child: string) {\n    //\n    // If the child contains a dash, it is already the fill name\n    //\n    if (child.match(/-/)) {\n      return child;\n    }\n    //\n    // For non-combining styles, like border-width, insert\n    //   the child name before the find word, e.g., border-top-width\n    //\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      child += name.replace(/.*-/, '-');\n      name = this.parentName(name);\n    }\n    return name + '-' + child;\n  }\n\n  /**\n   * @param {string} name  The name of a style to normalize\n   * @return {string}      The name converted from CamelCase to lowercase with dashes\n   */\n  protected normalizeName(name: string): string {\n    return name.replace(/[A-Z]/g, c => '-' + c.toLowerCase());\n  }\n\n  /**\n   * @param {string} cssText  A style text string to be parsed into separate styles\n   *                          (by using this.set(), we get all the sub-styles created\n   *                           as well as the merged style shorthands)\n   */\n  protected parse(cssText: string = '') {\n    let PATTERN = (this.constructor as typeof Styles).pattern;\n    this.styles = {};\n    const parts = cssText.replace(PATTERN.comment, '').split(PATTERN.style);\n    while (parts.length > 1) {\n      let [space, name, value] = parts.splice(0, 3);\n      if (space.match(/[^\\s\\n]/)) return;\n      this.set(name, value);\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}