{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGWrapper = void 0;\n\nvar Wrapper_js_1 = require(\"../common/Wrapper.js\");\n\nvar svg_js_1 = require(\"../svg.js\");\n\nvar SVGWrapper = function (_super) {\n  __extends(SVGWrapper, _super);\n\n  function SVGWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = null;\n    return _this;\n  }\n\n  SVGWrapper.prototype.toSVG = function (parent) {\n    this.addChildren(this.standardSVGnode(parent));\n  };\n\n  SVGWrapper.prototype.addChildren = function (parent) {\n    var e_1, _a;\n\n    var x = 0;\n\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.toSVG(parent);\n\n        if (child.element) {\n          child.place(x + child.bbox.L * child.bbox.rscale, 0);\n        }\n\n        x += (child.bbox.L + child.bbox.w + child.bbox.R) * child.bbox.rscale;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  SVGWrapper.prototype.standardSVGnode = function (parent) {\n    var svg = this.createSVGnode(parent);\n    this.handleStyles();\n    this.handleScale();\n    this.handleColor();\n    this.handleAttributes();\n    return svg;\n  };\n\n  SVGWrapper.prototype.createSVGnode = function (parent) {\n    this.element = this.svg('g', {\n      'data-mml-node': this.node.kind\n    });\n    var href = this.node.attributes.get('href');\n\n    if (href) {\n      parent = this.adaptor.append(parent, this.svg('a', {\n        href: href\n      }));\n\n      var _a = this.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      this.adaptor.append(this.element, this.svg('rect', {\n        'data-hitbox': true,\n        fill: 'none',\n        stroke: 'none',\n        'pointer-events': 'all',\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        y: this.fixed(-d)\n      }));\n    }\n\n    this.adaptor.append(parent, this.element);\n    return this.element;\n  };\n\n  SVGWrapper.prototype.handleStyles = function () {\n    if (!this.styles) return;\n    var styles = this.styles.cssText;\n\n    if (styles) {\n      this.adaptor.setAttribute(this.element, 'style', styles);\n    }\n  };\n\n  SVGWrapper.prototype.handleScale = function () {\n    if (this.bbox.rscale !== 1) {\n      var scale = 'scale(' + this.fixed(this.bbox.rscale / 1000, 3) + ')';\n      this.adaptor.setAttribute(this.element, 'transform', scale);\n    }\n  };\n\n  SVGWrapper.prototype.handleColor = function () {\n    var adaptor = this.adaptor;\n    var attributes = this.node.attributes;\n    var mathcolor = attributes.getExplicit('mathcolor');\n    var color = attributes.getExplicit('color');\n    var mathbackground = attributes.getExplicit('mathbackground');\n    var background = attributes.getExplicit('background');\n\n    if (mathcolor || color) {\n      adaptor.setAttribute(this.element, 'fill', mathcolor || color);\n      adaptor.setAttribute(this.element, 'stroke', mathcolor || color);\n    }\n\n    if (mathbackground || background) {\n      var _a = this.getBBox(),\n          h = _a.h,\n          d = _a.d,\n          w = _a.w;\n\n      var rect = this.svg('rect', {\n        fill: mathbackground || background,\n        x: 0,\n        y: this.fixed(-d),\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        'data-bgcolor': true\n      });\n      var child = adaptor.firstChild(this.element);\n\n      if (child) {\n        adaptor.insert(rect, child);\n      } else {\n        adaptor.append(this.element, rect);\n      }\n    }\n  };\n\n  SVGWrapper.prototype.handleAttributes = function () {\n    var e_2, _a, e_3, _b;\n\n    var attributes = this.node.attributes;\n    var defaults = attributes.getAllDefaults();\n    var skip = SVGWrapper.skipAttributes;\n\n    try {\n      for (var _c = __values(attributes.getExplicitNames()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var name_1 = _d.value;\n\n        if (skip[name_1] === false || !(name_1 in defaults) && !skip[name_1] && !this.adaptor.hasAttribute(this.element, name_1)) {\n          this.adaptor.setAttribute(this.element, name_1, attributes.getExplicit(name_1));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    if (attributes.get('class')) {\n      var names = attributes.get('class').trim().split(/ +/);\n\n      try {\n        for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n          var name_2 = names_1_1.value;\n          this.adaptor.addClass(this.element, name_2);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (names_1_1 && !names_1_1.done && (_b = names_1.return)) _b.call(names_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    }\n  };\n\n  SVGWrapper.prototype.place = function (x, y, element) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (!(x || y)) return;\n\n    if (!element) {\n      element = this.element;\n      y = this.handleId(y);\n    }\n\n    var translate = \"translate(\" + this.fixed(x) + \",\" + this.fixed(y) + \")\";\n    var transform = this.adaptor.getAttribute(element, 'transform') || '';\n    this.adaptor.setAttribute(element, 'transform', translate + (transform ? ' ' + transform : ''));\n  };\n\n  SVGWrapper.prototype.handleId = function (y) {\n    if (!this.node.attributes || !this.node.attributes.get('id')) {\n      return y;\n    }\n\n    var adaptor = this.adaptor;\n    var h = this.getBBox().h;\n    var children = adaptor.childNodes(this.element);\n    children.forEach(function (child) {\n      return adaptor.remove(child);\n    });\n    var g = this.svg('g', {\n      'data-idbox': true,\n      transform: \"translate(0,\" + this.fixed(-h) + \")\"\n    }, children);\n    adaptor.append(this.element, this.svg('text', {\n      'data-id-align': true\n    }, [this.text('')]));\n    adaptor.append(this.element, g);\n    return y + h;\n  };\n\n  SVGWrapper.prototype.firstChild = function () {\n    var adaptor = this.adaptor;\n    var child = adaptor.firstChild(this.element);\n\n    if (child && adaptor.kind(child) === 'text' && adaptor.getAttribute(child, 'data-id-align')) {\n      child = adaptor.firstChild(adaptor.next(child));\n    }\n\n    if (child && adaptor.kind(child) === 'rect' && adaptor.getAttribute(child, 'data-hitbox')) {\n      child = adaptor.next(child);\n    }\n\n    return child;\n  };\n\n  SVGWrapper.prototype.placeChar = function (n, x, y, parent, variant) {\n    var e_4, _a;\n\n    if (variant === void 0) {\n      variant = null;\n    }\n\n    if (variant === null) {\n      variant = this.variant;\n    }\n\n    var C = n.toString(16).toUpperCase();\n\n    var _b = __read(this.getVariantChar(variant, n), 4),\n        w = _b[2],\n        data = _b[3];\n\n    if ('p' in data) {\n      var path = data.p ? 'M' + data.p + 'Z' : '';\n      this.place(x, y, this.adaptor.append(parent, this.charNode(variant, C, path)));\n    } else if ('c' in data) {\n      var g = this.adaptor.append(parent, this.svg('g', {\n        'data-c': C\n      }));\n      this.place(x, y, g);\n      x = 0;\n\n      try {\n        for (var _c = __values(this.unicodeChars(data.c, variant)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var n_1 = _d.value;\n          x += this.placeChar(n_1, x, y, g, variant);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    } else if (data.unknown) {\n      var char = String.fromCodePoint(n);\n      var text = this.adaptor.append(parent, this.jax.unknownText(char, variant));\n      this.place(x, y, text);\n      return this.jax.measureTextNodeWithCache(text, char, variant).w;\n    }\n\n    return w;\n  };\n\n  SVGWrapper.prototype.charNode = function (variant, C, path) {\n    var cache = this.jax.options.fontCache;\n    return cache !== 'none' ? this.useNode(variant, C, path) : this.pathNode(C, path);\n  };\n\n  SVGWrapper.prototype.pathNode = function (C, path) {\n    return this.svg('path', {\n      'data-c': C,\n      d: path\n    });\n  };\n\n  SVGWrapper.prototype.useNode = function (variant, C, path) {\n    var use = this.svg('use', {\n      'data-c': C\n    });\n    var id = '#' + this.jax.fontCache.cachePath(variant, C, path);\n    this.adaptor.setAttribute(use, 'href', id, svg_js_1.XLINKNS);\n    return use;\n  };\n\n  SVGWrapper.prototype.drawBBox = function () {\n    var _a = this.getBBox(),\n        w = _a.w,\n        h = _a.h,\n        d = _a.d;\n\n    var box = this.svg('g', {\n      style: {\n        opacity: .25\n      }\n    }, [this.svg('rect', {\n      fill: 'red',\n      height: this.fixed(h),\n      width: this.fixed(w)\n    }), this.svg('rect', {\n      fill: 'green',\n      height: this.fixed(d),\n      width: this.fixed(w),\n      y: this.fixed(-d)\n    })]);\n    var node = this.element || this.parent.element;\n    this.adaptor.append(node, box);\n  };\n\n  SVGWrapper.prototype.html = function (type, def, content) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (content === void 0) {\n      content = [];\n    }\n\n    return this.jax.html(type, def, content);\n  };\n\n  SVGWrapper.prototype.svg = function (type, def, content) {\n    if (def === void 0) {\n      def = {};\n    }\n\n    if (content === void 0) {\n      content = [];\n    }\n\n    return this.jax.svg(type, def, content);\n  };\n\n  SVGWrapper.prototype.text = function (text) {\n    return this.jax.text(text);\n  };\n\n  SVGWrapper.prototype.fixed = function (x, n) {\n    if (n === void 0) {\n      n = 1;\n    }\n\n    return this.jax.fixed(x * 1000, n);\n  };\n\n  SVGWrapper.kind = 'unknown';\n  return SVGWrapper;\n}(Wrapper_js_1.CommonWrapper);\n\nexports.SVGWrapper = SVGWrapper;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/output/svg/Wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGWrapper class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList} from '../../util/Options.js';\nimport {CommonWrapper, AnyWrapperClass, Constructor} from '../common/Wrapper.js';\nimport {SVG, XLINKNS} from '../svg.js';\nimport {SVGWrapperFactory} from './WrapperFactory.js';\nimport {SVGFontData, SVGDelimiterData, SVGCharOptions} from './FontData.js';\n\nexport {Constructor, StringMap} from '../common/Wrapper.js';\n\n/*****************************************************************/\n\n/**\n * Shorthand for makeing a SVGWrapper constructor\n */\nexport type SVGConstructor<N, T, D> = Constructor<SVGWrapper<N, T, D>>;\n\n\n/*****************************************************************/\n/**\n *  The type of the SVGWrapper class (used when creating the wrapper factory for this class)\n */\nexport interface SVGWrapperClass extends AnyWrapperClass {\n\n  kind: string;\n\n}\n\n/*****************************************************************/\n/**\n *  The base SVGWrapper class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class SVGWrapper<N, T, D> extends\nCommonWrapper<\n  SVG<N, T, D>,\n  SVGWrapper<N, T, D>,\n  SVGWrapperClass,\n  SVGCharOptions,\n  SVGDelimiterData,\n  SVGFontData\n> {\n\n  /**\n   * The kind of wrapper\n   */\n  public static kind: string = 'unknown';\n\n  /**\n   * The factory used to create more SVGWrappers\n   */\n  protected factory: SVGWrapperFactory<N, T, D>;\n\n  /**\n   * @override\n   */\n  public parent: SVGWrapper<N, T, D>;\n  /**\n   * @override\n   */\n  public childNodes: SVGWrapper<N, T, D>[];\n\n  /**\n   * The SVG element generated for this wrapped node\n   */\n  public element: N = null;\n\n  /**\n   * @override\n   */\n  public font: SVGFontData;\n\n  /*******************************************************************/\n\n  /**\n   * Create the HTML for the wrapped node.\n   *\n   * @param {N} parent  The HTML node where the output is added\n   */\n  public toSVG(parent: N) {\n    this.addChildren(this.standardSVGnode(parent));\n  }\n\n  /**\n   * @param {N} parent  The element in which to add the children\n   */\n  public addChildren(parent: N) {\n    let x = 0;\n    for (const child of this.childNodes) {\n      child.toSVG(parent);\n      if (child.element) {\n        child.place(x + child.bbox.L * child.bbox.rscale, 0);\n      }\n      x += (child.bbox.L + child.bbox.w + child.bbox.R) * child.bbox.rscale;\n    }\n  }\n\n  /*******************************************************************/\n\n  /**\n   * Create the standard SVG element for the given wrapped node.\n   *\n   * @param {N} parent  The HTML element in which the node is to be created\n   * @returns {N}  The root of the HTML tree for the wrapped node's output\n   */\n  protected standardSVGnode(parent: N): N {\n    const svg = this.createSVGnode(parent);\n    this.handleStyles();\n    this.handleScale();\n    this.handleColor();\n    this.handleAttributes();\n    return svg;\n  }\n\n  /**\n   * @param {N} parent  The HTML element in which the node is to be created\n   * @returns {N}  The root of the HTML tree for the wrapped node's output\n   */\n  protected createSVGnode(parent: N): N {\n    this.element = this.svg('g', {'data-mml-node': this.node.kind});\n    const href = this.node.attributes.get('href');\n    if (href) {\n      parent = this.adaptor.append(parent, this.svg('a', {href: href})) as N;\n      const {h, d, w} = this.getBBox();\n      this.adaptor.append(this.element, this.svg('rect', {\n        'data-hitbox': true, fill: 'none', stroke: 'none', 'pointer-events': 'all',\n        width: this.fixed(w), height: this.fixed(h + d), y: this.fixed(-d)\n      }));\n    }\n    this.adaptor.append(parent, this.element) as N;\n    return this.element;\n  }\n\n  /**\n   * Set the CSS styles for the svg element\n   */\n  protected handleStyles() {\n    if (!this.styles) return;\n    const styles = this.styles.cssText;\n    if (styles) {\n      this.adaptor.setAttribute(this.element, 'style', styles);\n    }\n  }\n\n  /**\n   * Set the (relative) scaling factor for the node\n   */\n  protected handleScale() {\n    if (this.bbox.rscale !== 1) {\n      const scale = 'scale(' + this.fixed(this.bbox.rscale / 1000, 3) + ')';\n      this.adaptor.setAttribute(this.element, 'transform', scale);\n    }\n  }\n\n  /**\n   * Add the foreground and background colors\n   * (Only look at explicit attributes, since inherited ones will\n   *  be applied to a parent element, and we will inherit from that)\n   */\n  protected handleColor() {\n    const adaptor = this.adaptor;\n    const attributes = this.node.attributes;\n    const mathcolor = attributes.getExplicit('mathcolor') as string;\n    const color = attributes.getExplicit('color') as string;\n    const mathbackground = attributes.getExplicit('mathbackground') as string;\n    const background = attributes.getExplicit('background') as string;\n    if (mathcolor || color) {\n      adaptor.setAttribute(this.element, 'fill', mathcolor || color);\n      adaptor.setAttribute(this.element, 'stroke', mathcolor || color);\n    }\n    if (mathbackground || background) {\n      let {h, d, w} = this.getBBox();\n      let rect = this.svg('rect', {\n        fill: mathbackground || background,\n        x: 0, y: this.fixed(-d),\n        width: this.fixed(w),\n        height: this.fixed(h + d),\n        'data-bgcolor': true\n      });\n      let child = adaptor.firstChild(this.element);\n      if (child) {\n        adaptor.insert(rect, child);\n      } else {\n        adaptor.append(this.element, rect);\n      }\n    }\n  }\n\n  /**\n   * Copy RDFa, aria, and other tags from the MathML to the SVG output nodes.\n   * Don't copy those in the skipAttributes list, or anything that already exists\n   * as a property of the node (e.g., no \"onlick\", etc.).  If a name in the\n   * skipAttributes object is set to false, then the attribute WILL be copied.\n   * Add the class to any other classes already in use.\n   */\n  protected handleAttributes() {\n    const attributes = this.node.attributes;\n    const defaults = attributes.getAllDefaults();\n    const skip = SVGWrapper.skipAttributes;\n    for (const name of attributes.getExplicitNames()) {\n      if (skip[name] === false || (!(name in defaults) && !skip[name] &&\n                                   !this.adaptor.hasAttribute(this.element, name))) {\n        this.adaptor.setAttribute(this.element, name, attributes.getExplicit(name) as string);\n      }\n    }\n    if (attributes.get('class')) {\n      const names = (attributes.get('class') as string).trim().split(/ +/);\n      for (const name of names) {\n        this.adaptor.addClass(this.element, name);\n      }\n    }\n  }\n\n  /*******************************************************************/\n\n  /**\n   * @param {number} x   The x-offset for the element\n   * @param {number} y   The y-offset for the element\n   * @param {N} element  The element to be placed\n   */\n  public place(x: number, y: number, element: N = null) {\n    if (!(x || y)) return;\n    if (!element) {\n      element = this.element;\n      y = this.handleId(y);\n    }\n    const translate = `translate(${this.fixed(x)},${this.fixed(y)})`;\n    const transform = this.adaptor.getAttribute(element, 'transform') || '';\n    this.adaptor.setAttribute(element, 'transform', translate + (transform ? ' ' + transform : ''));\n  }\n\n  /**\n   * Firefox and Safari don't scroll to the top of the element with an Id, so\n   *   we shift the element up and then translate its contents down in order to\n   *   correct for their positioning.  Also, Safari will go to the baseline of\n   *   a <text> element (e.g., when mtextInheritFont is true), so add a text\n   *   element to help Safari get the right location.\n   *\n   * @param {number} y     The current offset of the element\n   * @return {number}      The new offset for the element if it has an id\n   */\n  protected handleId(y: number): number {\n    if (!this.node.attributes || !this.node.attributes.get('id')) {\n      return y;\n    }\n    const adaptor = this.adaptor;\n    const h = this.getBBox().h;\n    //\n    //  Remove the element's children and put them into a <g> with transform\n    //\n    const children =  adaptor.childNodes(this.element);\n    children.forEach(child => adaptor.remove(child));\n    const g = this.svg('g', {'data-idbox': true, transform: `translate(0,${this.fixed(-h)})`}, children);\n    //\n    //  Add the text element (not transformed) and the transformed <g>\n    //\n    adaptor.append(this.element, this.svg('text', {'data-id-align': true} , [this.text('')]));\n    adaptor.append(this.element, g);\n    return y + h;\n  }\n\n  /**\n   * Return the first child element, skipping id align boxes and href hit boxes\n   *\n   * @return {N}   The first \"real\" child element\n   */\n  public firstChild(): N {\n    const adaptor = this.adaptor;\n    let child = adaptor.firstChild(this.element);\n    if (child && adaptor.kind(child) === 'text' && adaptor.getAttribute(child, 'data-id-align')) {\n      child = adaptor.firstChild(adaptor.next(child));\n    }\n    if (child && adaptor.kind(child) === 'rect' && adaptor.getAttribute(child, 'data-hitbox')) {\n      child = adaptor.next(child);\n    }\n    return child;\n  }\n\n  /**\n   * @param {number} n        The character number\n   * @param {number} x        The x-position of the character\n   * @param {number} y        The y-position of the character\n   * @param {N} parent        The container for the character\n   * @param {string} variant  The variant to use for the character\n   * @return {number}         The width of the character\n   */\n  public placeChar(n: number, x: number, y: number, parent: N, variant: string = null): number {\n    if (variant === null) {\n      variant = this.variant;\n    }\n    const C = n.toString(16).toUpperCase();\n    const [ , , w, data] = this.getVariantChar(variant, n);\n    if ('p' in data) {\n      const path = (data.p ? 'M' + data.p + 'Z' : '');\n      this.place(x, y, this.adaptor.append(parent, this.charNode(variant, C, path)));\n    } else if ('c' in data) {\n      const g = this.adaptor.append(parent, this.svg('g', {'data-c': C}));\n      this.place(x, y, g);\n      x = 0;\n      for (const n of this.unicodeChars(data.c, variant)) {\n        x += this.placeChar(n, x, y, g, variant);\n      }\n    } else if (data.unknown) {\n      const char = String.fromCodePoint(n);\n      const text = this.adaptor.append(parent, this.jax.unknownText(char, variant));\n      this.place(x, y, text);\n      return this.jax.measureTextNodeWithCache(text, char, variant).w;\n    }\n    return w;\n  }\n\n  /**\n   * @param {string} variant    The name of the variant being used\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <path> or <use> node for the glyph\n   */\n  protected charNode(variant: string, C: string, path: string): N {\n    const cache = this.jax.options.fontCache;\n    return (cache !== 'none' ? this.useNode(variant, C, path) : this.pathNode(C, path));\n  }\n\n  /**\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <path> for the glyph\n   */\n  protected pathNode(C: string, path: string): N {\n    return this.svg('path', {'data-c': C, d: path});\n  }\n\n  /**\n   * @param {string} variant    The name of the variant being used\n   * @param {string} C          The hex string for the character code\n   * @param {string} path       The data from the character\n   * @return {N}                The <use> node for the glyph\n   */\n  protected useNode(variant: string, C: string, path: string): N {\n    const use = this.svg('use', {'data-c': C});\n    const id = '#' + this.jax.fontCache.cachePath(variant, C, path);\n    this.adaptor.setAttribute(use, 'href', id, XLINKNS);\n    return use;\n  }\n\n  /*******************************************************************/\n  /**\n   * For debugging\n   */\n\n  public drawBBox() {\n    let {w, h, d}  = this.getBBox();\n    const box = this.svg('g', {style: {\n      opacity: .25\n    }}, [\n      this.svg('rect', {\n        fill: 'red',\n        height: this.fixed(h),\n        width: this.fixed(w)\n      }),\n      this.svg('rect', {\n        fill: 'green',\n        height: this.fixed(d),\n        width: this.fixed(w),\n        y: this.fixed(-d)\n      })\n    ] as N[]);\n    const node = this.element || this.parent.element;\n    this.adaptor.append(node, box);\n  }\n\n  /*******************************************************************/\n  /*\n   * Easy access to some utility routines\n   */\n\n  /**\n   * @param {string} type      The tag name of the HTML node to be created\n   * @param {OptionList} def   The properties to set for the created node\n   * @param {(N|T)[]} content  The child nodes for the created HTML node\n   * @return {N}               The generated HTML tree\n   */\n  public html(type: string, def: OptionList = {}, content: (N | T)[] = []): N {\n    return this.jax.html(type, def, content);\n  }\n\n  /**\n   * @param {string} type      The tag name of the svg node to be created\n   * @param {OptionList} def   The properties to set for the created node\n   * @param {(N|T)[]} content  The child nodes for the created SVG node\n   * @return {N}               The generated SVG tree\n   */\n  public svg(type: string, def: OptionList = {}, content: (N | T)[] = []): N {\n    return this.jax.svg(type, def, content);\n  }\n\n  /**\n   * @param {string} text  The text from which to create an HTML text node\n   * @return {T}  The generated text node with the given text\n   */\n  public text(text: string): T {\n    return this.jax.text(text);\n  }\n\n  /**\n   * @param {number} x   The dimension to display\n   * @param {number=} n  The number of digits to display\n   * @return {string}    The dimension with the given number of digits (minus trailing zeros)\n   */\n  public fixed(x: number, n: number = 1): string {\n    return this.jax.fixed(x * 1000, n);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}