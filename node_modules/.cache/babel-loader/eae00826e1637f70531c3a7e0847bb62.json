{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtextMixin = void 0;\n\nfunction CommonMtextMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    class_1.prototype.getVariant = function () {\n      var options = this.jax.options;\n      var data = this.jax.math.outputData;\n      var merror = (!!data.merrorFamily || !!options.merrorFont) && this.node.Parent.isKind('merror');\n\n      if (!!data.mtextFamily || !!options.mtextFont || merror) {\n        var variant = this.node.attributes.get('mathvariant');\n        var font = this.constructor.INHERITFONTS[variant] || this.jax.font.getCssFont(variant);\n        var family = font[0] || (merror ? data.merrorFamily || options.merrorFont : data.mtextFamily || options.mtextFont);\n        this.variant = this.explicitVariant(family, font[2] ? 'bold' : '', font[1] ? 'italic' : '');\n        return;\n      }\n\n      _super.prototype.getVariant.call(this);\n    };\n\n    return class_1;\n  }(Base), _a.INHERITFONTS = {\n    normal: ['', false, false],\n    bold: ['', false, true],\n    italic: ['', true, false],\n    'bold-italic': ['', true, true]\n  }, _a;\n}\n\nexports.CommonMtextMixin = CommonMtextMixin;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/common/Wrappers/mtext.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgB,gBAAhB,CAA+D,IAA/D,EAAsE;;;AAEpE,SAAA,EAAA,GAAA,UAAA,MAAA,EAAA;AAAqB,IAAA,SAAA,CAAA,OAAA,EAAA,MAAA,CAAA;;AAAd,aAAA,OAAA,GAAA;;AAsCN;;AApBW,IAAA,OAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;AACE,UAAM,OAAO,GAAG,KAAK,GAAL,CAAS,OAAzB;AACA,UAAM,IAAI,GAAG,KAAK,GAAL,CAAS,IAAT,CAAc,UAA3B;AAMA,UAAM,MAAM,GAAI,CAAC,CAAC,CAAC,IAAI,CAAC,YAAP,IAAuB,CAAC,CAAC,OAAO,CAAC,UAAlC,KAAiD,KAAK,IAAL,CAAU,MAAV,CAAiB,MAAjB,CAAwB,QAAxB,CAAjE;;AACA,UAAI,CAAC,CAAC,IAAI,CAAC,WAAP,IAAsB,CAAC,CAAC,OAAO,CAAC,SAAhC,IAA6C,MAAjD,EAAyD;AACvD,YAAM,OAAO,GAAG,KAAK,IAAL,CAAU,UAAV,CAAqB,GAArB,CAAyB,aAAzB,CAAhB;AACA,YAAM,IAAI,GAAI,KAAK,WAAL,CAAyB,YAAzB,CAAsC,OAAtC,KAAkD,KAAK,GAAL,CAAS,IAAT,CAAc,UAAd,CAAyB,OAAzB,CAAhE;AACA,YAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAJ,KAAY,MAAM,GAAG,IAAI,CAAC,YAAL,IAAqB,OAAO,CAAC,UAAhC,GACG,IAAI,CAAC,WAAL,IAAoB,OAAO,CAAC,SADjD,CAAf;AAEA,aAAK,OAAL,GAAe,KAAK,eAAL,CAAqB,MAArB,EAA6B,IAAI,CAAC,CAAD,CAAJ,GAAU,MAAV,GAAmB,EAAhD,EAAoD,IAAI,CAAC,CAAD,CAAJ,GAAU,QAAV,GAAqB,EAAzE,CAAf;AACA;AACD;;AACD,MAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB;AACD,KAlBS;;AAoBZ,WAAA,OAAA;AAAC,GAtCD,CAAqB,IAArB,CAAA,EAQgB,EAAA,CAAA,YAAA,GAAe;AAC3B,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,KAAL,EAAY,KAAZ,CADmB;AAE3B,IAAA,IAAI,EAAE,CAAC,EAAD,EAAK,KAAL,EAAY,IAAZ,CAFqB;AAG3B,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,IAAL,EAAW,KAAX,CAHmB;AAI3B,mBAAe,CAAC,EAAD,EAAK,IAAL,EAAW,IAAX;AAJY,GAR/B,EAsCE,EAtCF;AAwCD;;AA1CD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2019-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMtext wrapper mixin for the MmlMtext object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\n\n/*****************************************************************/\n/**\n * The CommonMtext interface\n */\nexport interface CommonMtext extends AnyWrapper {\n}\n\n/**\n * Shorthand for the CommonMtext constructor\n */\nexport type MtextConstructor = Constructor<CommonMtext>;\n\n/*****************************************************************/\n/**\n *  The CommonMtext wrapper mixin for the MmlMtext object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtextMixin<T extends WrapperConstructor>(Base: T): MtextConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * The font-family, weight, and style to use for the variants when mtextInheritFont\n     * is true or mtextFont is specified.  If not in this list, then the font's\n     * getCssFont() is called.  When the font family is not specified (as in these four),\n     * the inherited or specified font is used.\n     */\n    public static INHERITFONTS = {\n      normal: ['', false, false],\n      bold: ['', false, true],\n      italic: ['', true, false],\n      'bold-italic': ['', true, true]\n    };\n\n    /**\n     * @override\n     */\n    protected getVariant() {\n      const options = this.jax.options;\n      const data = this.jax.math.outputData;\n      //\n      //  If the font is to be inherited from the surrounding text, check the mathvariant\n      //  and see if it allows for inheritance. If so, set the variant appropriately,\n      //  otherwise get the usual variant.\n      //\n      const merror = ((!!data.merrorFamily || !!options.merrorFont) && this.node.Parent.isKind('merror'));\n      if (!!data.mtextFamily || !!options.mtextFont || merror) {\n        const variant = this.node.attributes.get('mathvariant') as string;\n        const font = (this.constructor as any).INHERITFONTS[variant] || this.jax.font.getCssFont(variant);\n        const family = font[0] || (merror ? data.merrorFamily || options.merrorFont :\n                                            data.mtextFamily || options.mtextFont);\n        this.variant = this.explicitVariant(family, font[2] ? 'bold' : '', font[1] ? 'italic' : '');\n        return;\n      }\n      super.getVariant();\n    }\n\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}