{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CssStyles = void 0;\n\nvar CssStyles = function () {\n  function CssStyles(styles) {\n    if (styles === void 0) {\n      styles = null;\n    }\n\n    this.styles = {};\n    this.addStyles(styles);\n  }\n\n  Object.defineProperty(CssStyles.prototype, \"cssText\", {\n    get: function () {\n      return this.getStyleString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  CssStyles.prototype.addStyles = function (styles) {\n    var e_1, _a;\n\n    if (!styles) return;\n\n    try {\n      for (var _b = __values(Object.keys(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var style = _c.value;\n\n        if (!this.styles[style]) {\n          this.styles[style] = {};\n        }\n\n        Object.assign(this.styles[style], styles[style]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  CssStyles.prototype.removeStyles = function () {\n    var e_2, _a;\n\n    var selectors = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      selectors[_i] = arguments[_i];\n    }\n\n    try {\n      for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {\n        var selector = selectors_1_1.value;\n        delete this.styles[selector];\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  CssStyles.prototype.clear = function () {\n    this.styles = {};\n  };\n\n  CssStyles.prototype.getStyleString = function () {\n    return this.getStyleRules().join('\\n\\n');\n  };\n\n  CssStyles.prototype.getStyleRules = function () {\n    var e_3, _a;\n\n    var selectors = Object.keys(this.styles);\n    var defs = new Array(selectors.length);\n    var i = 0;\n\n    try {\n      for (var selectors_2 = __values(selectors), selectors_2_1 = selectors_2.next(); !selectors_2_1.done; selectors_2_1 = selectors_2.next()) {\n        var selector = selectors_2_1.value;\n        defs[i++] = selector + ' {\\n' + this.getStyleDefString(this.styles[selector]) + '\\n}';\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (selectors_2_1 && !selectors_2_1.done && (_a = selectors_2.return)) _a.call(selectors_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return defs;\n  };\n\n  CssStyles.prototype.getStyleDefString = function (styles) {\n    var e_4, _a;\n\n    var properties = Object.keys(styles);\n    var values = new Array(properties.length);\n    var i = 0;\n\n    try {\n      for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {\n        var property = properties_1_1.value;\n        values[i++] = '  ' + property + ': ' + styles[property] + ';';\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return values.join('\\n');\n  };\n\n  return CssStyles;\n}();\n\nexports.CssStyles = CssStyles;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/util/StyleList.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CssStyles class for handling stylesheets\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n * The data for a selector\n */\nexport type StyleData = {\n  [property: string]: string | number;\n};\n\n/**\n * A list of selectors and their data (basically a stylesheet)\n */\nexport type StyleList = {\n  [selector: string]: StyleData;\n};\n\n/******************************************************************************/\n/**\n * The CssStyles class (for managing a collection of CSS style definitions)\n */\n\nexport class CssStyles {\n  /**\n   * The styles as they currently stand\n   */\n  protected styles: StyleList = {};\n\n  /**\n   * @return {string}  The styles as a CSS string\n   */\n  get cssText(): string {\n    return this.getStyleString();\n  }\n\n  /**\n   * @param {StyleList} styles  The initial styles to use, if any\n   * @constructor\n   */\n  constructor(styles: StyleList = null) {\n    this.addStyles(styles);\n  }\n\n  /**\n   * @param {StyleList} styles  The styles to combine with the existing ones\n   */\n  public addStyles(styles: StyleList) {\n    if (!styles) return;\n    for (const style of Object.keys(styles)) {\n      if (!this.styles[style]) {\n        this.styles[style] = {};\n      }\n      Object.assign(this.styles[style], styles[style]);\n    }\n  }\n\n  /**\n   * @param {string[]} selectors  The selectors for the styles to remove\n   */\n  public removeStyles(...selectors: string[]) {\n    for (const selector of selectors) {\n      delete this.styles[selector];\n    }\n  }\n\n  /**\n   * Clear all the styles\n   */\n  public clear() {\n    this.styles = {};\n  }\n\n  /**\n   * @return {string} The CSS string for the style list\n   */\n  public getStyleString(): string {\n    return this.getStyleRules().join('\\n\\n');\n  }\n\n  /**\n   * @return {string[]}  An array of rule strings for the style list\n   */\n  public getStyleRules(): string[] {\n    const selectors = Object.keys(this.styles);\n    const defs: string[] = new Array(selectors.length);\n    let i = 0;\n    for (const selector of selectors) {\n      defs[i++] = selector + ' {\\n' + this.getStyleDefString(this.styles[selector]) + '\\n}';\n    }\n    return defs;\n  }\n\n  /**\n   * @param {StyleData} styles  The style data to be stringified\n   * @return {string}           The CSS string for the given data\n   */\n  public getStyleDefString(styles: StyleData): string {\n    const properties = Object.keys(styles);\n    const values: string[] = new Array(properties.length);\n    let i = 0;\n    for (const property of properties) {\n      values[i++] = '  ' + property + ': ' + styles[property] + ';';\n    }\n    return values.join('\\n');\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}