{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMsubsupMixin = exports.CommonMsupMixin = exports.CommonMsubMixin = void 0;\n\nfunction CommonMsubMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Object.defineProperty(class_1.prototype, \"scriptChild\", {\n      get: function () {\n        return this.childNodes[this.node.sub];\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    class_1.prototype.getOffset = function () {\n      return [0, -this.getV()];\n    };\n\n    return class_1;\n  }(Base), _a.useIC = false, _a;\n}\n\nexports.CommonMsubMixin = CommonMsubMixin;\n\nfunction CommonMsupMixin(Base) {\n  return function (_super) {\n    __extends(class_2, _super);\n\n    function class_2() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    Object.defineProperty(class_2.prototype, \"scriptChild\", {\n      get: function () {\n        return this.childNodes[this.node.sup];\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    class_2.prototype.getOffset = function () {\n      var x = this.getAdjustedIc() - (this.baseRemoveIc ? 0 : this.baseIc);\n      return [x, this.getU()];\n    };\n\n    return class_2;\n  }(Base);\n}\n\nexports.CommonMsupMixin = CommonMsupMixin;\n\nfunction CommonMsubsupMixin(Base) {\n  var _a;\n\n  return _a = function (_super) {\n    __extends(class_3, _super);\n\n    function class_3() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.UVQ = null;\n      return _this;\n    }\n\n    Object.defineProperty(class_3.prototype, \"subChild\", {\n      get: function () {\n        return this.childNodes[this.node.sub];\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_3.prototype, \"supChild\", {\n      get: function () {\n        return this.childNodes[this.node.sup];\n      },\n      enumerable: false,\n      configurable: true\n    });\n\n    class_3.prototype.computeBBox = function (bbox, recompute) {\n      if (recompute === void 0) {\n        recompute = false;\n      }\n\n      var basebox = this.baseChild.getBBox();\n\n      var _a = __read([this.subChild.getBBox(), this.supChild.getBBox()], 2),\n          subbox = _a[0],\n          supbox = _a[1];\n\n      bbox.empty();\n      bbox.append(basebox);\n      var w = this.getBaseWidth();\n      var x = this.getAdjustedIc();\n\n      var _b = __read(this.getUVQ(), 2),\n          u = _b[0],\n          v = _b[1];\n\n      bbox.combine(subbox, w, v);\n      bbox.combine(supbox, w + x, u);\n      bbox.w += this.font.params.scriptspace;\n      bbox.clean();\n      this.setChildPWidths(recompute);\n    };\n\n    class_3.prototype.getUVQ = function (subbox, supbox) {\n      if (subbox === void 0) {\n        subbox = this.subChild.getBBox();\n      }\n\n      if (supbox === void 0) {\n        supbox = this.supChild.getBBox();\n      }\n\n      var basebox = this.baseCore.getBBox();\n      if (this.UVQ) return this.UVQ;\n      var tex = this.font.params;\n      var t = 3 * tex.rule_thickness;\n      var subscriptshift = this.length2em(this.node.attributes.get('subscriptshift'), tex.sub2);\n      var drop = this.baseCharZero(basebox.d * this.baseScale + tex.sub_drop * subbox.rscale);\n\n      var _a = __read([this.getU(), Math.max(drop, subscriptshift)], 2),\n          u = _a[0],\n          v = _a[1];\n\n      var q = u - supbox.d * supbox.rscale - (subbox.h * subbox.rscale - v);\n\n      if (q < t) {\n        v += t - q;\n        var p = 4 / 5 * tex.x_height - (u - supbox.d * supbox.rscale);\n\n        if (p > 0) {\n          u += p;\n          v -= p;\n        }\n      }\n\n      u = Math.max(this.length2em(this.node.attributes.get('superscriptshift'), u), u);\n      v = Math.max(this.length2em(this.node.attributes.get('subscriptshift'), v), v);\n      q = u - supbox.d * supbox.rscale - (subbox.h * subbox.rscale - v);\n      this.UVQ = [u, -v, q];\n      return this.UVQ;\n    };\n\n    return class_3;\n  }(Base), _a.useIC = false, _a;\n}\n\nexports.CommonMsubsupMixin = CommonMsubsupMixin;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/common/Wrappers/msubsup.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMsubsup wrapper mixin for the MmlMsubsup object\n *                and the special cases CommonMsub and CommonMsup\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, Constructor} from '../Wrapper.js';\nimport {CommonScriptbase, ScriptbaseConstructor} from './scriptbase.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {MmlMsubsup, MmlMsub, MmlMsup} from '../../../core/MmlTree/MmlNodes/msubsup.js';\n\n/*****************************************************************/\n/**\n * The CommonMsub interface\n *\n * @template W  The child-node Wrapper class\n */\nexport interface CommonMsub<W extends AnyWrapper> extends CommonScriptbase<W> {\n}\n\n/**\n * Shorthand for the CommonMsub constructor\n *\n * @template W  The child-node Wrapper class\n */\nexport type MsubConstructor<W extends AnyWrapper> = Constructor<CommonMsub<W>>;\n\n/*****************************************************************/\n/**\n * The CommonMsub wrapper mixin for the MmlMsub object\n *\n * @template W  The child-node Wrapper class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMsubMixin<\n  W extends AnyWrapper,\n  T extends ScriptbaseConstructor<W>\n>(Base: T): MsubConstructor<W> & T {\n\n  return class extends Base {\n\n    /**\n     * Do not include italic correction\n     */\n    public static useIC: boolean = false;\n\n    /**\n     * @override\n     */\n    public get scriptChild() {\n      return this.childNodes[(this.node as MmlMsub).sub];\n    }\n\n    /**\n     * Get the shift for the subscript\n     *\n     * @override\n     */\n    public getOffset() {\n      return [0, -this.getV()];\n    }\n\n  };\n\n}\n\n/*****************************************************************/\n/**\n * The CommonMsup interface\n *\n * @template W  The child-node Wrapper class\n */\nexport interface CommonMsup<W extends AnyWrapper> extends CommonScriptbase<W> {\n}\n\n/**\n * Shorthand for the CommonMsup constructor\n *\n * @template W  The child-node Wrapper class\n */\nexport type MsupConstructor<W extends AnyWrapper> = Constructor<CommonMsup<W>>;\n\n/*****************************************************************/\n/**\n * The CommonMsup wrapper mixin for the MmlMsup object\n *\n * @template W  The child-node Wrapper class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMsupMixin<\n  W extends AnyWrapper,\n  T extends ScriptbaseConstructor<W>\n>(Base: T): MsupConstructor<W> & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    public get scriptChild() {\n      return this.childNodes[(this.node as MmlMsup).sup];\n    }\n\n    /**\n     * Get the shift for the superscript\n     *\n     * @override\n     */\n    public getOffset() {\n      const x = this.getAdjustedIc() - (this.baseRemoveIc ? 0 : this.baseIc);\n      return [x, this.getU()];\n    }\n\n  };\n\n}\n\n/*****************************************************************/\n/**\n * The CommonMsubsup interface\n *\n * @template W  The child-node Wrapper class\n */\nexport interface CommonMsubsup<W extends AnyWrapper> extends CommonScriptbase<W> {\n\n  /**\n   *  Cached values for the script offsets and separation (so if they are\n   *  computed in computeBBox(), they don't have to be recomputed during output)\n   */\n  UVQ: number[];\n\n  /**\n   * The wrapper for the subscript\n   */\n  readonly subChild: W;\n\n  /**\n   * The wrapper for the superscript\n   */\n  readonly supChild: W;\n\n  /**\n   * Get the shift for the scripts and their separation (TeXBook Appendix G 18adef)\n   *\n   * @param {BBox} subbox     The bounding box of the superscript\n   * @param {BBox} supbox     The bounding box of the subscript\n   * @return {number[]}       The vertical offsets for super and subscripts, and the space between them\n   */\n  getUVQ(subbox?: BBox, supbox?: BBox): number[];\n}\n\n/**\n * Shorthand for the CommonMsubsup constructor\n *\n * @template W  The child-node Wrapper class\n */\nexport type MsubsupConstructor<W extends AnyWrapper> = Constructor<CommonMsubsup<W>>;\n\n/*****************************************************************/\n/**\n * The CommomMsubsup wrapper for the MmlMsubsup object\n *\n * @template W  The child-node Wrapper class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMsubsupMixin<\n  W extends AnyWrapper,\n  T extends ScriptbaseConstructor<W>\n>(Base: T): MsubsupConstructor<W> & T {\n\n  return class extends Base {\n\n    /**\n     * Do not include italic correction\n     */\n    public static useIC: boolean = false;\n\n    /**\n     *  Cached values for the script offsets and separation (so if they are\n     *  computed in computeBBox(), they don't have to be recomputed during output)\n     */\n    public UVQ: number[] = null;\n\n    /**\n     * @return {W}  The wrapper for the subscript\n     */\n    public get subChild(): W {\n      return this.childNodes[(this.node as MmlMsubsup).sub];\n    }\n\n    /**\n     * @return {W}  The wrapper for the superscript\n     */\n    public get supChild(): W {\n      return this.childNodes[(this.node as MmlMsubsup).sup];\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, recompute: boolean = false) {\n      const basebox = this.baseChild.getBBox();\n      const [subbox, supbox] = [this.subChild.getBBox(), this.supChild.getBBox()];\n      bbox.empty();\n      bbox.append(basebox);\n      const w = this.getBaseWidth();\n      const x = this.getAdjustedIc();\n      const [u, v] = this.getUVQ();\n      bbox.combine(subbox, w, v);\n      bbox.combine(supbox, w + x, u);\n      bbox.w += this.font.params.scriptspace;\n      bbox.clean();\n      this.setChildPWidths(recompute);\n    }\n\n    /**\n     * Get the shift for the scripts and their separation (TeXBook Appendix G 18adef)\n     *\n     * @param {BBox} subbox     The bounding box of the superscript\n     * @param {BBox} supbox     The bounding box of the subscript\n     * @return {number[]}       The vertical offsets for super and subscripts, and the space between them\n     */\n    public getUVQ(\n      subbox: BBox = this.subChild.getBBox(),\n      supbox: BBox = this.supChild.getBBox()\n    ): number[] {\n      const basebox = this.baseCore.getBBox();\n      if (this.UVQ) return this.UVQ;\n      const tex = this.font.params;\n      const t = 3 * tex.rule_thickness;\n      const subscriptshift = this.length2em(this.node.attributes.get('subscriptshift'), tex.sub2);\n      const drop = this.baseCharZero(basebox.d * this.baseScale + tex.sub_drop * subbox.rscale);\n      //\n      // u and v are the veritcal shifts of the scripts, initially set to minimum values and then adjusted\n      //\n      let [u, v] = [this.getU(), Math.max(drop, subscriptshift)];\n      //\n      // q is the space currently between the super- and subscripts.\n      // If it is less than 3 rule thicknesses,\n      //   increase the subscript offset to make the space 3 rule thicknesses\n      //   If the bottom of the superscript is below 4/5 of the x-height\n      //     raise both the super- and subscripts by the difference\n      //     (make the bottom of the superscript be at 4/5 the x-height, and the\n      //      subscript 3 rule thickness below that).\n      //\n      let q = (u - supbox.d * supbox.rscale) - (subbox.h * subbox.rscale - v);\n      if (q < t) {\n        v += t - q;\n        const p = (4 / 5) * tex.x_height - (u - supbox.d * supbox.rscale);\n        if (p > 0) {\n          u += p;\n          v -= p;\n        }\n      }\n      //\n      // Make sure the shifts are at least the minimum amounts and\n      // return the shifts and the space between the scripts\n      //\n      u = Math.max(this.length2em(this.node.attributes.get('superscriptshift'), u), u);\n      v = Math.max(this.length2em(this.node.attributes.get('subscriptshift'), v), v);\n      q = (u - supbox.d * supbox.rscale) - (subbox.h * subbox.rscale - v);\n      this.UVQ = [u, -v, q];\n      return this.UVQ;\n    }\n\n  };\n\n}\n"]},"metadata":{},"sourceType":"script"}