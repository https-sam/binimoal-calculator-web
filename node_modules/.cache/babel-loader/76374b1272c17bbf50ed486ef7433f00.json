{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathML = void 0;\n\nvar InputJax_js_1 = require(\"../core/InputJax.js\");\n\nvar Options_js_1 = require(\"../util/Options.js\");\n\nvar FunctionList_js_1 = require(\"../util/FunctionList.js\");\n\nvar FindMathML_js_1 = require(\"./mathml/FindMathML.js\");\n\nvar MathMLCompile_js_1 = require(\"./mathml/MathMLCompile.js\");\n\nvar MathML = function (_super) {\n  __extends(MathML, _super);\n\n  function MathML(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = this;\n\n    var _a = __read(Options_js_1.separateOptions(options, FindMathML_js_1.FindMathML.OPTIONS, MathMLCompile_js_1.MathMLCompile.OPTIONS), 3),\n        mml = _a[0],\n        find = _a[1],\n        compile = _a[2];\n\n    _this = _super.call(this, mml) || this;\n    _this.findMathML = _this.options['FindMathML'] || new FindMathML_js_1.FindMathML(find);\n    _this.mathml = _this.options['MathMLCompile'] || new MathMLCompile_js_1.MathMLCompile(compile);\n    _this.mmlFilters = new FunctionList_js_1.FunctionList();\n    return _this;\n  }\n\n  MathML.prototype.setAdaptor = function (adaptor) {\n    _super.prototype.setAdaptor.call(this, adaptor);\n\n    this.findMathML.adaptor = adaptor;\n    this.mathml.adaptor = adaptor;\n  };\n\n  MathML.prototype.setMmlFactory = function (mmlFactory) {\n    _super.prototype.setMmlFactory.call(this, mmlFactory);\n\n    this.mathml.setMmlFactory(mmlFactory);\n  };\n\n  Object.defineProperty(MathML.prototype, \"processStrings\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MathML.prototype.compile = function (math, document) {\n    var mml = math.start.node;\n\n    if (!mml || !math.end.node || this.options['forceReparse'] || this.adaptor.kind(mml) === '#text') {\n      var mathml = this.executeFilters(this.preFilters, math, document, math.math || '<math></math>');\n      var doc = this.checkForErrors(this.adaptor.parse(mathml, 'text/' + this.options['parseAs']));\n      var body = this.adaptor.body(doc);\n\n      if (this.adaptor.childNodes(body).length !== 1) {\n        this.error('MathML must consist of a single element');\n      }\n\n      mml = this.adaptor.remove(this.adaptor.firstChild(body));\n\n      if (this.adaptor.kind(mml).replace(/^[a-z]+:/, '') !== 'math') {\n        this.error('MathML must be formed by a <math> element, not <' + this.adaptor.kind(mml) + '>');\n      }\n    }\n\n    mml = this.executeFilters(this.mmlFilters, math, document, mml);\n    return this.executeFilters(this.postFilters, math, document, this.mathml.compile(mml));\n  };\n\n  MathML.prototype.checkForErrors = function (doc) {\n    var err = this.adaptor.tags(this.adaptor.body(doc), 'parsererror')[0];\n\n    if (err) {\n      if (this.adaptor.textContent(err) === '') {\n        this.error('Error processing MathML');\n      }\n\n      this.options['parseError'].call(this, err);\n    }\n\n    return doc;\n  };\n\n  MathML.prototype.error = function (message) {\n    throw new Error(message);\n  };\n\n  MathML.prototype.findMath = function (node) {\n    return this.findMathML.findMath(node);\n  };\n\n  MathML.NAME = 'MathML';\n  MathML.OPTIONS = Options_js_1.defaultOptions({\n    parseAs: 'html',\n    forceReparse: false,\n    FindMathML: null,\n    MathMLCompile: null,\n    parseError: function (node) {\n      this.error(this.adaptor.textContent(node).replace(/\\n.*/g, ''));\n    }\n  }, InputJax_js_1.AbstractInputJax.OPTIONS);\n  return MathML;\n}(InputJax_js_1.AbstractInputJax);\n\nexports.MathML = MathML;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/input/mathml.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MathML InputJax object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractInputJax} from '../core/InputJax.js';\nimport {defaultOptions, separateOptions, OptionList} from '../util/Options.js';\nimport {FunctionList} from '../util/FunctionList.js';\nimport {MathDocument} from '../core/MathDocument.js';\nimport {MathItem} from '../core/MathItem.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {MmlFactory} from '../core/MmlTree/MmlFactory.js';\n\nimport {FindMathML} from './mathml/FindMathML.js';\nimport {MathMLCompile} from './mathml/MathMLCompile.js';\n\n/*****************************************************************/\n/**\n *  Implements the MathML class (extends AbstractInputJax)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class MathML<N, T, D> extends AbstractInputJax<N, T, D> {\n\n  /**\n   * The name of this input jax\n   */\n  public static NAME: string = 'MathML';\n\n  /**\n   * @override\n   */\n  public static OPTIONS: OptionList = defaultOptions({\n    parseAs: 'html',         // Whether to use HTML or XML parsing for the MathML string\n    forceReparse: false,     // Whether to force the string to be reparsed, or use the one from the document DOM\n    FindMathML: null,        // The FindMathML instance to override the default one\n    MathMLCompile: null,     // The MathMLCompile instance to override the default one\n    /*\n     * The function to use to handle a parsing error (throw an error by default)\n     */\n    parseError: function (node: Node) {\n      this.error(this.adaptor.textContent(node).replace(/\\n.*/g, ''));\n    }\n  }, AbstractInputJax.OPTIONS);\n\n  /**\n   * The FindMathML instance used to locate MathML in the document\n   */\n  protected findMathML: FindMathML<N, T, D>;\n\n  /**\n   * The MathMLCompile instance used to convert the MathML tree to internal format\n   */\n  protected mathml: MathMLCompile<N, T, D>;\n\n  /**\n   * A list of functions to call on the parsed MathML DOM before conversion to internal structure\n   */\n  protected mmlFilters: FunctionList;\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList = {}) {\n    let [mml, find, compile] = separateOptions(options, FindMathML.OPTIONS, MathMLCompile.OPTIONS);\n    super(mml);\n    this.findMathML = this.options['FindMathML'] || new FindMathML<N, T, D>(find);\n    this.mathml = this.options['MathMLCompile'] || new MathMLCompile<N, T, D>(compile);\n    this.mmlFilters = new FunctionList();\n  }\n\n  /**\n   * Set the adaptor in any of the objects that need it\n   *\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    super.setAdaptor(adaptor);\n    this.findMathML.adaptor = adaptor;\n    this.mathml.adaptor = adaptor;\n  }\n\n  /**\n   * @param {MmlFactory} mmlFactory  The MmlFactory to use for this MathML input jax\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    super.setMmlFactory(mmlFactory);\n    this.mathml.setMmlFactory(mmlFactory);\n  }\n\n  /**\n   * Don't process strings (process nodes)\n   *\n   * @override\n   */\n  public get processStrings() {\n    return false;\n  }\n\n  /**\n   * Convert a MathItem to internal format:\n   *   If there is no existing MathML node, or we are asked to reparse everything\n   *     Execute the preFilters on the math\n   *     Parse the MathML string in the desired format, and check the result for errors\n   *     If we got an HTML document:\n   *       Check that it has only one child (the <math> element), and use it\n   *     Otherwise\n   *       Use the root element from the XML document\n   *     If the node is not a <math> node, report the error.\n   *   Execute the mmlFilters on the parsed MathML\n   *   Compile the MathML to internal format, and execute the postFilters\n   *   Return the resulting internal format\n   *\n   * @override\n   */\n  public compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>) {\n    let mml = math.start.node;\n    if (!mml || !math.end.node || this.options['forceReparse'] || this.adaptor.kind(mml) === '#text') {\n      let mathml = this.executeFilters(this.preFilters, math, document, math.math || '<math></math>');\n      let doc = this.checkForErrors(this.adaptor.parse(mathml, 'text/' + this.options['parseAs']));\n      let body = this.adaptor.body(doc);\n      if (this.adaptor.childNodes(body).length !== 1) {\n        this.error('MathML must consist of a single element');\n      }\n      mml = this.adaptor.remove(this.adaptor.firstChild(body)) as N;\n      if (this.adaptor.kind(mml).replace(/^[a-z]+:/, '') !== 'math') {\n        this.error('MathML must be formed by a <math> element, not <' + this.adaptor.kind(mml) + '>');\n      }\n    }\n    mml = this.executeFilters(this.mmlFilters, math, document, mml);\n    return this.executeFilters(this.postFilters, math, document, this.mathml.compile(mml as N));\n  }\n\n  /**\n   * Check a parsed MathML string for errors.\n   *\n   * @param {D} doc  The document returns from the DOMParser\n   * @return {D}     The document\n   */\n  protected checkForErrors(doc: D): D {\n    let err = this.adaptor.tags(this.adaptor.body(doc), 'parsererror')[0];\n    if (err) {\n      if (this.adaptor.textContent(err) === '') {\n        this.error('Error processing MathML');\n      }\n      this.options['parseError'].call(this, err);\n    }\n    return doc;\n  }\n\n  /**\n   * Throw an error\n   *\n   * @param {string} message  The error message to produce\n   */\n  protected error(message: string) {\n    throw new Error(message);\n  }\n\n  /**\n   * @override\n   */\n  public findMath(node: N) {\n    return this.findMathML.findMath(node);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}