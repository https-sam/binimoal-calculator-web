{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LiteElement = void 0;\n\nvar LiteElement = function () {\n  function LiteElement(kind, attributes, children) {\n    var e_1, _a;\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (children === void 0) {\n      children = [];\n    }\n\n    this.kind = kind;\n    this.attributes = __assign({}, attributes);\n    this.children = __spreadArray([], __read(children));\n\n    try {\n      for (var _b = __values(this.children), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        child.parent = this;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.styles = null;\n  }\n\n  return LiteElement;\n}();\n\nexports.LiteElement = LiteElement;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/adaptors/lite/Element.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,IAAA,WAAA,GAAA,YAAA;AAgCE,WAAA,WAAA,CAAY,IAAZ,EAA0B,UAA1B,EAA8D,QAA9D,EAAuF;;;AAA7D,QAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,UAAA,GAAA,EAAA;AAAkC;;AAAE,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAA,EAAA;AAAyB;;AACrF,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,UAAL,GAAe,QAAA,CAAA,EAAA,EAAO,UAAP,CAAf;AACA,SAAK,QAAL,GAAa,aAAA,CAAA,EAAA,EAAA,MAAA,CAAO,QAAP,CAAA,CAAb;;;AACA,WAAoB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,QAAL,CAAA,EAAa,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAiC,CAAA,EAAA,CAAA,IAAjC,EAAiC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjC,EAAmC;AAA9B,YAAM,KAAK,GAAA,EAAA,CAAA,KAAX;AACH,QAAA,KAAK,CAAC,MAAN,GAAe,IAAf;AACD;;;;;;;;;;;;;AACD,SAAK,MAAL,GAAc,IAAd;AACD;;AACH,SAAA,WAAA;AAAC,CAzCD,EAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a lightweight HTML Element replacement\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList} from '../../util/Options.js';\nimport {Styles} from '../../util/Styles.js';\nimport {LiteText} from './Text.js';\n\n/**\n * Type for attribute lists\n */\nexport type LiteAttributeList = OptionList;\n\n/**\n * Type for generic nodes in LiteAdaptor\n */\nexport type LiteNode = LiteElement | LiteText;\n\n\n/************************************************************/\n/**\n * Implements a lightweight HTML element replacement\n */\nexport class LiteElement {\n  /**\n   * The type of element (tag name)\n   */\n  public kind: string;\n\n  /**\n   * The element's attribute list\n   */\n  public attributes: LiteAttributeList;\n\n  /**\n   * The element's children\n   */\n  public children: LiteNode[];\n\n  /**\n   * The element's parent\n   */\n  public parent: LiteElement;\n\n  /**\n   * The styles for the element\n   */\n  public styles: Styles;\n\n  /**\n   * @param {string} kind  The type of node to create\n   * @param {LiteAttributeList} attributes  The list of attributes to set (if any)\n   * @param {LiteNode[]} children  The children for the node (if any)\n   * @constructor\n   */\n  constructor(kind: string, attributes: LiteAttributeList = {}, children: LiteNode[] = []) {\n    this.kind = kind;\n    this.attributes = {...attributes};\n    this.children = [...children];\n    for (const child of this.children) {\n      child.parent = this;\n    }\n    this.styles = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}