{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlVisitor = void 0;\n\nvar MmlFactory_js_1 = require(\"./MmlFactory.js\");\n\nvar Visitor_js_1 = require(\"../Tree/Visitor.js\");\n\nvar MmlVisitor = function (_super) {\n  __extends(MmlVisitor, _super);\n\n  function MmlVisitor(factory) {\n    if (factory === void 0) {\n      factory = null;\n    }\n\n    var _this = this;\n\n    if (!factory) {\n      factory = new MmlFactory_js_1.MmlFactory();\n    }\n\n    _this = _super.call(this, factory) || this;\n    return _this;\n  }\n\n  MmlVisitor.prototype.visitTextNode = function (_node) {\n    var _args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      _args[_i - 1] = arguments[_i];\n    }\n  };\n\n  MmlVisitor.prototype.visitXMLNode = function (_node) {\n    var _args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      _args[_i - 1] = arguments[_i];\n    }\n  };\n\n  return MmlVisitor;\n}(Visitor_js_1.AbstractVisitor);\n\nexports.MmlVisitor = MmlVisitor;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/Binomial_expansion/Web/binomial/node_modules/mathjax-full/ts/core/MmlTree/MmlVisitor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAQA,IAAA,UAAA,GAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAO9B,WAAA,UAAA,CAAY,OAAZ,EAAsC;AAA1B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,IAAA;AAA0B;;AAAtC,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,OAAL,EAAc;AACZ,MAAA,OAAO,GAAG,IAAI,eAAA,CAAA,UAAJ,EAAV;AACD;;AACD,IAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,KAAc,IAAd;;AACD;;AAYM,EAAA,UAAA,CAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAAoC;AAAE,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAe;AAAf,MAAA,KAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;AAAwB,GAAvD;;AAOA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,KAApB,EAAkC;AAAE,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAe;AAAf,MAAA,KAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;AAAwB,GAArD;;AAET,SAAA,UAAA;AAAC,CAjCD,CAAgC,YAAA,CAAA,eAAhC,CAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  A visitor class that visits MmlNode trees\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {TextNode, XMLNode} from './MmlNode.js';\nimport {MmlFactory} from './MmlFactory.js';\nimport {AbstractVisitor} from '../Tree/Visitor.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlVisitor (subclass of Visitor, and base class\n *  for visitors that accept MmlNode trees)\n */\n\nexport class MmlVisitor extends AbstractVisitor {\n  /**\n   * @param {MmlFactory} factory  The MmlNode factory (defaults to MmlFactory if not given)\n   *\n   * @constructor\n   * @extends {AbstractVisitor}\n   */\n  constructor(factory: MmlFactory = null) {\n    if (!factory) {\n      factory = new MmlFactory();\n    }\n    super(factory);\n  }\n\n  /***********************************************/\n  /**\n   * Stubs for overriding in subclasses\n   */\n\n  /**\n   * @param {TextNode} node  The TextNode to visit\n   * @param {any[]} args  Any arguments needed by the visitor\n   * @return {any}  Any return value needed for the visitor\n   */\n  public visitTextNode(_node: TextNode, ..._args: any[]): any {}\n\n  /**\n   * @param {XMLNode} node  The XMLNode to visit\n   * @param {any[]} args  Any arguments needed by the visitor\n   * @return {any}  Any return value needed for the visitor\n   */\n  public visitXMLNode(_node: XMLNode, ..._args: any[]): any {}\n\n}\n"]},"metadata":{},"sourceType":"script"}