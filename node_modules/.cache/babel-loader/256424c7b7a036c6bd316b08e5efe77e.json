{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SubHandlers = exports.SubHandler = exports.MapHandler = void 0;\n\nvar PrioritizedList_js_1 = require(\"../../util/PrioritizedList.js\");\n\nvar FunctionList_js_1 = require(\"../../util/FunctionList.js\");\n\nvar MapHandler;\n\n(function (MapHandler) {\n  var maps = new Map();\n\n  MapHandler.register = function (map) {\n    maps.set(map.name, map);\n  };\n\n  MapHandler.getMap = function (name) {\n    return maps.get(name);\n  };\n})(MapHandler = exports.MapHandler || (exports.MapHandler = {}));\n\nvar SubHandler = function () {\n  function SubHandler() {\n    this._configuration = new PrioritizedList_js_1.PrioritizedList();\n    this._fallback = new FunctionList_js_1.FunctionList();\n  }\n\n  SubHandler.prototype.add = function (maps, fallback, priority) {\n    var e_1, _a;\n\n    if (priority === void 0) {\n      priority = PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY;\n    }\n\n    try {\n      for (var _b = __values(maps.slice().reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var name_1 = _c.value;\n        var map = MapHandler.getMap(name_1);\n\n        if (!map) {\n          this.warn('Configuration ' + name_1 + ' not found! Omitted.');\n          return;\n        }\n\n        this._configuration.add(map, priority);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    if (fallback) {\n      this._fallback.add(fallback, priority);\n    }\n  };\n\n  SubHandler.prototype.parse = function (input) {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var map = _c.value.item;\n        var result = map.parse(input);\n\n        if (result) {\n          return result;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var _d = __read(input, 2),\n        env = _d[0],\n        symbol = _d[1];\n\n    Array.from(this._fallback)[0].item(env, symbol);\n  };\n\n  SubHandler.prototype.lookup = function (symbol) {\n    var map = this.applicable(symbol);\n    return map ? map.lookup(symbol) : null;\n  };\n\n  SubHandler.prototype.contains = function (symbol) {\n    return this.applicable(symbol) ? true : false;\n  };\n\n  SubHandler.prototype.toString = function () {\n    var e_3, _a;\n\n    var names = [];\n\n    try {\n      for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var map = _c.value.item;\n        names.push(map.name);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return names.join(', ');\n  };\n\n  SubHandler.prototype.applicable = function (symbol) {\n    var e_4, _a;\n\n    try {\n      for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var map = _c.value.item;\n\n        if (map.contains(symbol)) {\n          return map;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return null;\n  };\n\n  SubHandler.prototype.retrieve = function (name) {\n    var e_5, _a;\n\n    try {\n      for (var _b = __values(this._configuration), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var map = _c.value.item;\n\n        if (map.name === name) {\n          return map;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  SubHandler.prototype.warn = function (message) {\n    console.log('TexParser Warning: ' + message);\n  };\n\n  return SubHandler;\n}();\n\nexports.SubHandler = SubHandler;\n\nvar SubHandlers = function () {\n  function SubHandlers() {\n    this.map = new Map();\n  }\n\n  SubHandlers.prototype.add = function (handlers, fallbacks, priority) {\n    var e_6, _a;\n\n    if (priority === void 0) {\n      priority = PrioritizedList_js_1.PrioritizedList.DEFAULTPRIORITY;\n    }\n\n    try {\n      for (var _b = __values(Object.keys(handlers)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var name_2 = key;\n        var subHandler = this.get(name_2);\n\n        if (!subHandler) {\n          subHandler = new SubHandler();\n          this.set(name_2, subHandler);\n        }\n\n        subHandler.add(handlers[name_2], fallbacks[name_2], priority);\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  };\n\n  SubHandlers.prototype.set = function (name, subHandler) {\n    this.map.set(name, subHandler);\n  };\n\n  SubHandlers.prototype.get = function (name) {\n    return this.map.get(name);\n  };\n\n  SubHandlers.prototype.retrieve = function (name) {\n    var e_7, _a;\n\n    try {\n      for (var _b = __values(this.map.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var handler = _c.value;\n        var map = handler.retrieve(name);\n\n        if (map) {\n          return map;\n        }\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n\n    return null;\n  };\n\n  SubHandlers.prototype.keys = function () {\n    return this.map.keys();\n  };\n\n  return SubHandlers;\n}();\n\nexports.SubHandlers = SubHandlers;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/input/tex/MapHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,IAAA,oBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AASA,IAAiB,UAAjB;;AAAA,CAAA,UAAiB,UAAjB,EAA2B;AAEzB,MAAI,IAAI,GAA2B,IAAI,GAAJ,EAAnC;;AAQW,EAAA,UAAA,CAAA,QAAA,GAAW,UAAS,GAAT,EAAuB;AAC3C,IAAA,IAAI,CAAC,GAAL,CAAS,GAAG,CAAC,IAAb,EAAmB,GAAnB;AACD,GAFU;;AAWA,EAAA,UAAA,CAAA,MAAA,GAAS,UAAS,IAAT,EAAqB;AACvC,WAAO,IAAI,CAAC,GAAL,CAAS,IAAT,CAAP;AACD,GAFU;AAIZ,CAzBD,EAAiB,UAAU,GAAV,OAAA,CAAA,UAAA,KAAA,OAAA,CAAA,UAAA,GAAU,EAAV,CAAjB;;AA+BA,IAAA,UAAA,GAAA,YAAA;AAAA,WAAA,UAAA,GAAA;AAEU,SAAA,cAAA,GAA6C,IAAI,oBAAA,CAAA,eAAJ,EAA7C;AACA,SAAA,SAAA,GAA0B,IAAI,iBAAA,CAAA,YAAJ,EAA1B;AAkHT;;AA1GQ,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAA2B,QAA3B,EACW,QADX,EAC6D;;;AAAlD,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAmB,oBAAA,CAAA,eAAA,CAAgB,eAAnC;AAAkD;;;AAC3D,WAAmB,IAAA,EAAA,GAAA,QAAA,CAAA,IAAI,CAAC,KAAL,GAAa,OAAb,EAAA,CAAA,EAAsB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAAyC,CAAA,EAAA,CAAA,IAAzC,EAAyC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAzC,EAA2C;AAAtC,YAAM,MAAI,GAAA,EAAA,CAAA,KAAV;AACH,YAAI,GAAG,GAAG,UAAU,CAAC,MAAX,CAAkB,MAAlB,CAAV;;AACA,YAAI,CAAC,GAAL,EAAU;AACR,eAAK,IAAL,CAAU,mBAAmB,MAAnB,GAA0B,sBAApC;AACA;AACD;;AACD,aAAK,cAAL,CAAoB,GAApB,CAAwB,GAAxB,EAA6B,QAA7B;AACD;;;;;;;;;;;;;AACD,QAAI,QAAJ,EAAc;AACZ,WAAK,SAAL,CAAe,GAAf,CAAmB,QAAnB,EAA6B,QAA7B;AACD;AACF,GAbM;;AAoBA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,KAAb,EAA8B;;;;AAC5B,WAAwB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,cAAL,CAAA,EAAmB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C,CAAA,EAAA,CAAA,IAA3C,EAA2C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA6C;AAAnC,YAAM,GAAG,GAAA,EAAA,CAAA,KAAA,CAAA,IAAT;AACR,YAAM,MAAM,GAAG,GAAG,CAAC,KAAJ,CAAU,KAAV,CAAf;;AACA,YAAI,MAAJ,EAAY;AACV,iBAAO,MAAP;AACD;AACF;;;;;;;;;;;;;AACG,QAAA,EAAA,GAAA,MAAA,CAAgB,KAAhB,EAAqB,CAArB,CAAA;AAAA,QAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;AAAA,QAAM,MAAM,GAAA,EAAA,CAAA,CAAA,CAAZ;;AACJ,IAAA,KAAK,CAAC,IAAN,CAAW,KAAK,SAAhB,EAA2B,CAA3B,EAA8B,IAA9B,CAAmC,GAAnC,EAAwC,MAAxC;AACD,GATM;;AAkBA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAiB,MAAjB,EAA+B;AAC7B,QAAI,GAAG,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAV;AACA,WAAO,GAAG,GAAG,GAAG,CAAC,MAAJ,CAAW,MAAX,CAAH,GAAwB,IAAlC;AACD,GAHM;;AAaA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,MAAhB,EAA8B;AAC5B,WAAO,KAAK,UAAL,CAAgB,MAAhB,IAA0B,IAA1B,GAAiC,KAAxC;AACD,GAFM;;AAQA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;;;AACE,QAAI,KAAK,GAAG,EAAZ;;;AACA,WAAwB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,cAAL,CAAA,EAAmB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C,CAAA,EAAA,CAAA,IAA3C,EAA2C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA6C;AAAnC,YAAM,GAAG,GAAA,EAAA,CAAA,KAAA,CAAA,IAAT;AACR,QAAA,KAAK,CAAC,IAAN,CAAW,GAAG,CAAC,IAAf;AACD;;;;;;;;;;;;;AACD,WAAO,KAAK,CAAC,IAAN,CAAW,IAAX,CAAP;AACD,GANM;;AAcA,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,MAAlB,EAAgC;;;;AAC9B,WAAwB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,cAAL,CAAA,EAAmB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C,CAAA,EAAA,CAAA,IAA3C,EAA2C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA6C;AAAnC,YAAM,GAAG,GAAA,EAAA,CAAA,KAAA,CAAA,IAAT;;AACR,YAAI,GAAG,CAAC,QAAJ,CAAa,MAAb,CAAJ,EAA0B;AACxB,iBAAO,GAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GAPM;;AAeA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA4B;;;;AAC1B,WAAwB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,cAAL,CAAA,EAAmB,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA2C,CAAA,EAAA,CAAA,IAA3C,EAA2C,EAAA,GAAA,EAAA,CAAA,IAAA,EAA3C,EAA6C;AAAnC,YAAM,GAAG,GAAA,EAAA,CAAA,KAAA,CAAA,IAAT;;AACR,YAAI,GAAG,CAAC,IAAJ,KAAa,IAAjB,EAAuB;AACrB,iBAAO,GAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GAPM;;AAcC,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAR,UAAa,OAAb,EAA4B;AAC1B,IAAA,OAAO,CAAC,GAAR,CAAY,wBAAwB,OAApC;AACD,GAFO;;AAIV,SAAA,UAAA;AAAC,CArHD,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA;;AAwHb,IAAA,WAAA,GAAA,YAAA;AAAA,WAAA,WAAA,GAAA;AAEU,SAAA,GAAA,GAAM,IAAI,GAAJ,EAAN;AAgET;;AA1DQ,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,QAAX,EAAoC,SAApC,EACW,QADX,EAC6D;;;AAAlD,QAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,QAAA,GAAmB,oBAAA,CAAA,eAAA,CAAgB,eAAnC;AAAkD;;;AAC3D,WAAkB,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAA,CAAA,EAAqB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAuC,CAAA,EAAA,CAAA,IAAvC,EAAuC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAyC;AAApC,YAAM,GAAG,GAAA,EAAA,CAAA,KAAT;AACH,YAAI,MAAI,GAAG,GAAX;AACA,YAAI,UAAU,GAAG,KAAK,GAAL,CAAS,MAAT,CAAjB;;AACA,YAAI,CAAC,UAAL,EAAiB;AACf,UAAA,UAAU,GAAG,IAAI,UAAJ,EAAb;AACA,eAAK,GAAL,CAAS,MAAT,EAAe,UAAf;AACD;;AACD,QAAA,UAAU,CAAC,GAAX,CAAe,QAAQ,CAAC,MAAD,CAAvB,EAA+B,SAAS,CAAC,MAAD,CAAxC,EAAgD,QAAhD;AACD;;;;;;;;;;;;AACF,GAXM;;AAmBA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAA8B,UAA9B,EAAoD;AAClD,SAAK,GAAL,CAAS,GAAT,CAAa,IAAb,EAAmB,UAAnB;AACD,GAFM;;AAUA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,IAAX,EAA4B;AAC1B,WAAO,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,CAAP;AACD,GAFM;;AAUA,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA4B;;;;AAC1B,WAAsB,IAAA,EAAA,GAAA,QAAA,CAAA,KAAK,GAAL,CAAS,MAAT,EAAA,CAAA,EAAiB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAuC,CAAA,EAAA,CAAA,IAAvC,EAAuC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAvC,EAAyC;AAApC,YAAM,OAAO,GAAA,EAAA,CAAA,KAAb;AACH,YAAI,GAAG,GAAG,OAAO,CAAC,QAAR,CAAiB,IAAjB,CAAV;;AACA,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GARM;;AAeA,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,WAAO,KAAK,GAAL,CAAS,IAAT,EAAP;AACD,GAFM;;AAIT,SAAA,WAAA;AAAC,CAlED,EAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Singleton class for handling symbol maps.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {AbstractSymbolMap, SymbolMap} from './SymbolMap.js';\nimport {ParseInput, ParseResult, ParseMethod} from './Types.js';\n// import {ParserConfiguration} from './Configuration.js';\nimport {PrioritizedList} from '../../util/PrioritizedList.js';\nimport {FunctionList} from '../../util/FunctionList.js';\n\n\nexport type HandlerType = 'delimiter' | 'macro' | 'character' | 'environment';\n\nexport type HandlerConfig = {[P in HandlerType]?: string[]};\nexport type FallbackConfig = {[P in HandlerType]?: ParseMethod};\n\n\nexport namespace MapHandler {\n\n  let maps: Map<string, SymbolMap> = new Map();\n\n  /**\n   * Adds a new symbol map to the map handler. Might overwrite an existing\n   * symbol map of the same name.\n   *\n   * @param {SymbolMap} map Registers a new symbol map.\n   */\n  export let register = function(map: SymbolMap): void {\n    maps.set(map.name, map);\n  };\n\n\n  /**\n   * Looks up a symbol map if it exists.\n   *\n   * @param {string} name The name of the symbol map.\n   * @return {SymbolMap} The symbol map with the given name or null.\n   */\n  export let getMap = function(name: string): SymbolMap {\n    return maps.get(name);\n  };\n\n}\n\n\n/**\n * Class of symbol mappings that are active in a configuration.\n */\nexport class SubHandler {\n\n  private _configuration: PrioritizedList<SymbolMap> = new PrioritizedList<SymbolMap>();\n  private _fallback: FunctionList = new FunctionList();\n\n  /**\n   * Adds a list of symbol maps to the handler.\n   * @param {string[]} maps The names of the symbol maps to add.\n   * @param {ParseMethod} fallback A fallback method.\n   * @param {number} priority Optionally a priority.\n   */\n  public add(maps: string[], fallback: ParseMethod,\n             priority: number = PrioritizedList.DEFAULTPRIORITY) {\n    for (const name of maps.slice().reverse()) {\n      let map = MapHandler.getMap(name);\n      if (!map) {\n        this.warn('Configuration ' + name + ' not found! Omitted.');\n        return;\n      }\n      this._configuration.add(map, priority);\n    }\n    if (fallback) {\n      this._fallback.add(fallback, priority);\n    }\n  }\n\n  /**\n   * Parses the given input with the first applicable symbol map.\n   * @param {ParseInput} input The input for the parser.\n   * @return {ParseResult} The output of the parsing function.\n   */\n  public parse(input: ParseInput): ParseResult {\n    for (let {item: map} of this._configuration) {\n      const result = map.parse(input);\n      if (result) {\n        return result;\n      }\n    }\n    let [env, symbol] = input;\n    Array.from(this._fallback)[0].item(env, symbol);\n  }\n\n\n  /**\n   * Maps a symbol to its \"parse value\" if it exists.\n   *\n   * @param {string} symbol The symbol to parse.\n   * @return {T} A boolean, Character, or Macro.\n   */\n  public lookup<T>(symbol: string): T {\n    let map = this.applicable(symbol) as AbstractSymbolMap<T>;\n    return map ? map.lookup(symbol) : null;\n  }\n\n\n  /**\n   * Checks if a symbol is contained in one of the symbol mappings of this\n   * configuration.\n   *\n   * @param {string} symbol The symbol to parse.\n   * @return {boolean} True if the symbol is contained in the mapping.\n   */\n  public contains(symbol: string): boolean {\n    return this.applicable(symbol) ? true : false;\n  }\n\n\n  /**\n   * @override\n   */\n  public toString(): string {\n    let names = [];\n    for (let {item: map} of this._configuration) {\n      names.push(map.name);\n    }\n    return names.join(', ');\n  }\n\n\n  /**\n   * Retrieves the first applicable symbol map in the configuration.\n   * @param {string} symbol The symbol to parse.\n   * @return {SymbolMap} A map that can parse the symbol.\n   */\n  public applicable(symbol: string): SymbolMap {\n    for (let {item: map} of this._configuration) {\n      if (map.contains(symbol)) {\n        return map;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Retrieves the map of the given name.\n   * @param {string} name Name of the symbol map.\n   * @return {SymbolMap} The map if it exists.\n   */\n  public retrieve(name: string): SymbolMap {\n    for (let {item: map} of this._configuration) {\n      if (map.name === name) {\n        return map;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Prints a warning message.\n   * @param {string} message The warning.\n   */\n  private warn(message: string) {\n    console.log('TexParser Warning: ' + message);\n  }\n\n}\n\n\nexport class SubHandlers {\n\n  private map = new Map<HandlerType, SubHandler>();\n\n  /**\n   * Adds a symbol map to the configuration if it exists.\n   * @param {string} name of the symbol map.\n   */\n  public add(handlers: HandlerConfig, fallbacks: FallbackConfig,\n             priority: number = PrioritizedList.DEFAULTPRIORITY): void {\n    for (const key of Object.keys(handlers)) {\n      let name = key as HandlerType;\n      let subHandler = this.get(name);\n      if (!subHandler) {\n        subHandler = new SubHandler();\n        this.set(name, subHandler);\n      }\n      subHandler.add(handlers[name], fallbacks[name], priority);\n    }\n  }\n\n\n  /**\n   * Setter for subhandlers.\n   * @param {HandlerType} name The name of the subhandler.\n   * @param {SubHandler} subHandler The subhandler.\n   */\n  public set(name: HandlerType, subHandler: SubHandler) {\n    this.map.set(name, subHandler);\n  }\n\n\n  /**\n   * Getter for subhandler.\n   * @param {HandlerType} name Name of the subhandler.\n   * @return {SubHandler} The subhandler by that name if it exists.\n   */\n  public get(name: HandlerType): SubHandler {\n    return this.map.get(name);\n  }\n\n\n  /**\n   * Retrieves a symbol map of the given name.\n   * @param {string} name Name of the symbol map.\n   * @return {SymbolMap} The map if it exists. O/w null.\n   */\n  public retrieve(name: string): SymbolMap {\n    for (const handler of this.map.values()) {\n      let map = handler.retrieve(name);\n      if (map) {\n        return map;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * All names of registered subhandlers.\n   * @return {IterableIterator<string>} Iterable list of keys.\n   */\n  public keys(): IterableIterator<string> {\n    return this.map.keys();\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}