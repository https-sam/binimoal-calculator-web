{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SVGmsqrt = void 0;\n\nvar Wrapper_js_1 = require(\"../Wrapper.js\");\n\nvar msqrt_js_1 = require(\"../../common/Wrappers/msqrt.js\");\n\nvar msqrt_js_2 = require(\"../../../core/MmlTree/MmlNodes/msqrt.js\");\n\nvar SVGmsqrt = function (_super) {\n  __extends(SVGmsqrt, _super);\n\n  function SVGmsqrt() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.dx = 0;\n    return _this;\n  }\n\n  SVGmsqrt.prototype.toSVG = function (parent) {\n    var surd = this.childNodes[this.surd];\n    var base = this.childNodes[this.base];\n    var root = this.root ? this.childNodes[this.root] : null;\n    var rbox = this.getBBox();\n    var sbox = surd.getBBox();\n    var bbox = base.getBBox();\n    var q = this.getPQ(sbox)[1];\n    var t = this.font.params.rule_thickness * this.bbox.scale;\n    var H = bbox.h + q + t;\n    var SVG = this.standardSVGnode(parent);\n    var BASE = this.adaptor.append(SVG, this.svg('g'));\n    this.addRoot(SVG, root, sbox, H);\n    surd.toSVG(SVG);\n    surd.place(this.dx, rbox.h - sbox.h - t);\n    base.toSVG(BASE);\n    base.place(this.dx + sbox.w, 0);\n    this.adaptor.append(SVG, this.svg('rect', {\n      width: this.fixed(bbox.w),\n      height: this.fixed(t),\n      x: this.fixed(this.dx + sbox.w),\n      y: this.fixed(rbox.h - 2 * t)\n    }));\n  };\n\n  SVGmsqrt.prototype.addRoot = function (_ROOT, _root, _sbox, _H) {};\n\n  SVGmsqrt.kind = msqrt_js_2.MmlMsqrt.prototype.kind;\n  return SVGmsqrt;\n}(msqrt_js_1.CommonMsqrtMixin(Wrapper_js_1.SVGWrapper));\n\nexports.SVGmsqrt = SVGmsqrt;","map":{"version":3,"sources":["/Users/sam/Desktop/projects/binimoal-calculator-web/node_modules/mathjax-full/ts/output/svg/Wrappers/msqrt.ts"],"names":[],"mappings":"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","sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2021 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the SVGmsqrt wrapper for the MmlMsqrt object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {SVGWrapper, SVGConstructor} from '../Wrapper.js';\nimport {CommonMsqrtMixin} from '../../common/Wrappers/msqrt.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {MmlMsqrt} from '../../../core/MmlTree/MmlNodes/msqrt.js';\n\n/*****************************************************************/\n/**\n * The SVGmsqrt wrapper for the MmlMsqrt object\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class SVGmsqrt<N, T, D> extends CommonMsqrtMixin<SVGConstructor<any, any, any>>(SVGWrapper) {\n\n  /**\n   * The msqrt wrapper\n   */\n  public static kind = MmlMsqrt.prototype.kind;\n\n  /**\n   * Indent due to root\n   */\n  public dx: number = 0;\n\n  /**\n   * @override\n   */\n  public toSVG(parent: N) {\n    const surd = this.childNodes[this.surd];\n    const base = this.childNodes[this.base];\n    const root = (this.root ? this.childNodes[this.root] : null);\n    //\n    //  Get the parameters for the spacing of the parts\n    //\n    const rbox = this.getBBox();\n    const sbox = surd.getBBox();\n    const bbox = base.getBBox();\n    const q = this.getPQ(sbox)[1];\n    const t = this.font.params.rule_thickness * this.bbox.scale;\n    const H = bbox.h + q + t;\n    //\n    //  Create the SVG structure for the root\n    //\n    const SVG = this.standardSVGnode(parent);\n    const BASE = this.adaptor.append(SVG, this.svg('g'));\n    //\n    //  Place the children\n    //\n    this.addRoot(SVG, root, sbox, H);\n    surd.toSVG(SVG);\n    surd.place(this.dx, rbox.h - sbox.h - t);\n    base.toSVG(BASE);\n    base.place(this.dx + sbox.w, 0);\n    this.adaptor.append(SVG, this.svg('rect', {\n      width: this.fixed(bbox.w), height: this.fixed(t),\n      x: this.fixed(this.dx + sbox.w), y: this.fixed(rbox.h - 2 * t)\n    }));\n  }\n\n  /**\n   * Add root HTML (overridden in mroot)\n   *\n   * @param {N} ROOT           The container for the root\n   * @param {SVGWrapper} root  The wrapped MML root content\n   * @param {BBox} sbox        The bounding box of the surd\n   * @param {number} H         The height of the root as a whole\n   */\n  protected addRoot(_ROOT: N, _root: SVGWrapper<N, T, D>, _sbox: BBox, _H: number) {\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}